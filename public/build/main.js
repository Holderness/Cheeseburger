var app=app||{};!function(){app.ContainerModel=Backbone.Model.extend({}),app.UserModel=Backbone.Model.extend({}),app.UserCollection=Backbone.Collection.extend({model:app.UserModel}),app.ChatModel=Backbone.Model.extend({}),app.ChatCollection=Backbone.Collection.extend({model:app.ChatModel}),app.ChatroomModel=Backbone.Model.extend({defaults:{onlineUsers:new app.UserCollection,userChats:new app.ChatCollection([new app.ChatModel({sender:"Butters",message:"awwwwww hamburgers. ||):||",timestamp:_.now()})])},addUser:function(e){this.get("onlineUsers").add(new app.UserModel({username:e})),console.log("--adding-user---")},removeUser:function(e){var t=this.get("onlineUsers"),n=t.find(function(t){return t.get("username")==e});n&&t.remove(n)},addChat:function(e){var t=_.now();this.get("userChats").add(new app.ChatModel({sender:e.sender,message:e.message,timestamp:t}))}}),app.LoginModel=Backbone.Model.extend({defaults:{error:""}})}();var app=app||{};!function(e){app.ContainerView=Backbone.View.extend({el:"#view-container",initialize:function(e){this.model.on("change:viewState",this.render,this)},render:function(){var e=this.model.get("viewState");this.$el.html(e.render().el)}}),app.LoginView=Backbone.View.extend({template:_.template(e("#login-template").html()),events:{"click #nameBtn":"onLogin","keypress #nameText":"onHitEnter"},initialize:function(e){this.vent=e.vent,this.listenTo(this.model,"change:error",this.render,this)},render:function(){return this.$el.html(this.template(this.model.toJSON())),this},onLogin:function(){this.vent.trigger("login",this.$("#nameText").val())},onHitEnter:function(e){return 13==e.keyCode?(this.onLogin(),!1):void 0}}),app.ChatroomView=Backbone.View.extend({template:_.template(e("#chatroom-template").html()),events:{"keypress .message-input":"messageInputPressed"},initialize:function(e){console.log(e),this.vent=e.vent;var t=this.model.get("onlineUsers"),n=this.model.get("userChats");this.listenTo(t,"add",this.renderUser,this),this.listenTo(t,"remove",this.renderUsers,this),this.listenTo(t,"reset",this.renderUsers,this),this.listenTo(n,"add",this.renderChat,this),this.listenTo(n,"remove",this.renderChats,this),this.listenTo(n,"reset",this.renderChats,this)},render:function(){this.model.get("onlineUsers");return this.$el.html(this.template()),this.renderUsers(),this.renderChats(),this},renderUsers:function(){this.$(".online-users").empty(),this.model.get("onlineUsers").each(function(e){this.renderUser(e)},this)},renderUser:function(t){var n=_.template(e("#online-users-list-template").html());this.$(".online-users").append(n(t.toJSON()))},renderChats:function(){this.$(".chatbox-content").empty(),this.model.get("userChats").each(function(e){this.renderChat(e)},this)},renderChat:function(t){var n=_.template(e("#chatbox-message-template").html()),o=e(n(t.toJSON()));o.appendTo(this.$(".chatbox-content")).hide().fadeIn().slideDown()},messageInputPressed:function(t){return 13===t.keyCode&&e.trim(e(".message-input").val()).length>0?(this.vent.trigger("chat",this.$(".message-input").val()),this.$(".message-input").val(""),!1):(this.vent.trigger("typing"),void console.log("wut"))}})}(jQuery);var ChatClient=function(e){var t,n=this,o=400,i=!1;n.vent=e.vent,n.hostname="http://"+window.location.host,n.connect=function(){n.socket=io.connect(n.hostname),n.setResponseListeners(n.socket)},n.login=function(e){n.socket.emit("login",e)},n.chat=function(e){n.socket.emit("chat",e)},n.addChatTyping=function(e){var t=e.username+" is typing";$(".typetypetype").text(t)},n.removeChatTyping=function(){$(".typetypetype").empty()},n.updateTyping=function(){n.socket&&(i||(i=!0,n.socket.emit("typing")),t=(new Date).getTime(),setTimeout(function(){var e=(new Date).getTime(),s=e-t;s>=o&&i&&(n.socket.emit("stop typing"),i=!1)},o))},n.setResponseListeners=function(e){e.on("welcome",function(t){e.emit("onlineUsers"),console.log("onlineUsers1: ",t),n.vent.trigger("loginDone",t)}),e.on("loginNameExists",function(e){console.log("loginNameExists: ",e),n.vent.trigger("loginNameExists",e)}),e.on("loginNameBad",function(e){console.log("loginNameBad: ",e),n.vent.trigger("loginNameBad",e)}),e.on("onlineUsers",function(e){n.vent.trigger("usersInfo",e)}),e.on("userJoined",function(e){console.log("userJoined: ",e),n.vent.trigger("userJoined",e)}),e.on("userLeft",function(e){console.log("userLeft: ",e),n.vent.trigger("userLeft",e)}),e.on("chat",function(e){console.log("chat: ",e),n.vent.trigger("chatReceived",e)}),e.on("typing",function(e){n.addChatTyping(e)}),e.on("stop typing",function(){n.removeChatTyping()})}};$(document).ready(function(){}),app.MainController=function(){var e=this;e.appEventBus=_.extend({},Backbone.Events),e.viewEventBus=_.extend({},Backbone.Events),e.init=function(){e.chatClient=new ChatClient({vent:e.appEventBus}),e.chatClient.connect(),e.loginModel=new app.LoginModel,e.containerModel=new app.ContainerModel({viewState:new app.LoginView({vent:e.viewEventBus,model:e.loginModel})}),e.containerView=new app.ContainerView({model:e.containerModel}),e.containerView.render()},e.viewEventBus.on("login",function(t){e.chatClient.login(t)}),e.viewEventBus.on("chat",function(t){e.chatClient.chat(t)}),e.viewEventBus.on("typing",function(){e.chatClient.updateTyping()}),e.appEventBus.on("loginDone",function(){e.chatroomModel=new app.ChatroomModel,e.chatroomView=new app.ChatroomView({vent:e.viewEventBus,model:e.chatroomModel}),e.containerModel.set("viewState",e.chatroomView),autosize($("textarea.message-input")),$(".chatbox-content")[0].scrollTop=$(".chatbox-content")[0].scrollHeight}),e.appEventBus.on("loginNameBad",function(t){e.loginModel.set("error","Invalid Name")}),e.appEventBus.on("loginNameExists",function(t){e.loginModel.set("error","Name already exists")}),e.appEventBus.on("usersInfo",function(t){var n=e.chatroomModel.get("onlineUsers"),o=_.map(t,function(e){return new app.UserModel({username:e})});n.reset(o)}),e.appEventBus.on("userJoined",function(t){e.chatroomModel.addUser(t),e.chatroomModel.addChat({sender:"Mayor McCheese",message:t+" joined room."})}),e.appEventBus.on("userLeft",function(t){e.chatroomModel.removeUser(t),e.chatroomModel.addChat({sender:"Grimace",message:t+" left room."})}),e.appEventBus.on("chatReceived",function(t){e.chatroomModel.addChat(t),$(".chatbox-content")[0].scrollTop=$(".chatbox-content")[0].scrollHeight})};var app=app||{};!function(){var e=Backbone.Router.extend({routes:{"":"start",log:"login2",reg:"register","_=_":"library","*filter":"mult"},login:function(){this.loginView=new app.LoginView({model:app.LoginModel}),this.loginView.render()},start:function(){app.mainController=new app.MainController,app.mainController.init()}});app.LibraryRouter=new e,Backbone.history.start()}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYXQtbW9kZWxzLmpzIiwibWFpbi5qcyIsInNvY2tldGNsaWVudC5qcyIsInJvdXRlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJDb250YWluZXJNb2RlbCIsIkJhY2tib25lIiwiTW9kZWwiLCJleHRlbmQiLCJVc2VyTW9kZWwiLCJVc2VyQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb24iLCJtb2RlbCIsIkNoYXRNb2RlbCIsIkNoYXRDb2xsZWN0aW9uIiwiQ2hhdHJvb21Nb2RlbCIsImRlZmF1bHRzIiwib25saW5lVXNlcnMiLCJ1c2VyQ2hhdHMiLCJzZW5kZXIiLCJtZXNzYWdlIiwidGltZXN0YW1wIiwiXyIsIm5vdyIsImFkZFVzZXIiLCJ1c2VybmFtZSIsInRoaXMiLCJnZXQiLCJhZGQiLCJjb25zb2xlIiwibG9nIiwicmVtb3ZlVXNlciIsInVzZXIiLCJmaW5kIiwidXNlck1vZGVsIiwicmVtb3ZlIiwiYWRkQ2hhdCIsImNoYXQiLCJMb2dpbk1vZGVsIiwiZXJyb3IiLCIkIiwiQ29udGFpbmVyVmlldyIsIlZpZXciLCJlbCIsImluaXRpYWxpemUiLCJvcHRpb25zIiwib24iLCJyZW5kZXIiLCJ2aWV3IiwiJGVsIiwiaHRtbCIsIkxvZ2luVmlldyIsInRlbXBsYXRlIiwiZXZlbnRzIiwiY2xpY2sgI25hbWVCdG4iLCJrZXlwcmVzcyAjbmFtZVRleHQiLCJ2ZW50IiwibGlzdGVuVG8iLCJ0b0pTT04iLCJvbkxvZ2luIiwidHJpZ2dlciIsInZhbCIsIm9uSGl0RW50ZXIiLCJlIiwia2V5Q29kZSIsIkNoYXRyb29tVmlldyIsImtleXByZXNzIC5tZXNzYWdlLWlucHV0IiwicmVuZGVyVXNlciIsInJlbmRlclVzZXJzIiwicmVuZGVyQ2hhdCIsInJlbmRlckNoYXRzIiwiZW1wdHkiLCJlYWNoIiwiYXBwZW5kIiwiZWxlbWVudCIsImFwcGVuZFRvIiwiaGlkZSIsImZhZGVJbiIsInNsaWRlRG93biIsIm1lc3NhZ2VJbnB1dFByZXNzZWQiLCJ0cmltIiwibGVuZ3RoIiwialF1ZXJ5IiwiQ2hhdENsaWVudCIsImxhc3RUeXBpbmdUaW1lIiwic2VsZiIsIlRZUElOR19USU1FUl9MRU5HVEgiLCJ0eXBpbmciLCJob3N0bmFtZSIsIndpbmRvdyIsImxvY2F0aW9uIiwiaG9zdCIsImNvbm5lY3QiLCJzb2NrZXQiLCJpbyIsInNldFJlc3BvbnNlTGlzdGVuZXJzIiwibG9naW4iLCJuYW1lIiwiZW1pdCIsImFkZENoYXRUeXBpbmciLCJkYXRhIiwidGV4dCIsInJlbW92ZUNoYXRUeXBpbmciLCJ1cGRhdGVUeXBpbmciLCJEYXRlIiwiZ2V0VGltZSIsInNldFRpbWVvdXQiLCJ0eXBpbmdUaW1lciIsInRpbWVEaWZmIiwiZG9jdW1lbnQiLCJyZWFkeSIsIk1haW5Db250cm9sbGVyIiwiYXBwRXZlbnRCdXMiLCJFdmVudHMiLCJ2aWV3RXZlbnRCdXMiLCJpbml0IiwiY2hhdENsaWVudCIsImxvZ2luTW9kZWwiLCJjb250YWluZXJNb2RlbCIsInZpZXdTdGF0ZSIsImNvbnRhaW5lclZpZXciLCJjaGF0cm9vbU1vZGVsIiwiY2hhdHJvb21WaWV3Iiwic2V0IiwiYXV0b3NpemUiLCJzY3JvbGxUb3AiLCJzY3JvbGxIZWlnaHQiLCJ1c2VycyIsIm1hcCIsIml0ZW0iLCJyZXNldCIsIkxpYnJhcnlSb3V0ZXIiLCJSb3V0ZXIiLCJyb3V0ZXMiLCJyZWciLCJfPV8iLCIqZmlsdGVyIiwibG9naW5WaWV3Iiwic3RhcnQiLCJtYWluQ29udHJvbGxlciIsImhpc3RvcnkiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUFBLEtBQUFBLFNBRUEsV0FHQUEsSUFBQUMsZUFBQUMsU0FBQUMsTUFBQUMsV0FFQUosSUFBQUssVUFBQUgsU0FBQUMsTUFBQUMsV0FDQUosSUFBQU0sZUFBQUosU0FBQUssV0FBQUgsUUFBQUksTUFBQVIsSUFBQUssWUFFQUwsSUFBQVMsVUFBQVAsU0FBQUMsTUFBQUMsV0FDQUosSUFBQVUsZUFBQVIsU0FBQUssV0FBQUgsUUFBQUksTUFBQVIsSUFBQVMsWUFFQVQsSUFBQVcsY0FB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QUNBLEdBQUEsUUFDQXZHLElBQUEsU0FDQXdHLElBQUEsV0FDQUMsTUFBQSxVQUNBQyxVQUFBLFFBR0F4QyxNQUFBLFdBQ0F0RSxLQUFBK0csVUFBQSxHQUFBckksS0FBQStDLFdBQUF2QyxNQUFBUixJQUFBa0MsYUFDQVosS0FBQStHLFVBQUExRixVQTBCQTJGLE1BQUEsV0FDQXRJLElBQUF1SSxlQUFBLEdBQUF2SSxLQUFBMkcsZUFDQTNHLElBQUF1SSxlQUFBeEIsU0FRQS9HLEtBQUErSCxjQUFBLEdBQUFBLEdBQ0E3SCxTQUFBc0ksUUFBQUYiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHAgPSBhcHAgfHwge307XG5cbihmdW5jdGlvbiAoKSB7XG5cblxuYXBwLkNvbnRhaW5lck1vZGVsID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHt9KTtcblxuYXBwLlVzZXJNb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7fSk7XG5hcHAuVXNlckNvbGxlY3Rpb24gPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7bW9kZWw6IGFwcC5Vc2VyTW9kZWx9KTtcblxuYXBwLkNoYXRNb2RlbCA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7fSk7XG5hcHAuQ2hhdENvbGxlY3Rpb24gPSBCYWNrYm9uZS5Db2xsZWN0aW9uLmV4dGVuZCh7bW9kZWw6IGFwcC5DaGF0TW9kZWx9KTtcblxuYXBwLkNoYXRyb29tTW9kZWwgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuICBkZWZhdWx0czoge1xuICAgIG9ubGluZVVzZXJzOiBuZXcgYXBwLlVzZXJDb2xsZWN0aW9uKCksXG4gICAgdXNlckNoYXRzOiBuZXcgYXBwLkNoYXRDb2xsZWN0aW9uKFtcbiAgICAgIC8vIG1lc3NhZ2UgYW5kIHNlbmRlciB1cG9uIGVudGVyaW5nIGNoYXRyb29tXG4gICAgICBuZXcgYXBwLkNoYXRNb2RlbCh7IHNlbmRlcjogJ0J1dHRlcnMnLCBtZXNzYWdlOiAnYXd3d3d3dyBoYW1idXJnZXJzLiB8fCk6fHwnLCB0aW1lc3RhbXA6IF8ubm93KCkgfSlcbiAgICAgIF0pXG4gIH0sXG4gIGFkZFVzZXI6IGZ1bmN0aW9uKHVzZXJuYW1lKSB7XG4gICAgdGhpcy5nZXQoJ29ubGluZVVzZXJzJykuYWRkKG5ldyBhcHAuVXNlck1vZGVsKHsgdXNlcm5hbWU6IHVzZXJuYW1lIH0pKTtcbiAgICBjb25zb2xlLmxvZyhcIi0tYWRkaW5nLXVzZXItLS1cIik7XG4gIH0sXG4gIHJlbW92ZVVzZXI6IGZ1bmN0aW9uKHVzZXJuYW1lKSB7XG4gICAgdmFyIG9ubGluZVVzZXJzID0gdGhpcy5nZXQoJ29ubGluZVVzZXJzJyk7XG4gICAgdmFyIHVzZXIgPSBvbmxpbmVVc2Vycy5maW5kKGZ1bmN0aW9uKHVzZXJNb2RlbCkgeyByZXR1cm4gdXNlck1vZGVsLmdldCgndXNlcm5hbWUnKSA9PSB1c2VybmFtZTsgfSk7XG4gICAgaWYgKHVzZXIpIHtcbiAgICAgIG9ubGluZVVzZXJzLnJlbW92ZSh1c2VyKTtcbiAgICB9XG4gIH0sXG4gIGFkZENoYXQ6IGZ1bmN0aW9uKGNoYXQpIHtcbiAgICB2YXIgbm93ID0gXy5ub3coKTtcbiAgICB0aGlzLmdldCgndXNlckNoYXRzJykuYWRkKG5ldyBhcHAuQ2hhdE1vZGVsKHsgc2VuZGVyOiBjaGF0LnNlbmRlciwgbWVzc2FnZTogY2hhdC5tZXNzYWdlLCB0aW1lc3RhbXA6IG5vd30pKTtcbiAgfSxcbn0pO1xuXG5cbi8vIExvZ2luTW9kZWxcbmFwcC5Mb2dpbk1vZGVsID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbiAgZGVmYXVsdHM6IHtcbiAgICBlcnJvcjogXCJcIlxuICB9XG59KTtcblxuXG59KSgpO1xuXG5cbi8vIHZhciBVc2VyID0gQmFja2JvbmUuTW9kZWwuZXh0ZW5kKHtcbi8vIFx0ZGVmYXVsdHM6IHtcbi8vIFx0XHR1c2VybmFtZTogJycsXG4vLyBcdFx0YXZhdGFyOiAnJyxcbi8vIFx0XHRpbmJveDogW10sXG4vLyBcdH0sXG4vLyB9KTtcblxuLy8gdmFyIENvbnZlcnNhdGlvbiA9IEJhY2tib25lLk1vZGVsLmV4dGVuZCh7XG4vLyBcdGRlZmF1bHRzOiB7XG4vLyBcdFx0dXNlcnM6IFtdLFxuLy8gXHRcdG1lc3NhZ2VzOiBbXSxcbi8vIFx0fSxcbi8vIH0pOyIsIlxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cbn0pO1xuXG5cbmFwcC5NYWluQ29udHJvbGxlciA9IGZ1bmN0aW9uKCkge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblxuXG4gIC8vVGhlc2UgYWxsb3dzIHVzIHRvIGJpbmQgYW5kIHRyaWdnZXIgb24gdGhlIG9iamVjdCBmcm9tIGFueXdoZXJlIGluIHRoZSBhcHAuXG5cdHNlbGYuYXBwRXZlbnRCdXMgPSBfLmV4dGVuZCh7fSwgQmFja2JvbmUuRXZlbnRzKTtcblx0c2VsZi52aWV3RXZlbnRCdXMgPSBfLmV4dGVuZCh7fSwgQmFja2JvbmUuRXZlbnRzKTtcblxuXHRzZWxmLmluaXQgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBjcmVhdGVzIENoYXRDbGllbnQgZnJvbSBzb2NrZXRjbGllbnQuanMsIHBhc3NlcyBpbiBcblx0XHQvLyBhcHBFdmVudEJ1cyBhcyB2ZW50LCBjb25uZWN0c1xuXHRcdHNlbGYuY2hhdENsaWVudCA9IG5ldyBDaGF0Q2xpZW50KHsgdmVudDogc2VsZi5hcHBFdmVudEJ1cyB9KTtcblx0XHRzZWxmLmNoYXRDbGllbnQuY29ubmVjdCgpO1xuXG4gICAgLy8gbG9naW5Nb2RlbFxuXHRcdHNlbGYubG9naW5Nb2RlbCA9IG5ldyBhcHAuTG9naW5Nb2RlbCgpO1xuXG4gICAgLy8gVGhlIENvbnRhaW5lck1vZGVsIGdldHMgcGFzc2VkIGEgdmlld1N0YXRlLCBMb2dpblZpZXcsIHdoaWNoXG4gICAgLy8gaXMgdGhlIGxvZ2luIHBhZ2UuIFRoYXQgTG9naW5WaWV3IGdldHMgcGFzc2VkIHRoZSB2aWV3RXZlbnRCdXNcbiAgICAvLyBhbmQgdGhlIExvZ2luTW9kZWwuXG5cdFx0c2VsZi5jb250YWluZXJNb2RlbCA9IG5ldyBhcHAuQ29udGFpbmVyTW9kZWwoeyB2aWV3U3RhdGU6IG5ldyBhcHAuTG9naW5WaWV3KHt2ZW50OiBzZWxmLnZpZXdFdmVudEJ1cywgbW9kZWw6IHNlbGYubG9naW5Nb2RlbH0pfSk7XG5cblx0XHQvLyBuZXh0LCBhIG5ldyBDb250YWluZXJWaWV3IGlzIGludGlhbGl6ZWQgd2l0aCB0aGUgbmV3bHkgY3JlYXRlZCBjb250YWluZXJNb2RlbFxuXHRcdC8vIHRoZSBsb2dpbiBwYWdlIGlzIHRoZW4gcmVuZGVyZWQuXG5cdFx0c2VsZi5jb250YWluZXJWaWV3ID0gbmV3IGFwcC5Db250YWluZXJWaWV3KHsgbW9kZWw6IHNlbGYuY29udGFpbmVyTW9kZWwgfSk7XG5cdFx0c2VsZi5jb250YWluZXJWaWV3LnJlbmRlcigpO1xuXHR9O1xuXG5cblxuICAvLy8vLy8vLy8vLy8gIEJ1c3NlcyAvLy8vLy8vLy8vLy9cbiAgICAvLyBUaGVzZSBCdXNzZXMgbGlzdGVuIHRvIHRoZSBzb2NrZXRjbGllbnRcbiAgIC8vICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbiAgLy8vLyB2aWV3RXZlbnRCdXMgTGlzdGVuZXJzIC8vLy8vXG4gIFxuXHRzZWxmLnZpZXdFdmVudEJ1cy5vbihcImxvZ2luXCIsIGZ1bmN0aW9uKHVzZXJuYW1lKSB7XG4gICAgLy8gc29ja2V0aW8gbG9naW4sIHNlbmRzIG5hbWUgdG8gc29ja2V0Y2xpZW50LCBzb2NrZXRjbGllbnQgc2VuZHMgaXQgdG8gY2hhdHNlcnZlclxuICAgIHNlbGYuY2hhdENsaWVudC5sb2dpbih1c2VybmFtZSk7XG4gIH0pO1xuXHRzZWxmLnZpZXdFdmVudEJ1cy5vbihcImNoYXRcIiwgZnVuY3Rpb24oY2hhdCkge1xuICAgIC8vIHNvY2tldGlvIGNoYXQsIHNlbmRzIGNoYXQgdG8gc29ja2V0Y2xpZW50LCBzb2NrZXRjbGllbnQgdG8gY2hhdHNlcnZlclxuICAgIHNlbGYuY2hhdENsaWVudC5jaGF0KGNoYXQpO1xuICB9KTtcbiAgc2VsZi52aWV3RXZlbnRCdXMub24oXCJ0eXBpbmdcIiwgZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5jaGF0Q2xpZW50LnVwZGF0ZVR5cGluZygpO1xuICB9KTtcblxuXG4gIC8vLy8gYXBwRXZlbnRCdXMgTGlzdGVuZXJzIC8vLy9cblxuICAvLyBhZnRlciB0aGUgJ3dlbGNvbWUnIGV2ZW50IHRyaWdnZXJzIG9uIHRoZSBzb2NrZWNsaWVudCwgdGhlIGxvZ2luRG9uZSBldmVudCB0cmlnZ2Vycy5cblx0c2VsZi5hcHBFdmVudEJ1cy5vbihcImxvZ2luRG9uZVwiLCBmdW5jdGlvbigpIHtcblxuXHRcdC8vIG5ldyBtb2RlbCBhbmQgdmlldyBjcmVhdGVkIGZvciBjaGF0cm9vbVxuXHRcdHNlbGYuY2hhdHJvb21Nb2RlbCA9IG5ldyBhcHAuQ2hhdHJvb21Nb2RlbCgpO1xuXHRcdHNlbGYuY2hhdHJvb21WaWV3ICA9IG5ldyBhcHAuQ2hhdHJvb21WaWV3KHt2ZW50OiBzZWxmLnZpZXdFdmVudEJ1cywgbW9kZWw6IHNlbGYuY2hhdHJvb21Nb2RlbCB9KTtcblxuXHRcdC8vIHZpZXdzdGF0ZSBpcyBjaGFuZ2VkIHRvIGNoYXRyb29tIGFmdGVyIGxvZ2luLlxuXHRcdHNlbGYuY29udGFpbmVyTW9kZWwuc2V0KFwidmlld1N0YXRlXCIsIHNlbGYuY2hhdHJvb21WaWV3KTtcbiAgICBhdXRvc2l6ZSgkKCd0ZXh0YXJlYS5tZXNzYWdlLWlucHV0JykpO1xuXHRcdCQoJy5jaGF0Ym94LWNvbnRlbnQnKVswXS5zY3JvbGxUb3AgPSAkKCcuY2hhdGJveC1jb250ZW50JylbMF0uc2Nyb2xsSGVpZ2h0O1xuXHR9KTtcblxuICAvLyBlcnJvciBsaXN0ZW5lcnNcblx0c2VsZi5hcHBFdmVudEJ1cy5vbihcImxvZ2luTmFtZUJhZFwiLCBmdW5jdGlvbih1c2VybmFtZSkge1xuXHRcdHNlbGYubG9naW5Nb2RlbC5zZXQoXCJlcnJvclwiLCBcIkludmFsaWQgTmFtZVwiKTtcblx0fSk7XG5cdHNlbGYuYXBwRXZlbnRCdXMub24oXCJsb2dpbk5hbWVFeGlzdHNcIiwgZnVuY3Rpb24odXNlcm5hbWUpIHtcblx0XHRzZWxmLmxvZ2luTW9kZWwuc2V0KFwiZXJyb3JcIiwgXCJOYW1lIGFscmVhZHkgZXhpc3RzXCIpO1xuXHR9KTtcblxuXG4gIC8vIGFmdGVyICdvbmxpbmVVc2VycycgZXZlbnQgZW1pdHMsIHRoZSAndXNlcnNJbmZvJyBldmVudCB0cmlnZ2Vyc1xuXHRzZWxmLmFwcEV2ZW50QnVzLm9uKFwidXNlcnNJbmZvXCIsIGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgIC8vZGF0YSBpcyBhbiBhcnJheSBvZiB1c2VybmFtZXMsIGluY2x1ZGluZyB0aGUgbmV3IHVzZXJcblxuXHRcdC8vIFRoaXMgbWV0aG9kIGdldHMgdGhlIG9ubGluZSB1c2VycyBjb2xsZWN0aW9uIGZyb20gY2hhdHJvb21Nb2RlbC5cblx0XHQvLyBvbmxpbmVVc2VycyBpcyB0aGUgY29sbGVjdGlvblxuXHRcdHZhciBvbmxpbmVVc2VycyA9IHNlbGYuY2hhdHJvb21Nb2RlbC5nZXQoXCJvbmxpbmVVc2Vyc1wiKTtcblxuICAgLy8gdXNlcnMgaXMgYXJyYXkgb2YgdGhlIGN1cnJlbnQgdXNlciBtb2RlbHNcblx0XHR2YXIgdXNlcnMgPSBfLm1hcChkYXRhLCBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRyZXR1cm4gbmV3IGFwcC5Vc2VyTW9kZWwoe3VzZXJuYW1lOiBpdGVtfSk7XG5cdFx0fSk7XG5cbiAgICAvLyB0aGlzIHJlc2V0cyB0aGUgY29sbGVjdGlvbiB3aXRoIHRoZSB1cGRhdGVkIGFycmF5IG9mIHVzZXJzXG5cdFx0b25saW5lVXNlcnMucmVzZXQodXNlcnMpO1xuXHR9KTtcblxuICAvLyBhZGRzIG5ldyB1c2VyIHRvIHVzZXJzIGNvbGxlY3Rpb24sIHNlbmRzIGRlZmF1bHQgam9pbmluZyBtZXNzYWdlXG5cdHNlbGYuYXBwRXZlbnRCdXMub24oXCJ1c2VySm9pbmVkXCIsIGZ1bmN0aW9uKHVzZXJuYW1lKSB7XG5cdFx0c2VsZi5jaGF0cm9vbU1vZGVsLmFkZFVzZXIodXNlcm5hbWUpO1xuXHRcdHNlbGYuY2hhdHJvb21Nb2RlbC5hZGRDaGF0KHtzZW5kZXI6IFwiTWF5b3IgTWNDaGVlc2VcIiwgbWVzc2FnZTogdXNlcm5hbWUgKyBcIiBqb2luZWQgcm9vbS5cIiB9KTtcblx0fSk7XG5cblx0Ly8gcmVtb3ZlcyB1c2VyIGZyb20gdXNlcnMgY29sbGVjdGlvbiwgc2VuZHMgZGVmYXVsdCBsZWF2aW5nIG1lc3NhZ2Vcblx0c2VsZi5hcHBFdmVudEJ1cy5vbihcInVzZXJMZWZ0XCIsIGZ1bmN0aW9uKHVzZXJuYW1lKSB7XG5cdFx0c2VsZi5jaGF0cm9vbU1vZGVsLnJlbW92ZVVzZXIodXNlcm5hbWUpO1xuXHRcdHNlbGYuY2hhdHJvb21Nb2RlbC5hZGRDaGF0KHtzZW5kZXI6IFwiR3JpbWFjZVwiLCBtZXNzYWdlOiB1c2VybmFtZSArIFwiIGxlZnQgcm9vbS5cIiB9KTtcblx0fSk7XG5cblx0Ly8gY2hhdCBwYXNzZWQgZnJvbSBzb2NrZXRjbGllbnQsIGFkZHMgYSBuZXcgY2hhdCBtZXNzYWdlIHVzaW5nIGNoYXRyb29tTW9kZWwgbWV0aG9kXG5cdHNlbGYuYXBwRXZlbnRCdXMub24oXCJjaGF0UmVjZWl2ZWRcIiwgZnVuY3Rpb24oY2hhdCkge1xuXHRcdHNlbGYuY2hhdHJvb21Nb2RlbC5hZGRDaGF0KGNoYXQpO1xuXHRcdCQoJy5jaGF0Ym94LWNvbnRlbnQnKVswXS5zY3JvbGxUb3AgPSAkKCcuY2hhdGJveC1jb250ZW50JylbMF0uc2Nyb2xsSGVpZ2h0O1xuXHR9KTtcbn07XG5cblxuXG5cblxuXG4vLyB2YXIgdGhvbUpvbmVzID1cbi8vIFx0XHR7XG4vLyBcdFx0XHRuYW1lOiAnVGhvbSBKb25lcycsXG4vLyBcdFx0XHRhdmF0YXI6ICdhc3NldHMvaW1nL3Rob20tam9uZXMuanBnJyxcbi8vIFx0XHRcdGlkOiAxXG4vLyBcdFx0fTtcbi8vIHZhciB0b21Kb25lcyA9IFxuLy8gXHRcdHtcbi8vIFx0XHRcdG5hbWU6ICdUb20gSm9uZXMnLFxuLy8gXHRcdFx0YXZhdGFyOiAnYXNzZXRzL2ltZy90b20tam9uZXMuanBnJyxcbi8vIFx0XHRcdGlkOiAyXG4vLyBcdFx0fTtcbi8vIHZhciBldiA9IFxuLy8gXHRcdHtcbi8vIFx0XHRcdG5hbWU6ICdFdmFuIFR1cm5lcicsXG4vLyBcdFx0XHRhdmF0YXI6ICdodHRwOi8vZXZ0dXJuLmNvbS9hc3NldHMvaW1nL2V2LXdpbnRlci15ZWxsb3cuanBnJyxcbi8vIFx0XHRcdGlkOiAzXG4vLyBcdFx0fTtcblxuLy8gdmFyIGNvbnZvMSA9IG5ldyBDb252ZXJzYXRpb24oe1x0XHRcdFx0XG4vLyBcdFx0XHRcdFx0dXNlcnM6IFt0b21Kb25lcywgdGhvbUpvbmVzXSxcbi8vIFx0XHRcdFx0XHRtZXNzYWdlczpcdFtcbi8vIFx0XHRcdFx0XHRcdFx0e1xuLy8gXHRcdFx0XHRcdFx0XHRcdHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbi8vIFx0XHRcdFx0XHRcdFx0XHRjb250ZW50OiAnQ3JhaWcsIGl0XFwncyBpbXBvcnRhbnQuIEkganVzdCBzcGlsbGVkIHNhbHNhIGFsbCBvdmVyIG15IGZpbGFzLicsXG4vLyBcdFx0XHRcdFx0XHRcdFx0c2VuZGVyOiB0b21Kb25lc1xuLy8gXHRcdFx0XHRcdFx0XHR9LFxuLy8gXHRcdFx0XHRcdFx0XHR7XG4vLyBcdFx0XHRcdFx0XHRcdFx0dGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuLy8gXHRcdFx0XHRcdFx0XHRcdGNvbnRlbnQ6ICdJXFxtIG5vdCBDcmFpZyEnLFxuLy8gXHRcdFx0XHRcdFx0XHRcdHNlbmRlcjogdGhvbUpvbmVzXG4vLyBcdFx0XHRcdFx0XHRcdH0sXG4vLyBcdFx0XHRcdFx0XHRcdHtcbi8vIFx0XHRcdFx0XHRcdFx0XHR0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4vLyBcdFx0XHRcdFx0XHRcdFx0Y29udGVudDogJ0Z1Y2sgdGhlIGhlbGwgb2ZmIScsXG4vLyBcdFx0XHRcdFx0XHRcdFx0c2VuZGVyOiB0aG9tSm9uZXNcbi8vIFx0XHRcdFx0XHRcdFx0fVxuLy8gXHRcdFx0XHRcdFx0XVxuLy8gXHRcdFx0XHRcdH0pO1xuLy8gdmFyIGNvbnZvMiA9IG5ldyBDb252ZXJzYXRpb24oe1xuLy8gXHRcdFx0XHR1c2VyczogW3RvbUpvbmVzLCB0aG9tSm9uZXNdLFx0XHRcdFxuLy8gXHRcdFx0XHRtZXNzYWdlczpcdFtcbi8vIFx0XHRcdFx0XHRcdHtcbi8vIFx0XHRcdFx0XHRcdFx0dGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuLy8gXHRcdFx0XHRcdFx0XHRjb250ZW50OiAnQ3JhaWcsIGl0XFwncyBpbXBvcnRhbnQuIEkganVzdCBzcGlsbGVkIHNhbHNhIGFsbCBvdmVyIG15IGZpbGFzLicsXG4vLyBcdFx0XHRcdFx0XHRcdHNlbmRlcjogdG9tSm9uZXNcbi8vIFx0XHRcdFx0XHRcdH0sXG4vLyBcdFx0XHRcdFx0XHR7XG4vLyBcdFx0XHRcdFx0XHRcdHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbi8vIFx0XHRcdFx0XHRcdFx0Y29udGVudDogJ0lcXG0gbm90IENyYWlnIScsXG4vLyBcdFx0XHRcdFx0XHRcdHNlbmRlcjogdGhvbUpvbmVzXG4vLyBcdFx0XHRcdFx0XHR9LFxuLy8gXHRcdFx0XHRcdFx0e1xuLy8gXHRcdFx0XHRcdFx0XHR0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4vLyBcdFx0XHRcdFx0XHRcdGNvbnRlbnQ6ICdKdXN0IGF0ZSBhIGJpc3F1aXQnLFxuLy8gXHRcdFx0XHRcdFx0XHRzZW5kZXI6IHRvbUpvbmVzXG4vLyBcdFx0XHRcdFx0XHR9XG4vLyBcdFx0XHRcdFx0XVxuLy8gXHRcdFx0XHR9KTtcbi8vIHZhciBjb252bzMgPSBuZXcgQ29udmVyc2F0aW9uKHtcbi8vIFx0XHRcdFx0dXNlcnM6IFtldiwgdGhvbUpvbmVzXSxcbi8vIFx0XHRcdFx0bWVzc2FnZXM6XHRbXG4vLyBcdFx0XHRcdFx0XHR7XG4vLyBcdFx0XHRcdFx0XHRcdHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbi8vIFx0XHRcdFx0XHRcdFx0Y29udGVudDogJ0NyYWlnLCBpdFxcJ3MgaW1wb3J0YW50LiBJIGp1c3Qgc3BpbGxlZCBzYWxzYSBhbGwgb3ZlciBteSBmaWxhcy4nLFxuLy8gXHRcdFx0XHRcdFx0XHRzZW5kZXI6IHRvbUpvbmVzXG4vLyBcdFx0XHRcdFx0XHR9LFxuLy8gXHRcdFx0XHRcdFx0e1xuLy8gXHRcdFx0XHRcdFx0XHR0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4vLyBcdFx0XHRcdFx0XHRcdGNvbnRlbnQ6ICdJXFxtIG5vdCBDcmFpZyEnLFxuLy8gXHRcdFx0XHRcdFx0XHRzZW5kZXI6IHRob21Kb25lc1xuLy8gXHRcdFx0XHRcdFx0fSxcbi8vIFx0XHRcdFx0XHRcdHtcbi8vIFx0XHRcdFx0XHRcdFx0dGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuLy8gXHRcdFx0XHRcdFx0XHRjb250ZW50OiAnUGxlYXNlIGxlYXZlIG15IHdpZmUgaW4gdGhpcycsXG4vLyBcdFx0XHRcdFx0XHRcdHNlbmRlcjogZXZcbi8vIFx0XHRcdFx0XHRcdH1cbi8vIFx0XHRcdFx0XHRdfSk7XG5cbi8vIHZhciB1MiA9IG5ldyBVc2VyKHRob21Kb25lcyk7XG5cbi8vIHZhciB1MSA9IG5ldyBVc2VyKHtcbi8vIFx0XHRcdG5hbWU6ICdUb20gSm9uZXMnLFxuLy8gXHRcdFx0YXZhdGFyOiAnaHR0cDovL2E1LmZpbGVzLmJpb2dyYXBoeS5jb20vaW1hZ2UvdXBsb2FkL2NfZmlsbCxjc19zcmdiLGRwcl8xLjAsZ19mYWNlLGhfMzAwLHFfODAsd18zMDAvTVRFMU9EQTBPVGN5TURBMU5qZzRPRFExLmpwZycsXG4vLyBcdFx0XHRpbmJveDogXG4vLyBcdFx0XHRcdFtcbi8vIFx0XHRcdFx0XHRjb252bzEsXG4vLyBcdFx0XHRcdFx0Y29udm8yLFxuLy8gXHRcdFx0XHRcdGNvbnZvM1xuLy8gXHRcdFx0XHRdLFx0XG4vLyBcdFx0XHRpZDogMVxuLy8gXHRcdH0pO1xuXG5cbi8vIG5ldyBXT1coXG4vLyAgICAgeyBvZmZzZXQ6IDEyMCB9XG4vLyApLmluaXQoKTtcblxuXG4vLyBuZXcgQ2hhdGJveCgpO1xuIiwiXG4vLyBUaGUgQ2hhdENsaWVudCBpcyBpbXBsZW1lbnRlZCBvbiBtYWluLmpzLlxuLy8gVGhlIGNoYXRjbGllbnQgaXMgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBvbiB0aGUgTWFpbkNvbnRyb2xsZXIuXG4vLyBJdCBib3RoIGxpc3RlbnMgdG8gYW5kIGVtaXRzIGV2ZW50cyBvbiB0aGUgc29ja2V0LCBlZzpcbi8vIEl0IGhhcyBpdHMgb3duIG1ldGhvZHMgdGhhdCwgd2hlbiBjYWxsZWQsIGVtaXQgdG8gdGhlIHNvY2tldCB3LyBkYXRhLlxuLy8gSXQgYWxzbyBzZXRzIHJlc3BvbnNlIGxpc3RlbmVycyBvbiBjb25uZWN0aW9uLCB0aGVzZSByZXNwb25zZSBsaXN0ZW5lcnNcbi8vIGxpc3RlbiB0byB0aGUgc29ja2V0IGFuZCB0cmlnZ2VyIGV2ZW50cyBvbiB0aGUgYXBwRXZlbnRCdXMgb24gdGhlIFxuLy8gTWFpbkNvbnRyb2xsZXJcbnZhciBDaGF0Q2xpZW50ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXG5cdHZhciBzZWxmID0gdGhpcztcblxuXHQvLyBpcy10eXBpbmcgaGVscGVyIHZhcmlhYmxlc1xuXHR2YXIgVFlQSU5HX1RJTUVSX0xFTkdUSCA9IDQwMDsgLy8gbXNcbiAgdmFyIHR5cGluZyA9IGZhbHNlO1xuICB2YXIgbGFzdFR5cGluZ1RpbWU7XG4gIFxuICAvLyB0aGlzIHZlbnQgaG9sZHMgdGhlIGFwcEV2ZW50QnVzXG5cdHNlbGYudmVudCA9IG9wdGlvbnMudmVudDtcblxuXHRzZWxmLmhvc3RuYW1lID0gJ2h0dHA6Ly8nICsgd2luZG93LmxvY2F0aW9uLmhvc3Q7XG5cbiAgLy8gY29ubmVjdHMgdG8gc29ja2V0LCBzZXRzIHJlc3BvbnNlIGxpc3RlbmVyc1xuXHRzZWxmLmNvbm5lY3QgPSBmdW5jdGlvbigpIHtcblx0XHQvLyB0aGlzIGlvIG1pZ2h0IGJlIGEgbGl0dGxlIGNvbmZ1c2luZy4uLiB3aGVyZSBpcyBpdCBjb21pbmcgZnJvbT9cblx0XHQvLyBpdCdzIGNvbWluZyBmcm9tIHRoZSBzdGF0aWMgbWlkZGxld2FyZSBvbiBzZXJ2ZXIuanMgYmMgZXZlcnl0aGluZ1xuXHRcdC8vIGluIHRoZSAvcHVibGljIGZvbGRlciBoYXMgYmVlbiBhdHRhY2hlZCB0byB0aGUgc2VydmVyLCBhbmQgdmlzYVxuXHRcdC8vIHZlcnNhLlxuXHRcdHNlbGYuc29ja2V0ID0gaW8uY29ubmVjdChzZWxmLmhvc3RuYW1lKTtcblx0XHRzZWxmLnNldFJlc3BvbnNlTGlzdGVuZXJzKHNlbGYuc29ja2V0KTtcblx0fTtcblxuICAgIC8vLy8vIFZpZXdFdmVudEJ1cyBtZXRob2RzIC8vLy9cbiAgICAvLyBtZXRob2RzIHRoYXQgZW1pdCB0byB0aGUgY2hhdHNlcnZlclxuXHRcdC8vIGVtaXRzIGxvZ2luIGV2ZW50IHRvIGNoYXRzZXJ2ZXJcblx0c2VsZi5sb2dpbiA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRzZWxmLnNvY2tldC5lbWl0KFwibG9naW5cIiwgbmFtZSk7XG5cdH07XG4gICAgLy8gZW1pdHMgY2hhdCBldmVudCB0byBjaGF0c2VydmVyXG5cdHNlbGYuY2hhdCA9IGZ1bmN0aW9uKGNoYXQpIHtcblx0XHRzZWxmLnNvY2tldC5lbWl0KFwiY2hhdFwiLCBjaGF0KTtcblx0fTtcblxuXG4gIC8vIFR5cGluZyBtZXRob2RzXG5cdHNlbGYuYWRkQ2hhdFR5cGluZyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGRhdGEudXNlcm5hbWUgKyAnIGlzIHR5cGluZyc7XG4gICAgJCgnLnR5cGV0eXBldHlwZScpLnRleHQobWVzc2FnZSk7XG5cdH07XG5cblx0c2VsZi5yZW1vdmVDaGF0VHlwaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgJCgnLnR5cGV0eXBldHlwZScpLmVtcHR5KCk7XG5cdH07XG5cbiAgc2VsZi51cGRhdGVUeXBpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi5zb2NrZXQpIHtcbiAgICAgIGlmICghdHlwaW5nKSB7XG4gICAgICAgIHR5cGluZyA9IHRydWU7XG4gICAgICAgIHNlbGYuc29ja2V0LmVtaXQoJ3R5cGluZycpO1xuICAgICAgfVxuICAgICAgbGFzdFR5cGluZ1RpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdHlwaW5nVGltZXIgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgICAgICB2YXIgdGltZURpZmYgPSB0eXBpbmdUaW1lciAtIGxhc3RUeXBpbmdUaW1lO1xuICAgICAgICBpZiAodGltZURpZmYgPj0gVFlQSU5HX1RJTUVSX0xFTkdUSCAmJiB0eXBpbmcpIHtcbiAgICAgICAgICAgc2VsZi5zb2NrZXQuZW1pdCgnc3RvcCB0eXBpbmcnKTtcbiAgICAgICAgICAgdHlwaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0sIFRZUElOR19USU1FUl9MRU5HVEgpO1xuICAgIH1cbiAgfTtcblxuXG5cbiAgLy8gY2hhdHNlcnZlciBsaXN0ZW5lcnNcbiAgLy8gdGhlc2UgZ3V5cyBsaXN0ZW4gdG8gdGhlIGNoYXRzZXJ2ZXIvc29ja2V0IGFuZCBlbWl0IGRhdGEgdG8gbWFpbi5qcyxcbiAgLy8gc3BlY2lmaWNhbGx5IHRvIHRoZSBhcHBFdmVudEJ1cy5cblx0c2VsZi5zZXRSZXNwb25zZUxpc3RlbmVycyA9IGZ1bmN0aW9uKHNvY2tldCkge1xuXHRcdC8vIGNsaWVudCBsaXN0ZW5lcnMgdGhhdCBsaXN0ZW4gdG8gdGhlIGNoYXRzZXJ2ZXIgYW5kIGl0c2VsZi5cblx0XHQvLyBFYWNoIHNlcnZlciBldmVudCB0cmlnZ2VycyBhbiBhcHBFdmVudEJ1cyBldmVudCBwYWlyZWQgd2l0aCBcblx0XHQvLyByZWxldmFudCBkYXRhLlxuXG5cdFx0c29ja2V0Lm9uKCd3ZWxjb21lJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgLy8gZW1pdHMgZXZlbnQgdG8gcmVjYWxpYnJhdGUgb25saW5lVXNlcnMgY29sbGVjdGlvblxuICAgICAgc29ja2V0LmVtaXQoXCJvbmxpbmVVc2Vyc1wiKTtcblx0XHRcdGNvbnNvbGUubG9nKCdvbmxpbmVVc2VyczE6ICcsIGRhdGEpO1xuICAgICAgLy8gZGF0YSBpcyB1bmRlZmluZWQgYXQgdGhpcyBwb2ludCBiZWNhdXNlIGl0J3MgdGhlIGZpcnN0IHRvXG4gICAgICAvLyBmaXJlIG9mZiBhbiBldmVudCBjaGFpbiB0aGF0IHdpbGwgYXBwZW5kIHRoZSBuZXcgdXNlciB0byBcbiAgICAgIC8vIHRoZSBvbmxpbmVVc2VyIGNvbGxlY3Rpb25cbiAgICAgIHNlbGYudmVudC50cmlnZ2VyKFwibG9naW5Eb25lXCIsIGRhdGEpO1xuICAgIH0pO1xuXG5cdFx0c29ja2V0Lm9uKCdsb2dpbk5hbWVFeGlzdHMnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAvLyBkYXRhID09PSBzdHJpbmcgb2YgdXNlZCB1c2VybmFtZVxuXHRcdFx0Y29uc29sZS5sb2coJ2xvZ2luTmFtZUV4aXN0czogJywgZGF0YSk7XG5cdFx0XHRzZWxmLnZlbnQudHJpZ2dlcihcImxvZ2luTmFtZUV4aXN0c1wiLCBkYXRhKTtcblx0XHR9KTtcblx0XHRzb2NrZXQub24oJ2xvZ2luTmFtZUJhZCcsIGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdC8vIGRhdGEgPT09IHN0cmluZyBvZiBiYWQgdXNlcm5hbWVcblx0XHRcdGNvbnNvbGUubG9nKCdsb2dpbk5hbWVCYWQ6ICcsIGRhdGEpO1xuXHRcdFx0c2VsZi52ZW50LnRyaWdnZXIoXCJsb2dpbk5hbWVCYWRcIiwgZGF0YSk7XG5cdFx0fSk7XG5cblx0XHQvLyB0aGlzIGlzIHRoZSBzZWNvbmQgbGlzdGVuZXIgdG8gb25saW5lVXNlcnNcblx0XHQvLyBieSB0aGUgdGltZSB0aGlzIGlzIGNhbGxlZCwgdGhlIG5ldyB1c2VyIGhhcyBiZWVuIGFkZGVkIHRvXG5cdFx0Ly8gdGhlIHVzZXIgY29sbGVjdGlvbi5cblx0XHRzb2NrZXQub24oJ29ubGluZVVzZXJzJywgZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0Ly8gdGhpcyBkYXRhIGlzIGFuIGFycmF5IHdpdGggYWxsIHRoZSBvbmxpbmUgdXNlcidzIHVzZXJuYW1lcy5cblx0XHRcdHNlbGYudmVudC50cmlnZ2VyKFwidXNlcnNJbmZvXCIsIGRhdGEpO1xuXHRcdH0pO1xuXG5cdFx0c29ja2V0Lm9uKCd1c2VySm9pbmVkJywgZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0Ly8gZGF0YSA9PT0gdXNlcm5hbWUgb2YgdXNlciBqb2luZWRcblx0XHRcdGNvbnNvbGUubG9nKCd1c2VySm9pbmVkOiAnLCBkYXRhKTtcblx0XHRcdHNlbGYudmVudC50cmlnZ2VyKFwidXNlckpvaW5lZFwiLCBkYXRhKTtcblx0XHR9KTtcblx0XHRzb2NrZXQub24oJ3VzZXJMZWZ0JywgZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0Ly8gZGF0YSA9PT0gdXNlcm5hbWUgb2YgdXNlciByZW1vdmVkXG5cdFx0XHRjb25zb2xlLmxvZygndXNlckxlZnQ6ICcsIGRhdGEpO1xuXHRcdFx0c2VsZi52ZW50LnRyaWdnZXIoXCJ1c2VyTGVmdFwiLCBkYXRhKTtcblx0XHR9KTtcblx0XHRzb2NrZXQub24oJ2NoYXQnLCBmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHQvLyBkYXRhID09PSBjaGF0IG1lc3NhZ2Ugb2JqZWN0XG5cdFx0XHRjb25zb2xlLmxvZygnY2hhdDogJywgZGF0YSk7XG5cdFx0XHRzZWxmLnZlbnQudHJpZ2dlcihcImNoYXRSZWNlaXZlZFwiLCBkYXRhKTtcblx0XHR9KTtcblxuXG4gICAgLy8gdGhlc2UgZ3V5cyBsaXN0ZW4gdG8gdGhlIHNlcnZlciwgXG4gICAgLy8gdGhlbiBjYWxsIGNoYXRjbGllbnQgbWV0aG9kcyBsaXN0ZWQgYWJvdmVcbiAgICBzb2NrZXQub24oJ3R5cGluZycsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHNlbGYuYWRkQ2hhdFR5cGluZyhkYXRhKTtcbiAgICB9KTtcbiAgICBzb2NrZXQub24oJ3N0b3AgdHlwaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnJlbW92ZUNoYXRUeXBpbmcoKTtcbiAgICB9KTtcblxuXG5cblxuXG5cdH07XG59OyIsInZhciBhcHAgPSBhcHAgfHwge307XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgdmFyIExpYnJhcnlSb3V0ZXIgPSBCYWNrYm9uZS5Sb3V0ZXIuZXh0ZW5kKHtcbiAgICBcbiAgICByb3V0ZXM6IHtcbiAgICAgICcnOiAnc3RhcnQnLFxuICAgICAgJ2xvZyc6ICdsb2dpbjInLFxuICAgICAgJ3JlZyc6ICdyZWdpc3RlcicsXG4gICAgICAnXz1fJzogJ2xpYnJhcnknLFxuICAgICAgJypmaWx0ZXInOiAnbXVsdCcsXG4gICAgfSxcblxuICAgIGxvZ2luOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMubG9naW5WaWV3ID0gbmV3IGFwcC5Mb2dpblZpZXcoe21vZGVsOiBhcHAuTG9naW5Nb2RlbH0pO1xuICAgICAgdGhpcy5sb2dpblZpZXcucmVuZGVyKCk7XG4gICAgfSxcblxuICAgIC8vIGxpYnJhcnk6IGZ1bmN0aW9uKCkge1xuICAgIC8vICAgYXBwLmFwcFZpZXcgPSBuZXcgYXBwLkxpYnJhcnlWaWV3KCk7XG4gICAgLy8gICBhcHAuYXBwVmlldy5zdGFydCgpO1xuICAgIC8vICAgJChcIiNkYXRlQ29tcGxldGVkXCIpLmRhdGVwaWNrZXIoKTtcbiAgICAvLyAgICQoJy51cGRhdGUtZGF0ZUNvbXBsZXRlZCcpLmRhdGVwaWNrZXIoKTtcbiAgICAvLyB9LFxuXG4gICAgLy8gLy8gbXVsdDogZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAvLyAvLyAgIHRoaXMuc2V0RmlsdGVyKHBhcmFtKTtcbiAgICAvLyAvLyAgIGRlYnVnZ2VyO1xuICAgIC8vIC8vICAgdGhpcy5saWJyYXJ5KCk7XG4gICAgLy8gLy8gfSxcblxuICAgIC8vIHNldEZpbHRlcjogZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAvLyAgIC8vIGRlYnVnZ2VyO1xuXG4gICAgLy8gICBhcHAuQm9va0ZpbHRlciA9IHBhcmFtIHx8ICcnO1xuXG4gICAgLy8gICBhcHAuYm9va2xpc3QudHJpZ2dlcignZmlsdGVyJyk7XG5cbiAgICAvLyAgIC8vIHRoaXMubGlicmFyeSgpO1xuICAgIC8vIH0sXG5cbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBhcHAubWFpbkNvbnRyb2xsZXIgPSBuZXcgYXBwLk1haW5Db250cm9sbGVyKCk7XG4gICAgICBhcHAubWFpbkNvbnRyb2xsZXIuaW5pdCgpO1xuICAgIH0sXG5cbiAgLy8gICByZWdpc3RlcjogZnVuY3Rpb24oKSB7XG4gIC8vICAgICBhcHAuYXBwVmlldyA9IG5ldyBhcHAuUmVnaXN0ZXJWaWV3KCk7XG4gIC8vICAgfVxuICB9KTtcblxuICBhcHAuTGlicmFyeVJvdXRlciA9IG5ldyBMaWJyYXJ5Um91dGVyKCk7XG4gIEJhY2tib25lLmhpc3Rvcnkuc3RhcnQoKTtcblxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=