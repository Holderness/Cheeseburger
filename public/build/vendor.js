if(function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e=t.length,n=rt.type(t);return"function"===n||rt.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function i(t,e,n){if(rt.isFunction(e))return rt.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return rt.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(ft.test(e))return rt.filter(e,t,n);e=rt.filter(e,t)}return rt.grep(t,function(t){return rt.inArray(t,e)>=0!==n})}function r(t,e){do t=t[e];while(t&&1!==t.nodeType);return t}function o(t){var e=wt[t]={};return rt.each(t.match(bt)||[],function(t,n){e[n]=!0}),e}function s(){pt.addEventListener?(pt.removeEventListener("DOMContentLoaded",a,!1),t.removeEventListener("load",a,!1)):(pt.detachEvent("onreadystatechange",a),t.detachEvent("onload",a))}function a(){(pt.addEventListener||"load"===event.type||"complete"===pt.readyState)&&(s(),rt.ready())}function l(t,e,n){if(void 0===n&&1===t.nodeType){var i="data-"+e.replace(kt,"-$1").toLowerCase();if(n=t.getAttribute(i),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:Ct.test(n)?rt.parseJSON(n):n}catch(r){}rt.data(t,e,n)}else n=void 0}return n}function u(t){var e;for(e in t)if(("data"!==e||!rt.isEmptyObject(t[e]))&&"toJSON"!==e)return!1;return!0}function c(t,e,n,i){if(rt.acceptData(t)){var r,o,s=rt.expando,a=t.nodeType,l=a?rt.cache:t,u=a?t[s]:t[s]&&s;if(u&&l[u]&&(i||l[u].data)||void 0!==n||"string"!=typeof e)return u||(u=a?t[s]=V.pop()||rt.guid++:s),l[u]||(l[u]=a?{}:{toJSON:rt.noop}),("object"==typeof e||"function"==typeof e)&&(i?l[u]=rt.extend(l[u],e):l[u].data=rt.extend(l[u].data,e)),o=l[u],i||(o.data||(o.data={}),o=o.data),void 0!==n&&(o[rt.camelCase(e)]=n),"string"==typeof e?(r=o[e],null==r&&(r=o[rt.camelCase(e)])):r=o,r}}function d(t,e,n){if(rt.acceptData(t)){var i,r,o=t.nodeType,s=o?rt.cache:t,a=o?t[rt.expando]:rt.expando;if(s[a]){if(e&&(i=n?s[a]:s[a].data)){rt.isArray(e)?e=e.concat(rt.map(e,rt.camelCase)):e in i?e=[e]:(e=rt.camelCase(e),e=e in i?[e]:e.split(" ")),r=e.length;for(;r--;)delete i[e[r]];if(n?!u(i):!rt.isEmptyObject(i))return}(n||(delete s[a].data,u(s[a])))&&(o?rt.cleanData([t],!0):nt.deleteExpando||s!=s.window?delete s[a]:s[a]=null)}}}function f(){return!0}function h(){return!1}function p(){try{return pt.activeElement}catch(t){}}function m(t){var e=It.split("|"),n=t.createDocumentFragment();if(n.createElement)for(;e.length;)n.createElement(e.pop());return n}function g(t,e){var n,i,r=0,o=typeof t.getElementsByTagName!==Tt?t.getElementsByTagName(e||"*"):typeof t.querySelectorAll!==Tt?t.querySelectorAll(e||"*"):void 0;if(!o)for(o=[],n=t.childNodes||t;null!=(i=n[r]);r++)!e||rt.nodeName(i,e)?o.push(i):rt.merge(o,g(i,e));return void 0===e||e&&rt.nodeName(t,e)?rt.merge([t],o):o}function v(t){At.test(t.type)&&(t.defaultChecked=t.checked)}function y(t,e){return rt.nodeName(t,"table")&&rt.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function b(t){return t.type=(null!==rt.find.attr(t,"type"))+"/"+t.type,t}function w(t){var e=Gt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function x(t,e){for(var n,i=0;null!=(n=t[i]);i++)rt._data(n,"globalEval",!e||rt._data(e[i],"globalEval"))}function _(t,e){if(1===e.nodeType&&rt.hasData(t)){var n,i,r,o=rt._data(t),s=rt._data(e,o),a=o.events;if(a){delete s.handle,s.events={};for(n in a)for(i=0,r=a[n].length;r>i;i++)rt.event.add(e,n,a[n][i])}s.data&&(s.data=rt.extend({},s.data))}}function T(t,e){var n,i,r;if(1===e.nodeType){if(n=e.nodeName.toLowerCase(),!nt.noCloneEvent&&e[rt.expando]){r=rt._data(e);for(i in r.events)rt.removeEvent(e,i,r.handle);e.removeAttribute(rt.expando)}"script"===n&&e.text!==t.text?(b(e).text=t.text,w(e)):"object"===n?(e.parentNode&&(e.outerHTML=t.outerHTML),nt.html5Clone&&t.innerHTML&&!rt.trim(e.innerHTML)&&(e.innerHTML=t.innerHTML)):"input"===n&&At.test(t.type)?(e.defaultChecked=e.checked=t.checked,e.value!==t.value&&(e.value=t.value)):"option"===n?e.defaultSelected=e.selected=t.defaultSelected:("input"===n||"textarea"===n)&&(e.defaultValue=t.defaultValue)}}function C(e,n){var i,r=rt(n.createElement(e)).appendTo(n.body),o=t.getDefaultComputedStyle&&(i=t.getDefaultComputedStyle(r[0]))?i.display:rt.css(r[0],"display");return r.detach(),o}function k(t){var e=pt,n=Kt[t];return n||(n=C(t,e),"none"!==n&&n||(Zt=(Zt||rt("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=(Zt[0].contentWindow||Zt[0].contentDocument).document,e.write(),e.close(),n=C(t,e),Zt.detach()),Kt[t]=n),n}function S(t,e){return{get:function(){var n=t();if(null!=n)return n?void delete this.get:(this.get=e).apply(this,arguments)}}}function E(t,e){if(e in t)return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),i=e,r=fe.length;r--;)if(e=fe[r]+n,e in t)return e;return i}function D(t,e){for(var n,i,r,o=[],s=0,a=t.length;a>s;s++)i=t[s],i.style&&(o[s]=rt._data(i,"olddisplay"),n=i.style.display,e?(o[s]||"none"!==n||(i.style.display=""),""===i.style.display&&Dt(i)&&(o[s]=rt._data(i,"olddisplay",k(i.nodeName)))):(r=Dt(i),(n&&"none"!==n||!r)&&rt._data(i,"olddisplay",r?n:rt.css(i,"display"))));for(s=0;a>s;s++)i=t[s],i.style&&(e&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=e?o[s]||"":"none"));return t}function N(t,e,n){var i=le.exec(e);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):e}function A(t,e,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=rt.css(t,n+Et[o],!0,r)),i?("content"===n&&(s-=rt.css(t,"padding"+Et[o],!0,r)),"margin"!==n&&(s-=rt.css(t,"border"+Et[o]+"Width",!0,r))):(s+=rt.css(t,"padding"+Et[o],!0,r),"padding"!==n&&(s+=rt.css(t,"border"+Et[o]+"Width",!0,r)));return s}function M(t,e,n){var i=!0,r="width"===e?t.offsetWidth:t.offsetHeight,o=te(t),s=nt.boxSizing&&"border-box"===rt.css(t,"boxSizing",!1,o);if(0>=r||null==r){if(r=ee(t,e,o),(0>r||null==r)&&(r=t.style[e]),ie.test(r))return r;i=s&&(nt.boxSizingReliable()||r===t.style[e]),r=parseFloat(r)||0}return r+A(t,e,n||(s?"border":"content"),i,o)+"px"}function $(t,e,n,i,r){return new $.prototype.init(t,e,n,i,r)}function O(){return setTimeout(function(){he=void 0}),he=rt.now()}function j(t,e){var n,i={height:t},r=0;for(e=e?1:0;4>r;r+=2-e)n=Et[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function L(t,e,n){for(var i,r=(be[e]||[]).concat(be["*"]),o=0,s=r.length;s>o;o++)if(i=r[o].call(n,e,t))return i}function I(t,e,n){var i,r,o,s,a,l,u,c,d=this,f={},h=t.style,p=t.nodeType&&Dt(t),m=rt._data(t,"fxshow");n.queue||(a=rt._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,rt.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],u=rt.css(t,"display"),c="none"===u?rt._data(t,"olddisplay")||k(t.nodeName):u,"inline"===c&&"none"===rt.css(t,"float")&&(nt.inlineBlockNeedsLayout&&"inline"!==k(t.nodeName)?h.zoom=1:h.display="inline-block")),n.overflow&&(h.overflow="hidden",nt.shrinkWrapBlocks()||d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(i in e)if(r=e[i],me.exec(r)){if(delete e[i],o=o||"toggle"===r,r===(p?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;p=!0}f[i]=m&&m[i]||rt.style(t,i)}else u=void 0;if(rt.isEmptyObject(f))"inline"===("none"===u?k(t.nodeName):u)&&(h.display=u);else{m?"hidden"in m&&(p=m.hidden):m=rt._data(t,"fxshow",{}),o&&(m.hidden=!p),p?rt(t).show():d.done(function(){rt(t).hide()}),d.done(function(){var e;rt._removeData(t,"fxshow");for(e in f)rt.style(t,e,f[e])});for(i in f)s=L(p?m[i]:0,i,d),i in m||(m[i]=s.start,p&&(s.end=s.start,s.start="width"===i||"height"===i?1:0))}}function H(t,e){var n,i,r,o,s;for(n in t)if(i=rt.camelCase(n),r=e[i],o=t[n],rt.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),s=rt.cssHooks[i],s&&"expand"in s){o=s.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}function F(t,e,n){var i,r,o=0,s=ye.length,a=rt.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=he||O(),n=Math.max(0,u.startTime+u.duration-e),i=n/u.duration||0,o=1-i,s=0,l=u.tweens.length;l>s;s++)u.tweens[s].run(o);return a.notifyWith(t,[u,o,n]),1>o&&l?n:(a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:rt.extend({},e),opts:rt.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:he||O(),duration:n.duration,tweens:[],createTween:function(e,n){var i=rt.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)u.tweens[n].run(1);return e?a.resolveWith(t,[u,e]):a.rejectWith(t,[u,e]),this}}),c=u.props;for(H(c,u.opts.specialEasing);s>o;o++)if(i=ye[o].call(u,t,c,u.opts))return i;return rt.map(c,L,u),rt.isFunction(u.opts.start)&&u.opts.start.call(t,u),rt.fx.timer(rt.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function P(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(bt)||[];if(rt.isFunction(n))for(;i=o[r++];)"+"===i.charAt(0)?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function q(t,e,n,i){function r(a){var l;return o[a]=!0,rt.each(t[a]||[],function(t,a){var u=a(e,n,i);return"string"!=typeof u||s||o[u]?s?!(l=u):void 0:(e.dataTypes.unshift(u),r(u),!1)}),l}var o={},s=t===We;return r(e.dataTypes[0])||!o["*"]&&r("*")}function Y(t,e){var n,i,r=rt.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((r[i]?t:n||(n={}))[i]=e[i]);return n&&rt.extend(!0,t,n),t}function R(t,e,n){for(var i,r,o,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(s in a)if(a[s]&&a[s].test(r)){l.unshift(s);break}if(l[0]in n)o=l[0];else{for(s in n){if(!l[0]||t.converters[s+" "+l[0]]){o=s;break}i||(i=s)}o=o||i}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function W(t,e,n,i){var r,o,s,a,l,u={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)u[s.toLowerCase()]=t.converters[s];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(s=u[l+" "+o]||u["* "+o],!s)for(r in u)if(a=r.split(" "),a[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){s===!0?s=u[r]:u[r]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&t["throws"])e=s(e);else try{e=s(e)}catch(d){return{state:"parsererror",error:s?d:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}function B(t,e,n,i){var r;if(rt.isArray(e))rt.each(e,function(e,r){n||Ge.test(t)?i(t,r):B(t+"["+("object"==typeof r?e:"")+"]",r,n,i)});else if(n||"object"!==rt.type(e))i(t,e);else for(r in e)B(t+"["+r+"]",e[r],n,i)}function U(){try{return new t.XMLHttpRequest}catch(e){}}function z(){try{return new t.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function G(t){return rt.isWindow(t)?t:9===t.nodeType?t.defaultView||t.parentWindow:!1}var V=[],X=V.slice,Q=V.concat,J=V.push,Z=V.indexOf,K={},tt=K.toString,et=K.hasOwnProperty,nt={},it="1.11.1",rt=function(t,e){return new rt.fn.init(t,e)},ot=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,st=/^-ms-/,at=/-([\da-z])/gi,lt=function(t,e){return e.toUpperCase()};rt.fn=rt.prototype={jquery:it,constructor:rt,selector:"",length:0,toArray:function(){return X.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:X.call(this)},pushStack:function(t){var e=rt.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return rt.each(this,t,e)},map:function(t){return this.pushStack(rt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(X.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:J,sort:V.sort,splice:V.splice},rt.extend=rt.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||rt.isFunction(s)||(s={}),a===l&&(s=this,a--);l>a;a++)if(null!=(r=arguments[a]))for(i in r)t=s[i],n=r[i],s!==n&&(u&&n&&(rt.isPlainObject(n)||(e=rt.isArray(n)))?(e?(e=!1,o=t&&rt.isArray(t)?t:[]):o=t&&rt.isPlainObject(t)?t:{},s[i]=rt.extend(u,o,n)):void 0!==n&&(s[i]=n));return s},rt.extend({expando:"jQuery"+(it+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===rt.type(t)},isArray:Array.isArray||function(t){return"array"===rt.type(t)},isWindow:function(t){return null!=t&&t==t.window},isNumeric:function(t){return!rt.isArray(t)&&t-parseFloat(t)>=0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},isPlainObject:function(t){var e;if(!t||"object"!==rt.type(t)||t.nodeType||rt.isWindow(t))return!1;try{if(t.constructor&&!et.call(t,"constructor")&&!et.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(n){return!1}if(nt.ownLast)for(e in t)return et.call(t,e);for(e in t);return void 0===e||et.call(t,e)},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?K[tt.call(t)]||"object":typeof t},globalEval:function(e){e&&rt.trim(e)&&(t.execScript||function(e){t.eval.call(t,e)})(e)},camelCase:function(t){return t.replace(st,"ms-").replace(at,lt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,i){var r,o=0,s=t.length,a=n(t);if(i){if(a)for(;s>o&&(r=e.apply(t[o],i),r!==!1);o++);else for(o in t)if(r=e.apply(t[o],i),r===!1)break}else if(a)for(;s>o&&(r=e.call(t[o],o,t[o]),r!==!1);o++);else for(o in t)if(r=e.call(t[o],o,t[o]),r===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(ot,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?rt.merge(i,"string"==typeof t?[t]:t):J.call(i,t)),i},inArray:function(t,e,n){var i;if(e){if(Z)return Z.call(e,t,n);for(i=e.length,n=n?0>n?Math.max(0,i+n):n:0;i>n;n++)if(n in e&&e[n]===t)return n}return-1},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;n>i;)t[r++]=e[i++];if(n!==n)for(;void 0!==e[i];)t[r++]=e[i++];return t.length=r,t},grep:function(t,e,n){for(var i,r=[],o=0,s=t.length,a=!n;s>o;o++)i=!e(t[o],o),i!==a&&r.push(t[o]);return r},map:function(t,e,i){var r,o=0,s=t.length,a=n(t),l=[];if(a)for(;s>o;o++)r=e(t[o],o,i),null!=r&&l.push(r);else for(o in t)r=e(t[o],o,i),null!=r&&l.push(r);return Q.apply([],l)},guid:1,proxy:function(t,e){var n,i,r;return"string"==typeof e&&(r=t[e],e=t,t=r),rt.isFunction(t)?(n=X.call(arguments,2),i=function(){return t.apply(e||this,n.concat(X.call(arguments)))},i.guid=t.guid=t.guid||rt.guid++,i):void 0},now:function(){return+new Date},support:nt}),rt.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){K["[object "+e+"]"]=e.toLowerCase()});var ut=function(t){function e(t,e,n,i){var r,o,s,a,l,u,d,h,p,m;if((e?e.ownerDocument||e:q)!==$&&M(e),e=e||$,n=n||[],!t||"string"!=typeof t)return n;if(1!==(a=e.nodeType)&&9!==a)return[];if(j&&!i){if(r=yt.exec(t))if(s=r[1]){if(9===a){if(o=e.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(e.ownerDocument&&(o=e.ownerDocument.getElementById(s))&&F(e,o)&&o.id===s)return n.push(o),n}else{if(r[2])return K.apply(n,e.getElementsByTagName(t)),n;if((s=r[3])&&x.getElementsByClassName&&e.getElementsByClassName)return K.apply(n,e.getElementsByClassName(s)),n}if(x.qsa&&(!L||!L.test(t))){if(h=d=P,p=e,m=9===a&&t,1===a&&"object"!==e.nodeName.toLowerCase()){for(u=k(t),(d=e.getAttribute("id"))?h=d.replace(wt,"\\$&"):e.setAttribute("id",h),h="[id='"+h+"'] ",l=u.length;l--;)u[l]=h+f(u[l]);p=bt.test(t)&&c(e.parentNode)||e,m=u.join(",")}if(m)try{return K.apply(n,p.querySelectorAll(m)),n}catch(g){}finally{d||e.removeAttribute("id")}}}return E(t.replace(lt,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>_.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[P]=!0,t}function r(t){var e=$.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=t.length;i--;)_.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||V)-(~t.sourceIndex||V);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function u(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function c(t){return t&&typeof t.getElementsByTagName!==G&&t}function d(){}function f(t){for(var e=0,n=t.length,i="";n>e;e++)i+=t[e].value;return i}function h(t,e,n){var i=e.dir,r=n&&"parentNode"===i,o=R++;return e.first?function(e,n,o){for(;e=e[i];)if(1===e.nodeType||r)return t(e,n,o)}:function(e,n,s){var a,l,u=[Y,o];if(s){for(;e=e[i];)if((1===e.nodeType||r)&&t(e,n,s))return!0}else for(;e=e[i];)if(1===e.nodeType||r){if(l=e[P]||(e[P]={}),(a=l[i])&&a[0]===Y&&a[1]===o)return u[2]=a[2];if(l[i]=u,u[2]=t(e,n,s))return!0}}}function p(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function m(t,n,i){for(var r=0,o=n.length;o>r;r++)e(t,n[r],i);return i}function g(t,e,n,i,r){for(var o,s=[],a=0,l=t.length,u=null!=e;l>a;a++)(o=t[a])&&(!n||n(o,i,r))&&(s.push(o),u&&e.push(a));return s}function v(t,e,n,r,o,s){return r&&!r[P]&&(r=v(r)),o&&!o[P]&&(o=v(o,s)),i(function(i,s,a,l){var u,c,d,f=[],h=[],p=s.length,v=i||m(e||"*",a.nodeType?[a]:a,[]),y=!t||!i&&e?v:g(v,f,t,a,l),b=n?o||(i?t:p||r)?[]:s:y;if(n&&n(y,b,a,l),r)for(u=g(b,h),r(u,[],a,l),c=u.length;c--;)(d=u[c])&&(b[h[c]]=!(y[h[c]]=d));if(i){if(o||t){if(o){for(u=[],c=b.length;c--;)(d=b[c])&&u.push(y[c]=d);o(null,b=[],u,l)}for(c=b.length;c--;)(d=b[c])&&(u=o?et.call(i,d):f[c])>-1&&(i[u]=!(s[u]=d))}}else b=g(b===s?b.splice(p,b.length):b),o?o(null,s,b,l):K.apply(s,b)})}function y(t){for(var e,n,i,r=t.length,o=_.relative[t[0].type],s=o||_.relative[" "],a=o?1:0,l=h(function(t){return t===e},s,!0),u=h(function(t){return et.call(e,t)>-1},s,!0),c=[function(t,n,i){return!o&&(i||n!==D)||((e=n).nodeType?l(t,n,i):u(t,n,i))}];r>a;a++)if(n=_.relative[t[a].type])c=[h(p(c),n)];else{if(n=_.filter[t[a].type].apply(null,t[a].matches),n[P]){for(i=++a;r>i&&!_.relative[t[i].type];i++);return v(a>1&&p(c),a>1&&f(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(lt,"$1"),n,i>a&&y(t.slice(a,i)),r>i&&y(t=t.slice(i)),r>i&&f(t))}c.push(n)}return p(c)}function b(t,n){var r=n.length>0,o=t.length>0,s=function(i,s,a,l,u){var c,d,f,h=0,p="0",m=i&&[],v=[],y=D,b=i||o&&_.find.TAG("*",u),w=Y+=null==y?1:Math.random()||.1,x=b.length;for(u&&(D=s!==$&&s);p!==x&&null!=(c=b[p]);p++){if(o&&c){for(d=0;f=t[d++];)if(f(c,s,a)){l.push(c);break}u&&(Y=w)}r&&((c=!f&&c)&&h--,i&&m.push(c))}if(h+=p,r&&p!==h){for(d=0;f=n[d++];)f(m,v,s,a);if(i){if(h>0)for(;p--;)m[p]||v[p]||(v[p]=J.call(l));v=g(v)}K.apply(l,v),u&&!i&&v.length>0&&h+n.length>1&&e.uniqueSort(l)}return u&&(Y=w,D=y),m};return r?i(s):s}var w,x,_,T,C,k,S,E,D,N,A,M,$,O,j,L,I,H,F,P="sizzle"+-new Date,q=t.document,Y=0,R=0,W=n(),B=n(),U=n(),z=function(t,e){return t===e&&(A=!0),0},G="undefined",V=1<<31,X={}.hasOwnProperty,Q=[],J=Q.pop,Z=Q.push,K=Q.push,tt=Q.slice,et=Q.indexOf||function(t){for(var e=0,n=this.length;n>e;e++)if(this[e]===t)return e;return-1},nt="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",it="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",ot=rt.replace("w","w#"),st="\\["+it+"*("+rt+")(?:"+it+"*([*^$|!~]?=)"+it+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ot+"))|)"+it+"*\\]",at=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+st+")*)|.*)\\)|)",lt=new RegExp("^"+it+"+|((?:^|[^\\\\])(?:\\\\.)*)"+it+"+$","g"),ut=new RegExp("^"+it+"*,"+it+"*"),ct=new RegExp("^"+it+"*([>+~]|"+it+")"+it+"*"),dt=new RegExp("="+it+"*([^\\]'\"]*?)"+it+"*\\]","g"),ft=new RegExp(at),ht=new RegExp("^"+ot+"$"),pt={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt.replace("w","w*")+")"),ATTR:new RegExp("^"+st),PSEUDO:new RegExp("^"+at),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+it+"*(even|odd|(([+-]|)(\\d*)n|)"+it+"*(?:([+-]|)"+it+"*(\\d+)|))"+it+"*\\)|)","i"),bool:new RegExp("^(?:"+nt+")$","i"),needsContext:new RegExp("^"+it+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+it+"*((?:-\\d)?\\d*)"+it+"*\\)|)(?=[^-]|$)","i")},mt=/^(?:input|select|textarea|button)$/i,gt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,bt=/[+~]/,wt=/'|\\/g,xt=new RegExp("\\\\([\\da-f]{1,6}"+it+"?|("+it+")|.)","ig"),_t=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)};try{K.apply(Q=tt.call(q.childNodes),q.childNodes),Q[q.childNodes.length].nodeType}catch(Tt){K={apply:Q.length?function(t,e){Z.apply(t,tt.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}x=e.support={},C=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},M=e.setDocument=function(t){var e,n=t?t.ownerDocument||t:q,i=n.defaultView;return n!==$&&9===n.nodeType&&n.documentElement?($=n,O=n.documentElement,j=!C(n),i&&i!==i.top&&(i.addEventListener?i.addEventListener("unload",function(){M()},!1):i.attachEvent&&i.attachEvent("onunload",function(){M()})),x.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),x.getElementsByTagName=r(function(t){return t.appendChild(n.createComment("")),!t.getElementsByTagName("*").length}),x.getElementsByClassName=vt.test(n.getElementsByClassName)&&r(function(t){return t.innerHTML="<div class='a'></div><div class='a i'></div>",t.firstChild.className="i",2===t.getElementsByClassName("i").length}),x.getById=r(function(t){return O.appendChild(t).id=P,!n.getElementsByName||!n.getElementsByName(P).length}),x.getById?(_.find.ID=function(t,e){if(typeof e.getElementById!==G&&j){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},_.filter.ID=function(t){var e=t.replace(xt,_t);return function(t){return t.getAttribute("id")===e}}):(delete _.find.ID,_.filter.ID=function(t){var e=t.replace(xt,_t);return function(t){var n=typeof t.getAttributeNode!==G&&t.getAttributeNode("id");return n&&n.value===e}}),_.find.TAG=x.getElementsByTagName?function(t,e){return typeof e.getElementsByTagName!==G?e.getElementsByTagName(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},_.find.CLASS=x.getElementsByClassName&&function(t,e){return typeof e.getElementsByClassName!==G&&j?e.getElementsByClassName(t):void 0},I=[],L=[],(x.qsa=vt.test(n.querySelectorAll))&&(r(function(t){t.innerHTML="<select msallowclip=''><option selected=''></option></select>",t.querySelectorAll("[msallowclip^='']").length&&L.push("[*^$]="+it+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||L.push("\\["+it+"*(?:value|"+nt+")"),t.querySelectorAll(":checked").length||L.push(":checked")}),r(function(t){var e=n.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&L.push("name"+it+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||L.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),L.push(",.*:")})),(x.matchesSelector=vt.test(H=O.matches||O.webkitMatchesSelector||O.mozMatchesSelector||O.oMatchesSelector||O.msMatchesSelector))&&r(function(t){x.disconnectedMatch=H.call(t,"div"),H.call(t,"[s!='']:x"),I.push("!=",at)}),L=L.length&&new RegExp(L.join("|")),I=I.length&&new RegExp(I.join("|")),e=vt.test(O.compareDocumentPosition),F=e||vt.test(O.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},z=e?function(t,e){if(t===e)return A=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!x.sortDetached&&e.compareDocumentPosition(t)===i?t===n||t.ownerDocument===q&&F(q,t)?-1:e===n||e.ownerDocument===q&&F(q,e)?1:N?et.call(N,t)-et.call(N,e):0:4&i?-1:1)}:function(t,e){if(t===e)return A=!0,0;var i,r=0,o=t.parentNode,a=e.parentNode,l=[t],u=[e];if(!o||!a)return t===n?-1:e===n?1:o?-1:a?1:N?et.call(N,t)-et.call(N,e):0;if(o===a)return s(t,e);for(i=t;i=i.parentNode;)l.unshift(i);for(i=e;i=i.parentNode;)u.unshift(i);for(;l[r]===u[r];)r++;return r?s(l[r],u[r]):l[r]===q?-1:u[r]===q?1:0},n):$},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==$&&M(t),n=n.replace(dt,"='$1']"),!(!x.matchesSelector||!j||I&&I.test(n)||L&&L.test(n)))try{var i=H.call(t,n);if(i||x.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(r){}return e(n,$,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==$&&M(t),F(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==$&&M(t);var n=_.attrHandle[e.toLowerCase()],i=n&&X.call(_.attrHandle,e.toLowerCase())?n(t,e,!j):void 0;return void 0!==i?i:x.attributes||!j?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(A=!x.detectDuplicates,N=!x.sortStable&&t.slice(0),t.sort(z),A){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return N=null,t},T=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=T(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=T(e);return n},_=e.selectors={cacheLength:50,createPseudo:i,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(xt,_t),t[3]=(t[3]||t[4]||t[5]||"").replace(xt,_t),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ft.test(n)&&(e=k(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(xt,_t).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+it+")"+t+"("+it+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||typeof t.getAttribute!==G&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:n?(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o+" ").indexOf(i)>-1:"|="===n?o===i||o.slice(0,i.length+1)===i+"-":!1):!0}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var u,c,d,f,h,p,m=o!==s?"nextSibling":"previousSibling",g=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a;if(g){if(o){for(;m;){for(d=e;d=d[m];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;p=m="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?g.firstChild:g.lastChild],s&&y){for(c=g[P]||(g[P]={}),u=c[t]||[],h=u[0]===Y&&u[1],f=u[0]===Y&&u[2],d=h&&g.childNodes[h];d=++h&&d&&d[m]||(f=h=0)||p.pop();)if(1===d.nodeType&&++f&&d===e){c[t]=[Y,h,f];break}}else if(y&&(u=(e[P]||(e[P]={}))[t])&&u[0]===Y)f=u[1];else for(;(d=++h&&d&&d[m]||(f=h=0)||p.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++f||(y&&((d[P]||(d[P]={}))[t]=[Y,f]),d!==e)););return f-=r,f===i||f%i===0&&f/i>=0}}},PSEUDO:function(t,n){var r,o=_.pseudos[t]||_.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[P]?o(n):o.length>1?(r=[t,t,"",n],_.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),s=r.length;s--;)i=et.call(t,r[s]),t[i]=!(e[i]=r[s])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=S(t.replace(lt,"$1"));return r[P]?i(function(t,e,n,i){for(var o,s=r(t,null,i,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return function(e){return(e.textContent||e.innerText||T(e)).indexOf(t)>-1}}),lang:i(function(t){return ht.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(xt,_t).toLowerCase(),function(e){var n;do if(n=j?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===O},focus:function(t){return t===$.activeElement&&(!$.hasFocus||$.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!_.pseudos.empty(t)},header:function(t){return gt.test(t.nodeName)},input:function(t){return mt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[0>n?n+e:n]}),even:u(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:u(function(t,e,n){for(var i=0>n?n+e:n;--i>=0;)t.push(i);return t}),gt:u(function(t,e,n){for(var i=0>n?n+e:n;++i<e;)t.push(i);return t})}},_.pseudos.nth=_.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})_.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})_.pseudos[w]=l(w);return d.prototype=_.filters=_.pseudos,_.setFilters=new d,k=e.tokenize=function(t,n){var i,r,o,s,a,l,u,c=B[t+" "];if(c)return n?0:c.slice(0);for(a=t,l=[],u=_.preFilter;a;){(!i||(r=ut.exec(a)))&&(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=ct.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(lt," ")}),a=a.slice(i.length));for(s in _.filter)!(r=pt[s].exec(a))||u[s]&&!(r=u[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r
}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):B(t,l).slice(0)},S=e.compile=function(t,e){var n,i=[],r=[],o=U[t+" "];if(!o){for(e||(e=k(t)),n=e.length;n--;)o=y(e[n]),o[P]?i.push(o):r.push(o);o=U(t,b(r,i)),o.selector=t}return o},E=e.select=function(t,e,n,i){var r,o,s,a,l,u="function"==typeof t&&t,d=!i&&k(t=u.selector||t);if(n=n||[],1===d.length){if(o=d[0]=d[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&x.getById&&9===e.nodeType&&j&&_.relative[o[1].type]){if(e=(_.find.ID(s.matches[0].replace(xt,_t),e)||[])[0],!e)return n;u&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=pt.needsContext.test(t)?0:o.length;r--&&(s=o[r],!_.relative[a=s.type]);)if((l=_.find[a])&&(i=l(s.matches[0].replace(xt,_t),bt.test(o[0].type)&&c(e.parentNode)||e))){if(o.splice(r,1),t=i.length&&f(o),!t)return K.apply(n,i),n;break}}return(u||S(t,d))(i,e,!j,n,bt.test(t)&&c(e.parentNode)||e),n},x.sortStable=P.split("").sort(z).join("")===P,x.detectDuplicates=!!A,M(),x.sortDetached=r(function(t){return 1&t.compareDocumentPosition($.createElement("div"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),x.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(nt,function(t,e,n){var i;return n?void 0:t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);rt.find=ut,rt.expr=ut.selectors,rt.expr[":"]=rt.expr.pseudos,rt.unique=ut.uniqueSort,rt.text=ut.getText,rt.isXMLDoc=ut.isXML,rt.contains=ut.contains;var ct=rt.expr.match.needsContext,dt=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,ft=/^.[^:#\[\.,]*$/;rt.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?rt.find.matchesSelector(i,t)?[i]:[]:rt.find.matches(t,rt.grep(e,function(t){return 1===t.nodeType}))},rt.fn.extend({find:function(t){var e,n=[],i=this,r=i.length;if("string"!=typeof t)return this.pushStack(rt(t).filter(function(){for(e=0;r>e;e++)if(rt.contains(i[e],this))return!0}));for(e=0;r>e;e++)rt.find(t,i[e],n);return n=this.pushStack(r>1?rt.unique(n):n),n.selector=this.selector?this.selector+" "+t:t,n},filter:function(t){return this.pushStack(i(this,t||[],!1))},not:function(t){return this.pushStack(i(this,t||[],!0))},is:function(t){return!!i(this,"string"==typeof t&&ct.test(t)?rt(t):t||[],!1).length}});var ht,pt=t.document,mt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,gt=rt.fn.init=function(t,e){var n,i;if(!t)return this;if("string"==typeof t){if(n="<"===t.charAt(0)&&">"===t.charAt(t.length-1)&&t.length>=3?[null,t,null]:mt.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||ht).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof rt?e[0]:e,rt.merge(this,rt.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:pt,!0)),dt.test(n[1])&&rt.isPlainObject(e))for(n in e)rt.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}if(i=pt.getElementById(n[2]),i&&i.parentNode){if(i.id!==n[2])return ht.find(t);this.length=1,this[0]=i}return this.context=pt,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):rt.isFunction(t)?"undefined"!=typeof ht.ready?ht.ready(t):t(rt):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),rt.makeArray(t,this))};gt.prototype=rt.fn,ht=rt(pt);var vt=/^(?:parents|prev(?:Until|All))/,yt={children:!0,contents:!0,next:!0,prev:!0};rt.extend({dir:function(t,e,n){for(var i=[],r=t[e];r&&9!==r.nodeType&&(void 0===n||1!==r.nodeType||!rt(r).is(n));)1===r.nodeType&&i.push(r),r=r[e];return i},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}}),rt.fn.extend({has:function(t){var e,n=rt(t,this),i=n.length;return this.filter(function(){for(e=0;i>e;e++)if(rt.contains(this,n[e]))return!0})},closest:function(t,e){for(var n,i=0,r=this.length,o=[],s=ct.test(t)||"string"!=typeof t?rt(t,e||this.context):0;r>i;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&rt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?rt.unique(o):o)},index:function(t){return t?"string"==typeof t?rt.inArray(this[0],rt(t)):rt.inArray(t.jquery?t[0]:t,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(rt.unique(rt.merge(this.get(),rt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),rt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return rt.dir(t,"parentNode")},parentsUntil:function(t,e,n){return rt.dir(t,"parentNode",n)},next:function(t){return r(t,"nextSibling")},prev:function(t){return r(t,"previousSibling")},nextAll:function(t){return rt.dir(t,"nextSibling")},prevAll:function(t){return rt.dir(t,"previousSibling")},nextUntil:function(t,e,n){return rt.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return rt.dir(t,"previousSibling",n)},siblings:function(t){return rt.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return rt.sibling(t.firstChild)},contents:function(t){return rt.nodeName(t,"iframe")?t.contentDocument||t.contentWindow.document:rt.merge([],t.childNodes)}},function(t,e){rt.fn[t]=function(n,i){var r=rt.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=rt.filter(i,r)),this.length>1&&(yt[t]||(r=rt.unique(r)),vt.test(t)&&(r=r.reverse())),this.pushStack(r)}});var bt=/\S+/g,wt={};rt.Callbacks=function(t){t="string"==typeof t?wt[t]||o(t):rt.extend({},t);var e,n,i,r,s,a,l=[],u=!t.once&&[],c=function(o){for(n=t.memory&&o,i=!0,s=a||0,a=0,r=l.length,e=!0;l&&r>s;s++)if(l[s].apply(o[0],o[1])===!1&&t.stopOnFalse){n=!1;break}e=!1,l&&(u?u.length&&c(u.shift()):n?l=[]:d.disable())},d={add:function(){if(l){var i=l.length;!function o(e){rt.each(e,function(e,n){var i=rt.type(n);"function"===i?t.unique&&d.has(n)||l.push(n):n&&n.length&&"string"!==i&&o(n)})}(arguments),e?r=l.length:n&&(a=i,c(n))}return this},remove:function(){return l&&rt.each(arguments,function(t,n){for(var i;(i=rt.inArray(n,l,i))>-1;)l.splice(i,1),e&&(r>=i&&r--,s>=i&&s--)}),this},has:function(t){return t?rt.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],r=0,this},disable:function(){return l=u=n=void 0,this},disabled:function(){return!l},lock:function(){return u=void 0,n||d.disable(),this},locked:function(){return!u},fireWith:function(t,n){return!l||i&&!u||(n=n||[],n=[t,n.slice?n.slice():n],e?u.push(n):c(n)),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!i}};return d},rt.extend({Deferred:function(t){var e=[["resolve","done",rt.Callbacks("once memory"),"resolved"],["reject","fail",rt.Callbacks("once memory"),"rejected"],["notify","progress",rt.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var t=arguments;return rt.Deferred(function(n){rt.each(e,function(e,o){var s=rt.isFunction(t[e])&&t[e];r[o[1]](function(){var t=s&&s.apply(this,arguments);t&&rt.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===i?n.promise():this,s?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?rt.extend(t,i):i}},r={};return i.pipe=i.then,rt.each(e,function(t,o){var s=o[2],a=o[3];i[o[1]]=s.add,a&&s.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),r[o[0]]=function(){return r[o[0]+"With"](this===r?i:this,arguments),this},r[o[0]+"With"]=s.fireWith}),i.promise(r),t&&t.call(r,r),r},when:function(t){var e,n,i,r=0,o=X.call(arguments),s=o.length,a=1!==s||t&&rt.isFunction(t.promise)?s:0,l=1===a?t:rt.Deferred(),u=function(t,n,i){return function(r){n[t]=this,i[t]=arguments.length>1?X.call(arguments):r,i===e?l.notifyWith(n,i):--a||l.resolveWith(n,i)}};if(s>1)for(e=new Array(s),n=new Array(s),i=new Array(s);s>r;r++)o[r]&&rt.isFunction(o[r].promise)?o[r].promise().done(u(r,i,o)).fail(l.reject).progress(u(r,n,e)):--a;return a||l.resolveWith(i,o),l.promise()}});var xt;rt.fn.ready=function(t){return rt.ready.promise().done(t),this},rt.extend({isReady:!1,readyWait:1,holdReady:function(t){t?rt.readyWait++:rt.ready(!0)},ready:function(t){if(t===!0?!--rt.readyWait:!rt.isReady){if(!pt.body)return setTimeout(rt.ready);rt.isReady=!0,t!==!0&&--rt.readyWait>0||(xt.resolveWith(pt,[rt]),rt.fn.triggerHandler&&(rt(pt).triggerHandler("ready"),rt(pt).off("ready")))}}}),rt.ready.promise=function(e){if(!xt)if(xt=rt.Deferred(),"complete"===pt.readyState)setTimeout(rt.ready);else if(pt.addEventListener)pt.addEventListener("DOMContentLoaded",a,!1),t.addEventListener("load",a,!1);else{pt.attachEvent("onreadystatechange",a),t.attachEvent("onload",a);var n=!1;try{n=null==t.frameElement&&pt.documentElement}catch(i){}n&&n.doScroll&&!function r(){if(!rt.isReady){try{n.doScroll("left")}catch(t){return setTimeout(r,50)}s(),rt.ready()}}()}return xt.promise(e)};var _t,Tt="undefined";for(_t in rt(nt))break;nt.ownLast="0"!==_t,nt.inlineBlockNeedsLayout=!1,rt(function(){var t,e,n,i;n=pt.getElementsByTagName("body")[0],n&&n.style&&(e=pt.createElement("div"),i=pt.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(e),typeof e.style.zoom!==Tt&&(e.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",nt.inlineBlockNeedsLayout=t=3===e.offsetWidth,t&&(n.style.zoom=1)),n.removeChild(i))}),function(){var t=pt.createElement("div");if(null==nt.deleteExpando){nt.deleteExpando=!0;try{delete t.test}catch(e){nt.deleteExpando=!1}}t=null}(),rt.acceptData=function(t){var e=rt.noData[(t.nodeName+" ").toLowerCase()],n=+t.nodeType||1;return 1!==n&&9!==n?!1:!e||e!==!0&&t.getAttribute("classid")===e};var Ct=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,kt=/([A-Z])/g;rt.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(t){return t=t.nodeType?rt.cache[t[rt.expando]]:t[rt.expando],!!t&&!u(t)},data:function(t,e,n){return c(t,e,n)},removeData:function(t,e){return d(t,e)},_data:function(t,e,n){return c(t,e,n,!0)},_removeData:function(t,e){return d(t,e,!0)}}),rt.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=rt.data(o),1===o.nodeType&&!rt._data(o,"parsedAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=rt.camelCase(i.slice(5)),l(o,i,r[i])));rt._data(o,"parsedAttrs",!0)}return r}return"object"==typeof t?this.each(function(){rt.data(this,t)}):arguments.length>1?this.each(function(){rt.data(this,t,e)}):o?l(o,t,rt.data(o,t)):void 0},removeData:function(t){return this.each(function(){rt.removeData(this,t)})}}),rt.extend({queue:function(t,e,n){var i;return t?(e=(e||"fx")+"queue",i=rt._data(t,e),n&&(!i||rt.isArray(n)?i=rt._data(t,e,rt.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=rt.queue(t,e),i=n.length,r=n.shift(),o=rt._queueHooks(t,e),s=function(){rt.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return rt._data(t,n)||rt._data(t,n,{empty:rt.Callbacks("once memory").add(function(){rt._removeData(t,e+"queue"),rt._removeData(t,n)})})}}),rt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?rt.queue(this[0],t):void 0===e?this:this.each(function(){var n=rt.queue(this,t,e);rt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&rt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){rt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=rt.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)n=rt._data(o[s],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var St=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Et=["Top","Right","Bottom","Left"],Dt=function(t,e){return t=e||t,"none"===rt.css(t,"display")||!rt.contains(t.ownerDocument,t)},Nt=rt.access=function(t,e,n,i,r,o,s){var a=0,l=t.length,u=null==n;if("object"===rt.type(n)){r=!0;for(a in n)rt.access(t,e,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,rt.isFunction(i)||(s=!0),u&&(s?(e.call(t,i),e=null):(u=e,e=function(t,e,n){return u.call(rt(t),n)})),e))for(;l>a;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:u?e.call(t):l?e(t[0],n):o},At=/^(?:checkbox|radio)$/i;!function(){var t=pt.createElement("input"),e=pt.createElement("div"),n=pt.createDocumentFragment();if(e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",nt.leadingWhitespace=3===e.firstChild.nodeType,nt.tbody=!e.getElementsByTagName("tbody").length,nt.htmlSerialize=!!e.getElementsByTagName("link").length,nt.html5Clone="<:nav></:nav>"!==pt.createElement("nav").cloneNode(!0).outerHTML,t.type="checkbox",t.checked=!0,n.appendChild(t),nt.appendChecked=t.checked,e.innerHTML="<textarea>x</textarea>",nt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue,n.appendChild(e),e.innerHTML="<input type='radio' checked='checked' name='t'/>",nt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,nt.noCloneEvent=!0,e.attachEvent&&(e.attachEvent("onclick",function(){nt.noCloneEvent=!1}),e.cloneNode(!0).click()),null==nt.deleteExpando){nt.deleteExpando=!0;try{delete e.test}catch(i){nt.deleteExpando=!1}}}(),function(){var e,n,i=pt.createElement("div");for(e in{submit:!0,change:!0,focusin:!0})n="on"+e,(nt[e+"Bubbles"]=n in t)||(i.setAttribute(n,"t"),nt[e+"Bubbles"]=i.attributes[n].expando===!1);i=null}();var Mt=/^(?:input|select|textarea)$/i,$t=/^key/,Ot=/^(?:mouse|pointer|contextmenu)|click/,jt=/^(?:focusinfocus|focusoutblur)$/,Lt=/^([^.]*)(?:\.(.+)|)$/;rt.event={global:{},add:function(t,e,n,i,r){var o,s,a,l,u,c,d,f,h,p,m,g=rt._data(t);if(g){for(n.handler&&(l=n,n=l.handler,r=l.selector),n.guid||(n.guid=rt.guid++),(s=g.events)||(s=g.events={}),(c=g.handle)||(c=g.handle=function(t){return typeof rt===Tt||t&&rt.event.triggered===t.type?void 0:rt.event.dispatch.apply(c.elem,arguments)},c.elem=t),e=(e||"").match(bt)||[""],a=e.length;a--;)o=Lt.exec(e[a])||[],h=m=o[1],p=(o[2]||"").split(".").sort(),h&&(u=rt.event.special[h]||{},h=(r?u.delegateType:u.bindType)||h,u=rt.event.special[h]||{},d=rt.extend({type:h,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&rt.expr.match.needsContext.test(r),namespace:p.join(".")},l),(f=s[h])||(f=s[h]=[],f.delegateCount=0,u.setup&&u.setup.call(t,i,p,c)!==!1||(t.addEventListener?t.addEventListener(h,c,!1):t.attachEvent&&t.attachEvent("on"+h,c))),u.add&&(u.add.call(t,d),d.handler.guid||(d.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,d):f.push(d),rt.event.global[h]=!0);t=null}},remove:function(t,e,n,i,r){var o,s,a,l,u,c,d,f,h,p,m,g=rt.hasData(t)&&rt._data(t);if(g&&(c=g.events)){for(e=(e||"").match(bt)||[""],u=e.length;u--;)if(a=Lt.exec(e[u])||[],h=m=a[1],p=(a[2]||"").split(".").sort(),h){for(d=rt.event.special[h]||{},h=(i?d.delegateType:d.bindType)||h,f=c[h]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=o=f.length;o--;)s=f[o],!r&&m!==s.origType||n&&n.guid!==s.guid||a&&!a.test(s.namespace)||i&&i!==s.selector&&("**"!==i||!s.selector)||(f.splice(o,1),s.selector&&f.delegateCount--,d.remove&&d.remove.call(t,s));l&&!f.length&&(d.teardown&&d.teardown.call(t,p,g.handle)!==!1||rt.removeEvent(t,h,g.handle),delete c[h])}else for(h in c)rt.event.remove(t,h+e[u],n,i,!0);rt.isEmptyObject(c)&&(delete g.handle,rt._removeData(t,"events"))}},trigger:function(e,n,i,r){var o,s,a,l,u,c,d,f=[i||pt],h=et.call(e,"type")?e.type:e,p=et.call(e,"namespace")?e.namespace.split("."):[];if(a=c=i=i||pt,3!==i.nodeType&&8!==i.nodeType&&!jt.test(h+rt.event.triggered)&&(h.indexOf(".")>=0&&(p=h.split("."),h=p.shift(),p.sort()),s=h.indexOf(":")<0&&"on"+h,e=e[rt.expando]?e:new rt.Event(h,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=p.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:rt.makeArray(n,[e]),u=rt.event.special[h]||{},r||!u.trigger||u.trigger.apply(i,n)!==!1)){if(!r&&!u.noBubble&&!rt.isWindow(i)){for(l=u.delegateType||h,jt.test(l+h)||(a=a.parentNode);a;a=a.parentNode)f.push(a),c=a;c===(i.ownerDocument||pt)&&f.push(c.defaultView||c.parentWindow||t)}for(d=0;(a=f[d++])&&!e.isPropagationStopped();)e.type=d>1?l:u.bindType||h,o=(rt._data(a,"events")||{})[e.type]&&rt._data(a,"handle"),o&&o.apply(a,n),o=s&&a[s],o&&o.apply&&rt.acceptData(a)&&(e.result=o.apply(a,n),e.result===!1&&e.preventDefault());if(e.type=h,!r&&!e.isDefaultPrevented()&&(!u._default||u._default.apply(f.pop(),n)===!1)&&rt.acceptData(i)&&s&&i[h]&&!rt.isWindow(i)){c=i[s],c&&(i[s]=null),rt.event.triggered=h;try{i[h]()}catch(m){}rt.event.triggered=void 0,c&&(i[s]=c)}return e.result}},dispatch:function(t){t=rt.event.fix(t);var e,n,i,r,o,s=[],a=X.call(arguments),l=(rt._data(this,"events")||{})[t.type]||[],u=rt.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,t)!==!1){for(s=rt.event.handlers.call(this,t,l),e=0;(r=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=r.elem,o=0;(i=r.handlers[o++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(i.namespace))&&(t.handleObj=i,t.data=i.data,n=((rt.event.special[i.origType]||{}).handle||i.handler).apply(r.elem,a),void 0!==n&&(t.result=n)===!1&&(t.preventDefault(),t.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,i,r,o,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==t.type)){for(r=[],o=0;a>o;o++)i=e[o],n=i.selector+" ",void 0===r[n]&&(r[n]=i.needsContext?rt(n,this).index(l)>=0:rt.find(n,this,null,[l]).length),r[n]&&r.push(i);r.length&&s.push({elem:l,handlers:r})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},fix:function(t){if(t[rt.expando])return t;var e,n,i,r=t.type,o=t,s=this.fixHooks[r];for(s||(this.fixHooks[r]=s=Ot.test(r)?this.mouseHooks:$t.test(r)?this.keyHooks:{}),i=s.props?this.props.concat(s.props):this.props,t=new rt.Event(o),e=i.length;e--;)n=i[e],t[n]=o[n];return t.target||(t.target=o.srcElement||pt),3===t.target.nodeType&&(t.target=t.target.parentNode),t.metaKey=!!t.metaKey,s.filter?s.filter(t,o):t},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,i,r,o=e.button,s=e.fromElement;return null==t.pageX&&null!=e.clientX&&(i=t.target.ownerDocument||pt,r=i.documentElement,n=i.body,t.pageX=e.clientX+(r&&r.scrollLeft||n&&n.scrollLeft||0)-(r&&r.clientLeft||n&&n.clientLeft||0),t.pageY=e.clientY+(r&&r.scrollTop||n&&n.scrollTop||0)-(r&&r.clientTop||n&&n.clientTop||0)),!t.relatedTarget&&s&&(t.relatedTarget=s===t.target?e.toElement:s),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==p()&&this.focus)try{return this.focus(),!1}catch(t){}},delegateType:"focusin"},blur:{trigger:function(){return this===p()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return rt.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(t){return rt.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,i){var r=rt.extend(new rt.Event,n,{type:t,isSimulated:!0,originalEvent:{}});i?rt.event.trigger(r,null,e):rt.event.dispatch.call(e,r),r.isDefaultPrevented()&&n.preventDefault()}},rt.removeEvent=pt.removeEventListener?function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)}:function(t,e,n){var i="on"+e;t.detachEvent&&(typeof t[i]===Tt&&(t[i]=null),t.detachEvent(i,n))},rt.Event=function(t,e){return this instanceof rt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?f:h):this.type=t,e&&rt.extend(this,e),this.timeStamp=t&&t.timeStamp||rt.now(),void(this[rt.expando]=!0)):new rt.Event(t,e)},rt.Event.prototype={isDefaultPrevented:h,isPropagationStopped:h,isImmediatePropagationStopped:h,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=f,t&&(t.preventDefault?t.preventDefault():t.returnValue=!1)},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=f,t&&(t.stopPropagation&&t.stopPropagation(),t.cancelBubble=!0)},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=f,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},rt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){rt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return(!r||r!==i&&!rt.contains(i,r))&&(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),nt.submitBubbles||(rt.event.special.submit={setup:function(){return rt.nodeName(this,"form")?!1:void rt.event.add(this,"click._submit keypress._submit",function(t){var e=t.target,n=rt.nodeName(e,"input")||rt.nodeName(e,"button")?e.form:void 0;n&&!rt._data(n,"submitBubbles")&&(rt.event.add(n,"submit._submit",function(t){t._submit_bubble=!0}),rt._data(n,"submitBubbles",!0))})},postDispatch:function(t){t._submit_bubble&&(delete t._submit_bubble,this.parentNode&&!t.isTrigger&&rt.event.simulate("submit",this.parentNode,t,!0))},teardown:function(){return rt.nodeName(this,"form")?!1:void rt.event.remove(this,"._submit")}}),nt.changeBubbles||(rt.event.special.change={setup:function(){return Mt.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(rt.event.add(this,"propertychange._change",function(t){"checked"===t.originalEvent.propertyName&&(this._just_changed=!0)}),rt.event.add(this,"click._change",function(t){this._just_changed&&!t.isTrigger&&(this._just_changed=!1),rt.event.simulate("change",this,t,!0)})),!1):void rt.event.add(this,"beforeactivate._change",function(t){var e=t.target;Mt.test(e.nodeName)&&!rt._data(e,"changeBubbles")&&(rt.event.add(e,"change._change",function(t){!this.parentNode||t.isSimulated||t.isTrigger||rt.event.simulate("change",this.parentNode,t,!0)}),rt._data(e,"changeBubbles",!0))})},handle:function(t){var e=t.target;return this!==e||t.isSimulated||t.isTrigger||"radio"!==e.type&&"checkbox"!==e.type?t.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return rt.event.remove(this,"._change"),!Mt.test(this.nodeName)}}),nt.focusinBubbles||rt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){rt.event.simulate(e,t.target,rt.event.fix(t),!0)};rt.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=rt._data(i,e);r||i.addEventListener(t,n,!0),rt._data(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=rt._data(i,e)-1;r?rt._data(i,e,r):(i.removeEventListener(t,n,!0),rt._removeData(i,e))}}}),rt.fn.extend({on:function(t,e,n,i,r){var o,s;if("object"==typeof t){"string"!=typeof e&&(n=n||e,e=void 0);for(o in t)this.on(o,e,n,t[o],r);return this}if(null==n&&null==i?(i=e,n=e=void 0):null==i&&("string"==typeof e?(i=n,n=void 0):(i=n,n=e,e=void 0)),i===!1)i=h;else if(!i)return this;return 1===r&&(s=i,i=function(t){return rt().off(t),s.apply(this,arguments)},i.guid=s.guid||(s.guid=rt.guid++)),this.each(function(){rt.event.add(this,t,i,n,e)})},one:function(t,e,n,i){return this.on(t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,rt(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return(e===!1||"function"==typeof e)&&(n=e,e=void 0),n===!1&&(n=h),this.each(function(){rt.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){rt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?rt.event.trigger(t,e,n,!0):void 0}});var It="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",Ht=/ jQuery\d+="(?:null|\d+)"/g,Ft=new RegExp("<(?:"+It+")[\\s/>]","i"),Pt=/^\s+/,qt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Yt=/<([\w:]+)/,Rt=/<tbody/i,Wt=/<|&#?\w+;/,Bt=/<(?:script|style|link)/i,Ut=/checked\s*(?:[^=]|=\s*.checked.)/i,zt=/^$|\/(?:java|ecma)script/i,Gt=/^true\/(.*)/,Vt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Xt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:nt.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},Qt=m(pt),Jt=Qt.appendChild(pt.createElement("div"));Xt.optgroup=Xt.option,Xt.tbody=Xt.tfoot=Xt.colgroup=Xt.caption=Xt.thead,Xt.th=Xt.td,rt.extend({clone:function(t,e,n){var i,r,o,s,a,l=rt.contains(t.ownerDocument,t);if(nt.html5Clone||rt.isXMLDoc(t)||!Ft.test("<"+t.nodeName+">")?o=t.cloneNode(!0):(Jt.innerHTML=t.outerHTML,Jt.removeChild(o=Jt.firstChild)),!(nt.noCloneEvent&&nt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||rt.isXMLDoc(t)))for(i=g(o),a=g(t),s=0;null!=(r=a[s]);++s)i[s]&&T(r,i[s]);if(e)if(n)for(a=a||g(t),i=i||g(o),s=0;null!=(r=a[s]);s++)_(r,i[s]);else _(t,o);return i=g(o,"script"),i.length>0&&x(i,!l&&g(t,"script")),i=a=r=null,o},buildFragment:function(t,e,n,i){for(var r,o,s,a,l,u,c,d=t.length,f=m(e),h=[],p=0;d>p;p++)if(o=t[p],o||0===o)if("object"===rt.type(o))rt.merge(h,o.nodeType?[o]:o);else if(Wt.test(o)){for(a=a||f.appendChild(e.createElement("div")),l=(Yt.exec(o)||["",""])[1].toLowerCase(),c=Xt[l]||Xt._default,a.innerHTML=c[1]+o.replace(qt,"<$1></$2>")+c[2],r=c[0];r--;)a=a.lastChild;if(!nt.leadingWhitespace&&Pt.test(o)&&h.push(e.createTextNode(Pt.exec(o)[0])),!nt.tbody)for(o="table"!==l||Rt.test(o)?"<table>"!==c[1]||Rt.test(o)?0:a:a.firstChild,r=o&&o.childNodes.length;r--;)rt.nodeName(u=o.childNodes[r],"tbody")&&!u.childNodes.length&&o.removeChild(u);for(rt.merge(h,a.childNodes),a.textContent="";a.firstChild;)a.removeChild(a.firstChild);a=f.lastChild}else h.push(e.createTextNode(o));for(a&&f.removeChild(a),nt.appendChecked||rt.grep(g(h,"input"),v),p=0;o=h[p++];)if((!i||-1===rt.inArray(o,i))&&(s=rt.contains(o.ownerDocument,o),a=g(f.appendChild(o),"script"),s&&x(a),n))for(r=0;o=a[r++];)zt.test(o.type||"")&&n.push(o);return a=null,f},cleanData:function(t,e){for(var n,i,r,o,s=0,a=rt.expando,l=rt.cache,u=nt.deleteExpando,c=rt.event.special;null!=(n=t[s]);s++)if((e||rt.acceptData(n))&&(r=n[a],o=r&&l[r])){if(o.events)for(i in o.events)c[i]?rt.event.remove(n,i):rt.removeEvent(n,i,o.handle);l[r]&&(delete l[r],u?delete n[a]:typeof n.removeAttribute!==Tt?n.removeAttribute(a):n[a]=null,V.push(r))}}}),rt.fn.extend({text:function(t){return Nt(this,function(t){return void 0===t?rt.text(this):this.empty().append((this[0]&&this[0].ownerDocument||pt).createTextNode(t))},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=y(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=y(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,i=t?rt.filter(t,this):this,r=0;null!=(n=i[r]);r++)e||1!==n.nodeType||rt.cleanData(g(n)),n.parentNode&&(e&&rt.contains(n.ownerDocument,n)&&x(g(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++){for(1===t.nodeType&&rt.cleanData(g(t,!1));t.firstChild;)t.removeChild(t.firstChild);t.options&&rt.nodeName(t,"select")&&(t.options.length=0)}return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return rt.clone(this,t,e)})},html:function(t){return Nt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t)return 1===e.nodeType?e.innerHTML.replace(Ht,""):void 0;if(!("string"!=typeof t||Bt.test(t)||!nt.htmlSerialize&&Ft.test(t)||!nt.leadingWhitespace&&Pt.test(t)||Xt[(Yt.exec(t)||["",""])[1].toLowerCase()])){t=t.replace(qt,"<$1></$2>");try{for(;i>n;n++)e=this[n]||{},1===e.nodeType&&(rt.cleanData(g(e,!1)),e.innerHTML=t);e=0}catch(r){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,rt.cleanData(g(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=Q.apply([],t);var n,i,r,o,s,a,l=0,u=this.length,c=this,d=u-1,f=t[0],h=rt.isFunction(f);if(h||u>1&&"string"==typeof f&&!nt.checkClone&&Ut.test(f))return this.each(function(n){var i=c.eq(n);h&&(t[0]=f.call(this,n,i.html())),i.domManip(t,e)});if(u&&(a=rt.buildFragment(t,this[0].ownerDocument,!1,this),n=a.firstChild,1===a.childNodes.length&&(a=n),n)){for(o=rt.map(g(a,"script"),b),r=o.length;u>l;l++)i=a,l!==d&&(i=rt.clone(i,!0,!0),r&&rt.merge(o,g(i,"script"))),e.call(this[l],i,l);if(r)for(s=o[o.length-1].ownerDocument,rt.map(o,w),l=0;r>l;l++)i=o[l],zt.test(i.type||"")&&!rt._data(i,"globalEval")&&rt.contains(s,i)&&(i.src?rt._evalUrl&&rt._evalUrl(i.src):rt.globalEval((i.text||i.textContent||i.innerHTML||"").replace(Vt,"")));a=n=null}return this}}),rt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){rt.fn[t]=function(t){for(var n,i=0,r=[],o=rt(t),s=o.length-1;s>=i;i++)n=i===s?this:this.clone(!0),rt(o[i])[e](n),J.apply(r,n.get());return this.pushStack(r)}});var Zt,Kt={};!function(){var t;nt.shrinkWrapBlocks=function(){if(null!=t)return t;t=!1;var e,n,i;return n=pt.getElementsByTagName("body")[0],n&&n.style?(e=pt.createElement("div"),i=pt.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(e),typeof e.style.zoom!==Tt&&(e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",e.appendChild(pt.createElement("div")).style.width="5px",t=3!==e.offsetWidth),n.removeChild(i),t):void 0}}();var te,ee,ne=/^margin/,ie=new RegExp("^("+St+")(?!px)[a-z%]+$","i"),re=/^(top|right|bottom|left)$/;t.getComputedStyle?(te=function(t){return t.ownerDocument.defaultView.getComputedStyle(t,null)},ee=function(t,e,n){var i,r,o,s,a=t.style;return n=n||te(t),s=n?n.getPropertyValue(e)||n[e]:void 0,n&&(""!==s||rt.contains(t.ownerDocument,t)||(s=rt.style(t,e)),ie.test(s)&&ne.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),
void 0===s?s:s+""}):pt.documentElement.currentStyle&&(te=function(t){return t.currentStyle},ee=function(t,e,n){var i,r,o,s,a=t.style;return n=n||te(t),s=n?n[e]:void 0,null==s&&a&&a[e]&&(s=a[e]),ie.test(s)&&!re.test(e)&&(i=a.left,r=t.runtimeStyle,o=r&&r.left,o&&(r.left=t.currentStyle.left),a.left="fontSize"===e?"1em":s,s=a.pixelLeft+"px",a.left=i,o&&(r.left=o)),void 0===s?s:s+""||"auto"}),function(){function e(){var e,n,i,r;n=pt.getElementsByTagName("body")[0],n&&n.style&&(e=pt.createElement("div"),i=pt.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(e),e.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",o=s=!1,l=!0,t.getComputedStyle&&(o="1%"!==(t.getComputedStyle(e,null)||{}).top,s="4px"===(t.getComputedStyle(e,null)||{width:"4px"}).width,r=e.appendChild(pt.createElement("div")),r.style.cssText=e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",r.style.marginRight=r.style.width="0",e.style.width="1px",l=!parseFloat((t.getComputedStyle(r,null)||{}).marginRight)),e.innerHTML="<table><tr><td></td><td>t</td></tr></table>",r=e.getElementsByTagName("td"),r[0].style.cssText="margin:0;border:0;padding:0;display:none",a=0===r[0].offsetHeight,a&&(r[0].style.display="",r[1].style.display="none",a=0===r[0].offsetHeight),n.removeChild(i))}var n,i,r,o,s,a,l;n=pt.createElement("div"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",r=n.getElementsByTagName("a")[0],i=r&&r.style,i&&(i.cssText="float:left;opacity:.5",nt.opacity="0.5"===i.opacity,nt.cssFloat=!!i.cssFloat,n.style.backgroundClip="content-box",n.cloneNode(!0).style.backgroundClip="",nt.clearCloneStyle="content-box"===n.style.backgroundClip,nt.boxSizing=""===i.boxSizing||""===i.MozBoxSizing||""===i.WebkitBoxSizing,rt.extend(nt,{reliableHiddenOffsets:function(){return null==a&&e(),a},boxSizingReliable:function(){return null==s&&e(),s},pixelPosition:function(){return null==o&&e(),o},reliableMarginRight:function(){return null==l&&e(),l}}))}(),rt.swap=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=s[o];return r};var oe=/alpha\([^)]*\)/i,se=/opacity\s*=\s*([^)]*)/,ae=/^(none|table(?!-c[ea]).+)/,le=new RegExp("^("+St+")(.*)$","i"),ue=new RegExp("^([+-])=("+St+")","i"),ce={position:"absolute",visibility:"hidden",display:"block"},de={letterSpacing:"0",fontWeight:"400"},fe=["Webkit","O","Moz","ms"];rt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=ee(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":nt.cssFloat?"cssFloat":"styleFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=rt.camelCase(e),l=t.style;if(e=rt.cssProps[a]||(rt.cssProps[a]=E(l,a)),s=rt.cssHooks[e]||rt.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:l[e];if(o=typeof n,"string"===o&&(r=ue.exec(n))&&(n=(r[1]+1)*r[2]+parseFloat(rt.css(t,e)),o="number"),null!=n&&n===n&&("number"!==o||rt.cssNumber[a]||(n+="px"),nt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),!(s&&"set"in s&&void 0===(n=s.set(t,n,i)))))try{l[e]=n}catch(u){}}},css:function(t,e,n,i){var r,o,s,a=rt.camelCase(e);return e=rt.cssProps[a]||(rt.cssProps[a]=E(t.style,a)),s=rt.cssHooks[e]||rt.cssHooks[a],s&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=ee(t,e,i)),"normal"===o&&e in de&&(o=de[e]),""===n||n?(r=parseFloat(o),n===!0||rt.isNumeric(r)?r||0:o):o}}),rt.each(["height","width"],function(t,e){rt.cssHooks[e]={get:function(t,n,i){return n?ae.test(rt.css(t,"display"))&&0===t.offsetWidth?rt.swap(t,ce,function(){return M(t,e,i)}):M(t,e,i):void 0},set:function(t,n,i){var r=i&&te(t);return N(t,n,i?A(t,e,i,nt.boxSizing&&"border-box"===rt.css(t,"boxSizing",!1,r),r):0)}}}),nt.opacity||(rt.cssHooks.opacity={get:function(t,e){return se.test((e&&t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":e?"1":""},set:function(t,e){var n=t.style,i=t.currentStyle,r=rt.isNumeric(e)?"alpha(opacity="+100*e+")":"",o=i&&i.filter||n.filter||"";n.zoom=1,(e>=1||""===e)&&""===rt.trim(o.replace(oe,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===e||i&&!i.filter)||(n.filter=oe.test(o)?o.replace(oe,r):o+" "+r)}}),rt.cssHooks.marginRight=S(nt.reliableMarginRight,function(t,e){return e?rt.swap(t,{display:"inline-block"},ee,[t,"marginRight"]):void 0}),rt.each({margin:"",padding:"",border:"Width"},function(t,e){rt.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];4>i;i++)r[t+Et[i]+e]=o[i]||o[i-2]||o[0];return r}},ne.test(t)||(rt.cssHooks[t+e].set=N)}),rt.fn.extend({css:function(t,e){return Nt(this,function(t,e,n){var i,r,o={},s=0;if(rt.isArray(e)){for(i=te(t),r=e.length;r>s;s++)o[e[s]]=rt.css(t,e[s],!1,i);return o}return void 0!==n?rt.style(t,e,n):rt.css(t,e)},t,e,arguments.length>1)},show:function(){return D(this,!0)},hide:function(){return D(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Dt(this)?rt(this).show():rt(this).hide()})}}),rt.Tween=$,$.prototype={constructor:$,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||"swing",this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(rt.cssNumber[n]?"":"px")},cur:function(){var t=$.propHooks[this.prop];return t&&t.get?t.get(this):$.propHooks._default.get(this)},run:function(t){var e,n=$.propHooks[this.prop];return this.pos=e=this.options.duration?rt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):$.propHooks._default.set(this),this}},$.prototype.init.prototype=$.prototype,$.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=rt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){rt.fx.step[t.prop]?rt.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[rt.cssProps[t.prop]]||rt.cssHooks[t.prop])?rt.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},$.propHooks.scrollTop=$.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},rt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},rt.fx=$.prototype.init,rt.fx.step={};var he,pe,me=/^(?:toggle|show|hide)$/,ge=new RegExp("^(?:([+-])=|)("+St+")([a-z%]*)$","i"),ve=/queueHooks$/,ye=[I],be={"*":[function(t,e){var n=this.createTween(t,e),i=n.cur(),r=ge.exec(e),o=r&&r[3]||(rt.cssNumber[t]?"":"px"),s=(rt.cssNumber[t]||"px"!==o&&+i)&&ge.exec(rt.css(n.elem,t)),a=1,l=20;if(s&&s[3]!==o){o=o||s[3],r=r||[],s=+i||1;do a=a||".5",s/=a,rt.style(n.elem,t,s+o);while(a!==(a=n.cur()/i)&&1!==a&&--l)}return r&&(s=n.start=+s||+i||0,n.unit=o,n.end=r[1]?s+(r[1]+1)*r[2]:+r[2]),n}]};rt.Animation=rt.extend(F,{tweener:function(t,e){rt.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,i=0,r=t.length;r>i;i++)n=t[i],be[n]=be[n]||[],be[n].unshift(e)},prefilter:function(t,e){e?ye.unshift(t):ye.push(t)}}),rt.speed=function(t,e,n){var i=t&&"object"==typeof t?rt.extend({},t):{complete:n||!n&&e||rt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!rt.isFunction(e)&&e};return i.duration=rt.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in rt.fx.speeds?rt.fx.speeds[i.duration]:rt.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){rt.isFunction(i.old)&&i.old.call(this),i.queue&&rt.dequeue(this,i.queue)},i},rt.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Dt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=rt.isEmptyObject(t),o=rt.speed(e,n,i),s=function(){var e=F(this,rt.extend({},t),o);(r||rt._data(this,"finish"))&&e.stop(!0)};return s.finish=s,r||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=rt.timers,s=rt._data(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ve.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));(e||!n)&&rt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=rt._data(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=rt.timers,s=i?i.length:0;for(n.finish=!0,rt.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;s>e;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),rt.each(["toggle","show","hide"],function(t,e){var n=rt.fn[e];rt.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(j(e,!0),t,i,r)}}),rt.each({slideDown:j("show"),slideUp:j("hide"),slideToggle:j("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){rt.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),rt.timers=[],rt.fx.tick=function(){var t,e=rt.timers,n=0;for(he=rt.now();n<e.length;n++)t=e[n],t()||e[n]!==t||e.splice(n--,1);e.length||rt.fx.stop(),he=void 0},rt.fx.timer=function(t){rt.timers.push(t),t()?rt.fx.start():rt.timers.pop()},rt.fx.interval=13,rt.fx.start=function(){pe||(pe=setInterval(rt.fx.tick,rt.fx.interval))},rt.fx.stop=function(){clearInterval(pe),pe=null},rt.fx.speeds={slow:600,fast:200,_default:400},rt.fn.delay=function(t,e){return t=rt.fx?rt.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var i=setTimeout(e,t);n.stop=function(){clearTimeout(i)}})},function(){var t,e,n,i,r;e=pt.createElement("div"),e.setAttribute("className","t"),e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",i=e.getElementsByTagName("a")[0],n=pt.createElement("select"),r=n.appendChild(pt.createElement("option")),t=e.getElementsByTagName("input")[0],i.style.cssText="top:1px",nt.getSetAttribute="t"!==e.className,nt.style=/top/.test(i.getAttribute("style")),nt.hrefNormalized="/a"===i.getAttribute("href"),nt.checkOn=!!t.value,nt.optSelected=r.selected,nt.enctype=!!pt.createElement("form").enctype,n.disabled=!0,nt.optDisabled=!r.disabled,t=pt.createElement("input"),t.setAttribute("value",""),nt.input=""===t.getAttribute("value"),t.value="t",t.setAttribute("type","radio"),nt.radioValue="t"===t.value}();var we=/\r/g;rt.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=rt.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,rt(this).val()):t,null==r?r="":"number"==typeof r?r+="":rt.isArray(r)&&(r=rt.map(r,function(t){return null==t?"":t+""})),e=rt.valHooks[this.type]||rt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return e=rt.valHooks[r.type]||rt.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(we,""):null==n?"":n)}}}),rt.extend({valHooks:{option:{get:function(t){var e=rt.find.attr(t,"value");return null!=e?e:rt.trim(rt.text(t))}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,o="select-one"===t.type||0>r,s=o?null:[],a=o?r+1:i.length,l=0>r?a:o?r:0;a>l;l++)if(n=i[l],!(!n.selected&&l!==r||(nt.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&rt.nodeName(n.parentNode,"optgroup"))){if(e=rt(n).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var n,i,r=t.options,o=rt.makeArray(e),s=r.length;s--;)if(i=r[s],rt.inArray(rt.valHooks.option.get(i),o)>=0)try{i.selected=n=!0}catch(a){i.scrollHeight}else i.selected=!1;return n||(t.selectedIndex=-1),r}}}}),rt.each(["radio","checkbox"],function(){rt.valHooks[this]={set:function(t,e){return rt.isArray(e)?t.checked=rt.inArray(rt(t).val(),e)>=0:void 0}},nt.checkOn||(rt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var xe,_e,Te=rt.expr.attrHandle,Ce=/^(?:checked|selected)$/i,ke=nt.getSetAttribute,Se=nt.input;rt.fn.extend({attr:function(t,e){return Nt(this,rt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){rt.removeAttr(this,t)})}}),rt.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(t&&3!==o&&8!==o&&2!==o)return typeof t.getAttribute===Tt?rt.prop(t,e,n):(1===o&&rt.isXMLDoc(t)||(e=e.toLowerCase(),i=rt.attrHooks[e]||(rt.expr.match.bool.test(e)?_e:xe)),void 0===n?i&&"get"in i&&null!==(r=i.get(t,e))?r:(r=rt.find.attr(t,e),null==r?void 0:r):null!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):void rt.removeAttr(t,e))},removeAttr:function(t,e){var n,i,r=0,o=e&&e.match(bt);if(o&&1===t.nodeType)for(;n=o[r++];)i=rt.propFix[n]||n,rt.expr.match.bool.test(n)?Se&&ke||!Ce.test(n)?t[i]=!1:t[rt.camelCase("default-"+n)]=t[i]=!1:rt.attr(t,n,""),t.removeAttribute(ke?n:i)},attrHooks:{type:{set:function(t,e){if(!nt.radioValue&&"radio"===e&&rt.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}}}),_e={set:function(t,e,n){return e===!1?rt.removeAttr(t,n):Se&&ke||!Ce.test(n)?t.setAttribute(!ke&&rt.propFix[n]||n,n):t[rt.camelCase("default-"+n)]=t[n]=!0,n}},rt.each(rt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=Te[e]||rt.find.attr;Te[e]=Se&&ke||!Ce.test(e)?function(t,e,i){var r,o;return i||(o=Te[e],Te[e]=r,r=null!=n(t,e,i)?e.toLowerCase():null,Te[e]=o),r}:function(t,e,n){return n?void 0:t[rt.camelCase("default-"+e)]?e.toLowerCase():null}}),Se&&ke||(rt.attrHooks.value={set:function(t,e,n){return rt.nodeName(t,"input")?void(t.defaultValue=e):xe&&xe.set(t,e,n)}}),ke||(xe={set:function(t,e,n){var i=t.getAttributeNode(n);return i||t.setAttributeNode(i=t.ownerDocument.createAttribute(n)),i.value=e+="","value"===n||e===t.getAttribute(n)?e:void 0}},Te.id=Te.name=Te.coords=function(t,e,n){var i;return n?void 0:(i=t.getAttributeNode(e))&&""!==i.value?i.value:null},rt.valHooks.button={get:function(t,e){var n=t.getAttributeNode(e);return n&&n.specified?n.value:void 0},set:xe.set},rt.attrHooks.contenteditable={set:function(t,e,n){xe.set(t,""===e?!1:e,n)}},rt.each(["width","height"],function(t,e){rt.attrHooks[e]={set:function(t,n){return""===n?(t.setAttribute(e,"auto"),n):void 0}}})),nt.style||(rt.attrHooks.style={get:function(t){return t.style.cssText||void 0},set:function(t,e){return t.style.cssText=e+""}});var Ee=/^(?:input|select|textarea|button|object)$/i,De=/^(?:a|area)$/i;rt.fn.extend({prop:function(t,e){return Nt(this,rt.prop,t,e,arguments.length>1)},removeProp:function(t){return t=rt.propFix[t]||t,this.each(function(){try{this[t]=void 0,delete this[t]}catch(e){}})}}),rt.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,n){var i,r,o,s=t.nodeType;if(t&&3!==s&&8!==s&&2!==s)return o=1!==s||!rt.isXMLDoc(t),o&&(e=rt.propFix[e]||e,r=rt.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=rt.find.attr(t,"tabindex");return e?parseInt(e,10):Ee.test(t.nodeName)||De.test(t.nodeName)&&t.href?0:-1}}}}),nt.hrefNormalized||rt.each(["href","src"],function(t,e){rt.propHooks[e]={get:function(t){return t.getAttribute(e,4)}}}),nt.optSelected||(rt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex),null}}),rt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){rt.propFix[this.toLowerCase()]=this}),nt.enctype||(rt.propFix.enctype="encoding");var Ne=/[\t\r\n\f]/g;rt.fn.extend({addClass:function(t){var e,n,i,r,o,s,a=0,l=this.length,u="string"==typeof t&&t;if(rt.isFunction(t))return this.each(function(e){rt(this).addClass(t.call(this,e,this.className))});if(u)for(e=(t||"").match(bt)||[];l>a;a++)if(n=this[a],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Ne," "):" ")){for(o=0;r=e[o++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");s=rt.trim(i),n.className!==s&&(n.className=s)}return this},removeClass:function(t){var e,n,i,r,o,s,a=0,l=this.length,u=0===arguments.length||"string"==typeof t&&t;if(rt.isFunction(t))return this.each(function(e){rt(this).removeClass(t.call(this,e,this.className))});if(u)for(e=(t||"").match(bt)||[];l>a;a++)if(n=this[a],i=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(Ne," "):"")){for(o=0;r=e[o++];)for(;i.indexOf(" "+r+" ")>=0;)i=i.replace(" "+r+" "," ");s=t?rt.trim(i):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):this.each(rt.isFunction(t)?function(n){rt(this).toggleClass(t.call(this,n,this.className,e),e)}:function(){if("string"===n)for(var e,i=0,r=rt(this),o=t.match(bt)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else(n===Tt||"boolean"===n)&&(this.className&&rt._data(this,"__className__",this.className),this.className=this.className||t===!1?"":rt._data(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,i=this.length;i>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(Ne," ").indexOf(e)>=0)return!0;return!1}}),rt.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){rt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),rt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}});var Ae=rt.now(),Me=/\?/,$e=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;rt.parseJSON=function(e){if(t.JSON&&t.JSON.parse)return t.JSON.parse(e+"");var n,i=null,r=rt.trim(e+"");return r&&!rt.trim(r.replace($e,function(t,e,r,o){return n&&e&&(i=0),0===i?t:(n=r||e,i+=!o-!r,"")}))?Function("return "+r)():rt.error("Invalid JSON: "+e)},rt.parseXML=function(e){var n,i;if(!e||"string"!=typeof e)return null;try{t.DOMParser?(i=new DOMParser,n=i.parseFromString(e,"text/xml")):(n=new ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(e))}catch(r){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||rt.error("Invalid XML: "+e),n};var Oe,je,Le=/#.*$/,Ie=/([?&])_=[^&]*/,He=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Fe=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Pe=/^(?:GET|HEAD)$/,qe=/^\/\//,Ye=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Re={},We={},Be="*/".concat("*");try{je=location.href}catch(Ue){je=pt.createElement("a"),je.href="",je=je.href}Oe=Ye.exec(je.toLowerCase())||[],rt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:je,type:"GET",isLocal:Fe.test(Oe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":rt.parseJSON,"text xml":rt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Y(Y(t,rt.ajaxSettings),e):Y(rt.ajaxSettings,t)},ajaxPrefilter:P(Re),ajaxTransport:P(We),ajax:function(t,e){function n(t,e,n,i){var r,c,v,y,w,_=e;2!==b&&(b=2,a&&clearTimeout(a),u=void 0,s=i||"",x.readyState=t>0?4:0,r=t>=200&&300>t||304===t,n&&(y=R(d,x,n)),y=W(d,y,x,r),r?(d.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(rt.lastModified[o]=w),w=x.getResponseHeader("etag"),w&&(rt.etag[o]=w)),204===t||"HEAD"===d.type?_="nocontent":304===t?_="notmodified":(_=y.state,c=y.data,v=y.error,r=!v)):(v=_,(t||!_)&&(_="error",0>t&&(t=0))),x.status=t,x.statusText=(e||_)+"",r?p.resolveWith(f,[c,_,x]):p.rejectWith(f,[x,_,v]),x.statusCode(g),g=void 0,l&&h.trigger(r?"ajaxSuccess":"ajaxError",[x,d,r?c:v]),m.fireWith(f,[x,_]),l&&(h.trigger("ajaxComplete",[x,d]),--rt.active||rt.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,o,s,a,l,u,c,d=rt.ajaxSetup({},e),f=d.context||d,h=d.context&&(f.nodeType||f.jquery)?rt(f):rt.event,p=rt.Deferred(),m=rt.Callbacks("once memory"),g=d.statusCode||{},v={},y={},b=0,w="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(2===b){if(!c)for(c={};e=He.exec(s);)c[e[1].toLowerCase()]=e[2];e=c[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===b?s:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return b||(t=y[n]=y[n]||t,v[t]=e),this},overrideMimeType:function(t){return b||(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>b)for(e in t)g[e]=[g[e],t[e]];else x.always(t[x.status]);return this},abort:function(t){var e=t||w;return u&&u.abort(e),n(0,e),this}};if(p.promise(x).complete=m.add,x.success=x.done,x.error=x.fail,d.url=((t||d.url||je)+"").replace(Le,"").replace(qe,Oe[1]+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=rt.trim(d.dataType||"*").toLowerCase().match(bt)||[""],null==d.crossDomain&&(i=Ye.exec(d.url.toLowerCase()),d.crossDomain=!(!i||i[1]===Oe[1]&&i[2]===Oe[2]&&(i[3]||("http:"===i[1]?"80":"443"))===(Oe[3]||("http:"===Oe[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=rt.param(d.data,d.traditional)),q(Re,d,e,x),2===b)return x;l=d.global,l&&0===rt.active++&&rt.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Pe.test(d.type),o=d.url,d.hasContent||(d.data&&(o=d.url+=(Me.test(o)?"&":"?")+d.data,delete d.data),d.cache===!1&&(d.url=Ie.test(o)?o.replace(Ie,"$1_="+Ae++):o+(Me.test(o)?"&":"?")+"_="+Ae++)),d.ifModified&&(rt.lastModified[o]&&x.setRequestHeader("If-Modified-Since",rt.lastModified[o]),rt.etag[o]&&x.setRequestHeader("If-None-Match",rt.etag[o])),(d.data&&d.hasContent&&d.contentType!==!1||e.contentType)&&x.setRequestHeader("Content-Type",d.contentType),x.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Be+"; q=0.01":""):d.accepts["*"]);for(r in d.headers)x.setRequestHeader(r,d.headers[r]);if(d.beforeSend&&(d.beforeSend.call(f,x,d)===!1||2===b))return x.abort();w="abort";for(r in{success:1,error:1,complete:1})x[r](d[r]);if(u=q(We,d,e,x)){x.readyState=1,l&&h.trigger("ajaxSend",[x,d]),d.async&&d.timeout>0&&(a=setTimeout(function(){x.abort("timeout")},d.timeout));try{b=1,u.send(v,n)}catch(_){if(!(2>b))throw _;n(-1,_)}}else n(-1,"No Transport");return x},getJSON:function(t,e,n){return rt.get(t,e,n,"json")},getScript:function(t,e){return rt.get(t,void 0,e,"script")}}),rt.each(["get","post"],function(t,e){rt[e]=function(t,n,i,r){return rt.isFunction(n)&&(r=r||i,i=n,n=void 0),rt.ajax({url:t,type:e,dataType:r,data:n,success:i})}}),rt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){rt.fn[e]=function(t){return this.on(e,t)}}),rt._evalUrl=function(t){return rt.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},rt.fn.extend({wrapAll:function(t){if(rt.isFunction(t))return this.each(function(e){rt(this).wrapAll(t.call(this,e))});if(this[0]){var e=rt(t,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstChild&&1===t.firstChild.nodeType;)t=t.firstChild;return t}).append(this)}return this},wrapInner:function(t){return this.each(rt.isFunction(t)?function(e){rt(this).wrapInner(t.call(this,e))}:function(){var e=rt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=rt.isFunction(t);return this.each(function(n){rt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){rt.nodeName(this,"body")||rt(this).replaceWith(this.childNodes)}).end()}}),rt.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0||!nt.reliableHiddenOffsets()&&"none"===(t.style&&t.style.display||rt.css(t,"display"))},rt.expr.filters.visible=function(t){return!rt.expr.filters.hidden(t)};var ze=/%20/g,Ge=/\[\]$/,Ve=/\r?\n/g,Xe=/^(?:submit|button|image|reset|file)$/i,Qe=/^(?:input|select|textarea|keygen)/i;rt.param=function(t,e){var n,i=[],r=function(t,e){e=rt.isFunction(e)?e():null==e?"":e,i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=rt.ajaxSettings&&rt.ajaxSettings.traditional),rt.isArray(t)||t.jquery&&!rt.isPlainObject(t))rt.each(t,function(){r(this.name,this.value)});else for(n in t)B(n,t[n],e,r);return i.join("&").replace(ze,"+")},rt.fn.extend({serialize:function(){return rt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=rt.prop(this,"elements");return t?rt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!rt(this).is(":disabled")&&Qe.test(this.nodeName)&&!Xe.test(t)&&(this.checked||!At.test(t))}).map(function(t,e){var n=rt(this).val();return null==n?null:rt.isArray(n)?rt.map(n,function(t){return{name:e.name,value:t.replace(Ve,"\r\n")}}):{name:e.name,value:n.replace(Ve,"\r\n")}}).get()}}),rt.ajaxSettings.xhr=void 0!==t.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&U()||z()}:U;var Je=0,Ze={},Ke=rt.ajaxSettings.xhr();t.ActiveXObject&&rt(t).on("unload",function(){for(var t in Ze)Ze[t](void 0,!0)}),nt.cors=!!Ke&&"withCredentials"in Ke,Ke=nt.ajax=!!Ke,Ke&&rt.ajaxTransport(function(t){if(!t.crossDomain||nt.cors){var e;return{send:function(n,i){var r,o=t.xhr(),s=++Je;if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)o[r]=t.xhrFields[r];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(r in n)void 0!==n[r]&&o.setRequestHeader(r,n[r]+"");o.send(t.hasContent&&t.data||null),e=function(n,r){var a,l,u;if(e&&(r||4===o.readyState))if(delete Ze[s],e=void 0,o.onreadystatechange=rt.noop,r)4!==o.readyState&&o.abort();else{u={},a=o.status,"string"==typeof o.responseText&&(u.text=o.responseText);try{l=o.statusText}catch(c){l=""}a||!t.isLocal||t.crossDomain?1223===a&&(a=204):a=u.text?200:404}u&&i(a,l,u,o.getAllResponseHeaders())},t.async?4===o.readyState?setTimeout(e):o.onreadystatechange=Ze[s]=e:e()},abort:function(){e&&e(void 0,!0)}}}}),rt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return rt.globalEval(t),t}}}),rt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET",t.global=!1)}),rt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n=pt.head||rt("head")[0]||pt.documentElement;return{send:function(i,r){e=pt.createElement("script"),e.async=!0,t.scriptCharset&&(e.charset=t.scriptCharset),e.src=t.url,e.onload=e.onreadystatechange=function(t,n){(n||!e.readyState||/loaded|complete/.test(e.readyState))&&(e.onload=e.onreadystatechange=null,e.parentNode&&e.parentNode.removeChild(e),e=null,n||r(200,"success"))},n.insertBefore(e,n.firstChild)},abort:function(){e&&e.onload(void 0,!0)}}}});var tn=[],en=/(=)\?(?=&|$)|\?\?/;rt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=tn.pop()||rt.expando+"_"+Ae++;return this[t]=!0,t}}),rt.ajaxPrefilter("json jsonp",function(e,n,i){var r,o,s,a=e.jsonp!==!1&&(en.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&en.test(e.data)&&"data");return a||"jsonp"===e.dataTypes[0]?(r=e.jsonpCallback=rt.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(en,"$1"+r):e.jsonp!==!1&&(e.url+=(Me.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||rt.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=t[r],t[r]=function(){s=arguments},i.always(function(){t[r]=o,e[r]&&(e.jsonpCallback=n.jsonpCallback,tn.push(r)),s&&rt.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),rt.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||pt;var i=dt.exec(t),r=!n&&[];return i?[e.createElement(i[1])]:(i=rt.buildFragment([t],e,r),r&&r.length&&rt(r).remove(),rt.merge([],i.childNodes))};var nn=rt.fn.load;rt.fn.load=function(t,e,n){if("string"!=typeof t&&nn)return nn.apply(this,arguments);var i,r,o,s=this,a=t.indexOf(" ");return a>=0&&(i=rt.trim(t.slice(a,t.length)),t=t.slice(0,a)),rt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),s.length>0&&rt.ajax({url:t,type:o,dataType:"html",data:e}).done(function(t){r=arguments,s.html(i?rt("<div>").append(rt.parseHTML(t)).find(i):t)}).complete(n&&function(t,e){s.each(n,r||[t.responseText,e,t])}),this},rt.expr.filters.animated=function(t){return rt.grep(rt.timers,function(e){return t===e.elem}).length};var rn=t.document.documentElement;rt.offset={setOffset:function(t,e,n){var i,r,o,s,a,l,u,c=rt.css(t,"position"),d=rt(t),f={};"static"===c&&(t.style.position="relative"),a=d.offset(),o=rt.css(t,"top"),l=rt.css(t,"left"),u=("absolute"===c||"fixed"===c)&&rt.inArray("auto",[o,l])>-1,u?(i=d.position(),s=i.top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),rt.isFunction(e)&&(e=e.call(t,n,a)),null!=e.top&&(f.top=e.top-a.top+s),null!=e.left&&(f.left=e.left-a.left+r),"using"in e?e.using.call(t,f):d.css(f)}},rt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){rt.offset.setOffset(this,t,e)});var e,n,i={top:0,left:0},r=this[0],o=r&&r.ownerDocument;if(o)return e=o.documentElement,rt.contains(e,r)?(typeof r.getBoundingClientRect!==Tt&&(i=r.getBoundingClientRect()),n=G(o),{top:i.top+(n.pageYOffset||e.scrollTop)-(e.clientTop||0),left:i.left+(n.pageXOffset||e.scrollLeft)-(e.clientLeft||0)}):i},position:function(){if(this[0]){var t,e,n={top:0,left:0},i=this[0];return"fixed"===rt.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),rt.nodeName(t[0],"html")||(n=t.offset()),n.top+=rt.css(t[0],"borderTopWidth",!0),n.left+=rt.css(t[0],"borderLeftWidth",!0)),{top:e.top-n.top-rt.css(i,"marginTop",!0),left:e.left-n.left-rt.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||rn;t&&!rt.nodeName(t,"html")&&"static"===rt.css(t,"position");)t=t.offsetParent;return t||rn})}}),rt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n=/Y/.test(e);rt.fn[t]=function(i){return Nt(this,function(t,i,r){var o=G(t);return void 0===r?o?e in o?o[e]:o.document.documentElement[i]:t[i]:void(o?o.scrollTo(n?rt(o).scrollLeft():r,n?r:rt(o).scrollTop()):t[i]=r)},t,i,arguments.length,null)}}),rt.each(["top","left"],function(t,e){rt.cssHooks[e]=S(nt.pixelPosition,function(t,n){return n?(n=ee(t,e),ie.test(n)?rt(t).position()[e]+"px":n):void 0})}),rt.each({Height:"height",Width:"width"},function(t,e){rt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){rt.fn[i]=function(i,r){var o=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||r===!0?"margin":"border");return Nt(this,function(e,n,i){var r;return rt.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+t],r["scroll"+t],e.body["offset"+t],r["offset"+t],r["client"+t])):void 0===i?rt.css(e,n,s):rt.style(e,n,i,s);

},e,o?i:void 0,o,null)}})}),rt.fn.size=function(){return this.length},rt.fn.andSelf=rt.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return rt});var on=t.jQuery,sn=t.$;return rt.noConflict=function(e){return t.$===rt&&(t.$=sn),e&&t.jQuery===rt&&(t.jQuery=on),rt},typeof e===Tt&&(t.jQuery=t.$=rt),rt}),!function(t,e){if("function"==typeof define&&define.amd)define(["exports","module"],e);else if("undefined"!=typeof exports&&"undefined"!=typeof module)e(exports,module);else{var n={exports:{}};e(n.exports,n),t.autosize=n.exports}}(this,function(t,e){"use strict";function n(t){function e(){var e=window.getComputedStyle(t,null);"vertical"===e.resize?t.style.resize="none":"both"===e.resize&&(t.style.resize="horizontal"),r="content-box"===e.boxSizing?-(parseFloat(e.paddingTop)+parseFloat(e.paddingBottom)):parseFloat(e.borderTopWidth)+parseFloat(e.borderBottomWidth),i()}function n(e){var n=t.style.width;t.style.width="0px",t.offsetWidth,t.style.width=n,t.style.overflowY=e,i()}function i(){var e=t.style.height,i=document.documentElement.scrollTop,s=document.body.scrollTop,a=t.style.height;t.style.height="auto";var l=t.scrollHeight+r;if(0===t.scrollHeight)return void(t.style.height=a);t.style.height=l+"px",document.documentElement.scrollTop=i,document.body.scrollTop=s;var u=window.getComputedStyle(t,null);if(u.height!==t.style.height){if("visible"!==t.style.overflowY)return void n("visible")}else if("hidden"!==t.style.overflowY)return n("hidden"),void o();if(e!==t.style.height){var c=document.createEvent("Event");c.initEvent("autosize:resized",!0,!1),t.dispatchEvent(c)}}if(t&&t.nodeName&&"TEXTAREA"===t.nodeName&&!t.hasAttribute("data-autosize-on")){var r,s=function(e){window.removeEventListener("resize",i),t.removeEventListener("input",i),t.removeEventListener("keyup",i),t.removeAttribute("data-autosize-on"),t.removeEventListener("autosize:destroy",s),Object.keys(e).forEach(function(n){t.style[n]=e[n]})}.bind(t,{height:t.style.height,resize:t.style.resize,overflowY:t.style.overflowY});t.addEventListener("autosize:destroy",s),"onpropertychange"in t&&"oninput"in t&&t.addEventListener("keyup",i),window.addEventListener("resize",i),t.addEventListener("input",i),t.addEventListener("autosize:update",i),t.setAttribute("data-autosize-on",!0),e()}}function i(t){if(t&&t.nodeName&&"TEXTAREA"===t.nodeName){var e=document.createEvent("Event");e.initEvent("autosize:destroy",!0,!1),t.dispatchEvent(e)}}function r(t){if(t&&t.nodeName&&"TEXTAREA"===t.nodeName){var e=document.createEvent("Event");e.initEvent("autosize:update",!0,!1),t.dispatchEvent(e)}}var o;"function"!=typeof window.getComputedStyle?(o=function(t){return t},o.destroy=function(t){return t},o.update=function(t){return t}):(o=function(t){return t&&t.length?Array.prototype.forEach.call(t,n):t&&t.nodeName&&n(t),t},o.destroy=function(t){return t&&t.length?Array.prototype.forEach.call(t,i):t&&t.nodeName&&i(t),t},o.update=function(t){return t&&t.length?Array.prototype.forEach.call(t,r):t&&t.nodeName&&r(t),t}),e.exports=o}),function(){var t=this,e=t._,n=Array.prototype,i=Object.prototype,r=Function.prototype,o=n.push,s=n.slice,a=n.concat,l=i.toString,u=i.hasOwnProperty,c=Array.isArray,d=Object.keys,f=r.bind,h=function(t){return t instanceof h?t:this instanceof h?void(this._wrapped=t):new h(t)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=h),exports._=h):t._=h,h.VERSION="1.7.0";var p=function(t,e,n){if(void 0===e)return t;switch(null==n?3:n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,i){return t.call(e,n,i)};case 3:return function(n,i,r){return t.call(e,n,i,r)};case 4:return function(n,i,r,o){return t.call(e,n,i,r,o)}}return function(){return t.apply(e,arguments)}};h.iteratee=function(t,e,n){return null==t?h.identity:h.isFunction(t)?p(t,e,n):h.isObject(t)?h.matches(t):h.property(t)},h.each=h.forEach=function(t,e,n){if(null==t)return t;e=p(e,n);var i,r=t.length;if(r===+r)for(i=0;r>i;i++)e(t[i],i,t);else{var o=h.keys(t);for(i=0,r=o.length;r>i;i++)e(t[o[i]],o[i],t)}return t},h.map=h.collect=function(t,e,n){if(null==t)return[];e=h.iteratee(e,n);for(var i,r=t.length!==+t.length&&h.keys(t),o=(r||t).length,s=Array(o),a=0;o>a;a++)i=r?r[a]:a,s[a]=e(t[i],i,t);return s};var m="Reduce of empty array with no initial value";h.reduce=h.foldl=h.inject=function(t,e,n,i){null==t&&(t=[]),e=p(e,i,4);var r,o=t.length!==+t.length&&h.keys(t),s=(o||t).length,a=0;if(arguments.length<3){if(!s)throw new TypeError(m);n=t[o?o[a++]:a++]}for(;s>a;a++)r=o?o[a]:a,n=e(n,t[r],r,t);return n},h.reduceRight=h.foldr=function(t,e,n,i){null==t&&(t=[]),e=p(e,i,4);var r,o=t.length!==+t.length&&h.keys(t),s=(o||t).length;if(arguments.length<3){if(!s)throw new TypeError(m);n=t[o?o[--s]:--s]}for(;s--;)r=o?o[s]:s,n=e(n,t[r],r,t);return n},h.find=h.detect=function(t,e,n){var i;return e=h.iteratee(e,n),h.some(t,function(t,n,r){return e(t,n,r)?(i=t,!0):void 0}),i},h.filter=h.select=function(t,e,n){var i=[];return null==t?i:(e=h.iteratee(e,n),h.each(t,function(t,n,r){e(t,n,r)&&i.push(t)}),i)},h.reject=function(t,e,n){return h.filter(t,h.negate(h.iteratee(e)),n)},h.every=h.all=function(t,e,n){if(null==t)return!0;e=h.iteratee(e,n);var i,r,o=t.length!==+t.length&&h.keys(t),s=(o||t).length;for(i=0;s>i;i++)if(r=o?o[i]:i,!e(t[r],r,t))return!1;return!0},h.some=h.any=function(t,e,n){if(null==t)return!1;e=h.iteratee(e,n);var i,r,o=t.length!==+t.length&&h.keys(t),s=(o||t).length;for(i=0;s>i;i++)if(r=o?o[i]:i,e(t[r],r,t))return!0;return!1},h.contains=h.include=function(t,e){return null==t?!1:(t.length!==+t.length&&(t=h.values(t)),h.indexOf(t,e)>=0)},h.invoke=function(t,e){var n=s.call(arguments,2),i=h.isFunction(e);return h.map(t,function(t){return(i?e:t[e]).apply(t,n)})},h.pluck=function(t,e){return h.map(t,h.property(e))},h.where=function(t,e){return h.filter(t,h.matches(e))},h.findWhere=function(t,e){return h.find(t,h.matches(e))},h.max=function(t,e,n){var i,r,o=-(1/0),s=-(1/0);if(null==e&&null!=t){t=t.length===+t.length?t:h.values(t);for(var a=0,l=t.length;l>a;a++)i=t[a],i>o&&(o=i)}else e=h.iteratee(e,n),h.each(t,function(t,n,i){r=e(t,n,i),(r>s||r===-(1/0)&&o===-(1/0))&&(o=t,s=r)});return o},h.min=function(t,e,n){var i,r,o=1/0,s=1/0;if(null==e&&null!=t){t=t.length===+t.length?t:h.values(t);for(var a=0,l=t.length;l>a;a++)i=t[a],o>i&&(o=i)}else e=h.iteratee(e,n),h.each(t,function(t,n,i){r=e(t,n,i),(s>r||r===1/0&&o===1/0)&&(o=t,s=r)});return o},h.shuffle=function(t){for(var e,n=t&&t.length===+t.length?t:h.values(t),i=n.length,r=Array(i),o=0;i>o;o++)e=h.random(0,o),e!==o&&(r[o]=r[e]),r[e]=n[o];return r},h.sample=function(t,e,n){return null==e||n?(t.length!==+t.length&&(t=h.values(t)),t[h.random(t.length-1)]):h.shuffle(t).slice(0,Math.max(0,e))},h.sortBy=function(t,e,n){return e=h.iteratee(e,n),h.pluck(h.map(t,function(t,n,i){return{value:t,index:n,criteria:e(t,n,i)}}).sort(function(t,e){var n=t.criteria,i=e.criteria;if(n!==i){if(n>i||void 0===n)return 1;if(i>n||void 0===i)return-1}return t.index-e.index}),"value")};var g=function(t){return function(e,n,i){var r={};return n=h.iteratee(n,i),h.each(e,function(i,o){var s=n(i,o,e);t(r,i,s)}),r}};h.groupBy=g(function(t,e,n){h.has(t,n)?t[n].push(e):t[n]=[e]}),h.indexBy=g(function(t,e,n){t[n]=e}),h.countBy=g(function(t,e,n){h.has(t,n)?t[n]++:t[n]=1}),h.sortedIndex=function(t,e,n,i){n=h.iteratee(n,i,1);for(var r=n(e),o=0,s=t.length;s>o;){var a=o+s>>>1;n(t[a])<r?o=a+1:s=a}return o},h.toArray=function(t){return t?h.isArray(t)?s.call(t):t.length===+t.length?h.map(t,h.identity):h.values(t):[]},h.size=function(t){return null==t?0:t.length===+t.length?t.length:h.keys(t).length},h.partition=function(t,e,n){e=h.iteratee(e,n);var i=[],r=[];return h.each(t,function(t,n,o){(e(t,n,o)?i:r).push(t)}),[i,r]},h.first=h.head=h.take=function(t,e,n){return null==t?void 0:null==e||n?t[0]:0>e?[]:s.call(t,0,e)},h.initial=function(t,e,n){return s.call(t,0,Math.max(0,t.length-(null==e||n?1:e)))},h.last=function(t,e,n){return null==t?void 0:null==e||n?t[t.length-1]:s.call(t,Math.max(t.length-e,0))},h.rest=h.tail=h.drop=function(t,e,n){return s.call(t,null==e||n?1:e)},h.compact=function(t){return h.filter(t,h.identity)};var v=function(t,e,n,i){if(e&&h.every(t,h.isArray))return a.apply(i,t);for(var r=0,s=t.length;s>r;r++){var l=t[r];h.isArray(l)||h.isArguments(l)?e?o.apply(i,l):v(l,e,n,i):n||i.push(l)}return i};h.flatten=function(t,e){return v(t,e,!1,[])},h.without=function(t){return h.difference(t,s.call(arguments,1))},h.uniq=h.unique=function(t,e,n,i){if(null==t)return[];h.isBoolean(e)||(i=n,n=e,e=!1),null!=n&&(n=h.iteratee(n,i));for(var r=[],o=[],s=0,a=t.length;a>s;s++){var l=t[s];if(e)s&&o===l||r.push(l),o=l;else if(n){var u=n(l,s,t);h.indexOf(o,u)<0&&(o.push(u),r.push(l))}else h.indexOf(r,l)<0&&r.push(l)}return r},h.union=function(){return h.uniq(v(arguments,!0,!0,[]))},h.intersection=function(t){if(null==t)return[];for(var e=[],n=arguments.length,i=0,r=t.length;r>i;i++){var o=t[i];if(!h.contains(e,o)){for(var s=1;n>s&&h.contains(arguments[s],o);s++);s===n&&e.push(o)}}return e},h.difference=function(t){var e=v(s.call(arguments,1),!0,!0,[]);return h.filter(t,function(t){return!h.contains(e,t)})},h.zip=function(t){if(null==t)return[];for(var e=h.max(arguments,"length").length,n=Array(e),i=0;e>i;i++)n[i]=h.pluck(arguments,i);return n},h.object=function(t,e){if(null==t)return{};for(var n={},i=0,r=t.length;r>i;i++)e?n[t[i]]=e[i]:n[t[i][0]]=t[i][1];return n},h.indexOf=function(t,e,n){if(null==t)return-1;var i=0,r=t.length;if(n){if("number"!=typeof n)return i=h.sortedIndex(t,e),t[i]===e?i:-1;i=0>n?Math.max(0,r+n):n}for(;r>i;i++)if(t[i]===e)return i;return-1},h.lastIndexOf=function(t,e,n){if(null==t)return-1;var i=t.length;for("number"==typeof n&&(i=0>n?i+n+1:Math.min(i,n+1));--i>=0;)if(t[i]===e)return i;return-1},h.range=function(t,e,n){arguments.length<=1&&(e=t||0,t=0),n=n||1;for(var i=Math.max(Math.ceil((e-t)/n),0),r=Array(i),o=0;i>o;o++,t+=n)r[o]=t;return r};var y=function(){};h.bind=function(t,e){var n,i;if(f&&t.bind===f)return f.apply(t,s.call(arguments,1));if(!h.isFunction(t))throw new TypeError("Bind must be called on a function");return n=s.call(arguments,2),i=function(){if(!(this instanceof i))return t.apply(e,n.concat(s.call(arguments)));y.prototype=t.prototype;var r=new y;y.prototype=null;var o=t.apply(r,n.concat(s.call(arguments)));return h.isObject(o)?o:r}},h.partial=function(t){var e=s.call(arguments,1);return function(){for(var n=0,i=e.slice(),r=0,o=i.length;o>r;r++)i[r]===h&&(i[r]=arguments[n++]);for(;n<arguments.length;)i.push(arguments[n++]);return t.apply(this,i)}},h.bindAll=function(t){var e,n,i=arguments.length;if(1>=i)throw new Error("bindAll must be passed function names");for(e=1;i>e;e++)n=arguments[e],t[n]=h.bind(t[n],t);return t},h.memoize=function(t,e){var n=function(i){var r=n.cache,o=e?e.apply(this,arguments):i;return h.has(r,o)||(r[o]=t.apply(this,arguments)),r[o]};return n.cache={},n},h.delay=function(t,e){var n=s.call(arguments,2);return setTimeout(function(){return t.apply(null,n)},e)},h.defer=function(t){return h.delay.apply(h,[t,1].concat(s.call(arguments,1)))},h.throttle=function(t,e,n){var i,r,o,s=null,a=0;n||(n={});var l=function(){a=n.leading===!1?0:h.now(),s=null,o=t.apply(i,r),s||(i=r=null)};return function(){var u=h.now();a||n.leading!==!1||(a=u);var c=e-(u-a);return i=this,r=arguments,0>=c||c>e?(clearTimeout(s),s=null,a=u,o=t.apply(i,r),s||(i=r=null)):s||n.trailing===!1||(s=setTimeout(l,c)),o}},h.debounce=function(t,e,n){var i,r,o,s,a,l=function(){var u=h.now()-s;e>u&&u>0?i=setTimeout(l,e-u):(i=null,n||(a=t.apply(o,r),i||(o=r=null)))};return function(){o=this,r=arguments,s=h.now();var u=n&&!i;return i||(i=setTimeout(l,e)),u&&(a=t.apply(o,r),o=r=null),a}},h.wrap=function(t,e){return h.partial(e,t)},h.negate=function(t){return function(){return!t.apply(this,arguments)}},h.compose=function(){var t=arguments,e=t.length-1;return function(){for(var n=e,i=t[e].apply(this,arguments);n--;)i=t[n].call(this,i);return i}},h.after=function(t,e){return function(){return--t<1?e.apply(this,arguments):void 0}},h.before=function(t,e){var n;return function(){return--t>0?n=e.apply(this,arguments):e=null,n}},h.once=h.partial(h.before,2),h.keys=function(t){if(!h.isObject(t))return[];if(d)return d(t);var e=[];for(var n in t)h.has(t,n)&&e.push(n);return e},h.values=function(t){for(var e=h.keys(t),n=e.length,i=Array(n),r=0;n>r;r++)i[r]=t[e[r]];return i},h.pairs=function(t){for(var e=h.keys(t),n=e.length,i=Array(n),r=0;n>r;r++)i[r]=[e[r],t[e[r]]];return i},h.invert=function(t){for(var e={},n=h.keys(t),i=0,r=n.length;r>i;i++)e[t[n[i]]]=n[i];return e},h.functions=h.methods=function(t){var e=[];for(var n in t)h.isFunction(t[n])&&e.push(n);return e.sort()},h.extend=function(t){if(!h.isObject(t))return t;for(var e,n,i=1,r=arguments.length;r>i;i++){e=arguments[i];for(n in e)u.call(e,n)&&(t[n]=e[n])}return t},h.pick=function(t,e,n){var i,r={};if(null==t)return r;if(h.isFunction(e)){e=p(e,n);for(i in t){var o=t[i];e(o,i,t)&&(r[i]=o)}}else{var l=a.apply([],s.call(arguments,1));t=new Object(t);for(var u=0,c=l.length;c>u;u++)i=l[u],i in t&&(r[i]=t[i])}return r},h.omit=function(t,e,n){if(h.isFunction(e))e=h.negate(e);else{var i=h.map(a.apply([],s.call(arguments,1)),String);e=function(t,e){return!h.contains(i,e)}}return h.pick(t,e,n)},h.defaults=function(t){if(!h.isObject(t))return t;for(var e=1,n=arguments.length;n>e;e++){var i=arguments[e];for(var r in i)void 0===t[r]&&(t[r]=i[r])}return t},h.clone=function(t){return h.isObject(t)?h.isArray(t)?t.slice():h.extend({},t):t},h.tap=function(t,e){return e(t),t};var b=function(t,e,n,i){if(t===e)return 0!==t||1/t===1/e;if(null==t||null==e)return t===e;t instanceof h&&(t=t._wrapped),e instanceof h&&(e=e._wrapped);var r=l.call(t);if(r!==l.call(e))return!1;switch(r){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!==+t?+e!==+e:0===+t?1/+t===1/e:+t===+e;case"[object Date]":case"[object Boolean]":return+t===+e}if("object"!=typeof t||"object"!=typeof e)return!1;for(var o=n.length;o--;)if(n[o]===t)return i[o]===e;var s=t.constructor,a=e.constructor;if(s!==a&&"constructor"in t&&"constructor"in e&&!(h.isFunction(s)&&s instanceof s&&h.isFunction(a)&&a instanceof a))return!1;n.push(t),i.push(e);var u,c;if("[object Array]"===r){if(u=t.length,c=u===e.length)for(;u--&&(c=b(t[u],e[u],n,i)););}else{var d,f=h.keys(t);if(u=f.length,c=h.keys(e).length===u)for(;u--&&(d=f[u],c=h.has(e,d)&&b(t[d],e[d],n,i)););}return n.pop(),i.pop(),c};h.isEqual=function(t,e){return b(t,e,[],[])},h.isEmpty=function(t){if(null==t)return!0;if(h.isArray(t)||h.isString(t)||h.isArguments(t))return 0===t.length;for(var e in t)if(h.has(t,e))return!1;return!0},h.isElement=function(t){return!(!t||1!==t.nodeType)},h.isArray=c||function(t){return"[object Array]"===l.call(t)},h.isObject=function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},h.each(["Arguments","Function","String","Number","Date","RegExp"],function(t){h["is"+t]=function(e){return l.call(e)==="[object "+t+"]"}}),h.isArguments(arguments)||(h.isArguments=function(t){return h.has(t,"callee")}),"function"!=typeof/./&&(h.isFunction=function(t){return"function"==typeof t||!1}),h.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},h.isNaN=function(t){return h.isNumber(t)&&t!==+t},h.isBoolean=function(t){return t===!0||t===!1||"[object Boolean]"===l.call(t)},h.isNull=function(t){return null===t},h.isUndefined=function(t){return void 0===t},h.has=function(t,e){return null!=t&&u.call(t,e)},h.noConflict=function(){return t._=e,this},h.identity=function(t){return t},h.constant=function(t){return function(){return t}},h.noop=function(){},h.property=function(t){return function(e){return e[t]}},h.matches=function(t){var e=h.pairs(t),n=e.length;return function(t){if(null==t)return!n;t=new Object(t);for(var i=0;n>i;i++){var r=e[i],o=r[0];if(r[1]!==t[o]||!(o in t))return!1}return!0}},h.times=function(t,e,n){var i=Array(Math.max(0,t));e=p(e,n,1);for(var r=0;t>r;r++)i[r]=e(r);return i},h.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},h.now=Date.now||function(){return(new Date).getTime()};var w={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},x=h.invert(w),_=function(t){var e=function(e){return t[e]},n="(?:"+h.keys(t).join("|")+")",i=RegExp(n),r=RegExp(n,"g");return function(t){return t=null==t?"":""+t,i.test(t)?t.replace(r,e):t}};h.escape=_(w),h.unescape=_(x),h.result=function(t,e){if(null==t)return void 0;var n=t[e];return h.isFunction(n)?t[e]():n};var T=0;h.uniqueId=function(t){var e=++T+"";return t?t+e:e},h.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var C=/(.)^/,k={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},S=/\\|'|\r|\n|\u2028|\u2029/g,E=function(t){return"\\"+k[t]};h.template=function(t,e,n){!e&&n&&(e=n),e=h.defaults({},e,h.templateSettings);var i=RegExp([(e.escape||C).source,(e.interpolate||C).source,(e.evaluate||C).source].join("|")+"|$","g"),r=0,o="__p+='";t.replace(i,function(e,n,i,s,a){return o+=t.slice(r,a).replace(S,E),r=a+e.length,n?o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":i?o+="'+\n((__t=("+i+"))==null?'':__t)+\n'":s&&(o+="';\n"+s+"\n__p+='"),e}),o+="';\n",e.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{var s=new Function(e.variable||"obj","_",o)}catch(a){throw a.source=o,a}var l=function(t){return s.call(this,t,h)},u=e.variable||"obj";return l.source="function("+u+"){\n"+o+"}",l},h.chain=function(t){var e=h(t);return e._chain=!0,e};var D=function(t){return this._chain?h(t).chain():t};h.mixin=function(t){h.each(h.functions(t),function(e){var n=h[e]=t[e];h.prototype[e]=function(){var t=[this._wrapped];return o.apply(t,arguments),D.call(this,n.apply(h,t))}})},h.mixin(h),h.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=n[t];h.prototype[t]=function(){var n=this._wrapped;return e.apply(n,arguments),"shift"!==t&&"splice"!==t||0!==n.length||delete n[0],D.call(this,n)}}),h.each(["concat","join","slice"],function(t){var e=n[t];h.prototype[t]=function(){return D.call(this,e.apply(this._wrapped,arguments))}}),h.prototype.value=function(){return this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return h})}.call(this),function(t,e){if("function"==typeof define&&define.amd)define(["underscore","jquery","exports"],function(n,i,r){t.Backbone=e(t,r,n,i)});else if("undefined"!=typeof exports){var n=require("underscore");e(t,exports,n)}else t.Backbone=e(t,{},t._,t.jQuery||t.Zepto||t.ender||t.$)}(this,function(t,e,n,i){{var r=t.Backbone,o=[],s=(o.push,o.slice);o.splice}e.VERSION="1.1.2",e.$=i,e.noConflict=function(){return t.Backbone=r,this},e.emulateHTTP=!1,e.emulateJSON=!1;var a=e.Events={on:function(t,e,n){if(!u(this,"on",t,[e,n])||!e)return this;this._events||(this._events={});var i=this._events[t]||(this._events[t]=[]);return i.push({callback:e,context:n,ctx:n||this}),this},once:function(t,e,i){if(!u(this,"once",t,[e,i])||!e)return this;var r=this,o=n.once(function(){r.off(t,o),e.apply(this,arguments)});return o._callback=e,this.on(t,o,i)},off:function(t,e,i){var r,o,s,a,l,c,d,f;if(!this._events||!u(this,"off",t,[e,i]))return this;if(!t&&!e&&!i)return this._events=void 0,this;for(a=t?[t]:n.keys(this._events),l=0,c=a.length;c>l;l++)if(t=a[l],s=this._events[t]){if(this._events[t]=r=[],e||i)for(d=0,f=s.length;f>d;d++)o=s[d],(e&&e!==o.callback&&e!==o.callback._callback||i&&i!==o.context)&&r.push(o);r.length||delete this._events[t]}return this},trigger:function(t){if(!this._events)return this;var e=s.call(arguments,1);if(!u(this,"trigger",t,e))return this;var n=this._events[t],i=this._events.all;return n&&c(n,e),i&&c(i,arguments),this},stopListening:function(t,e,i){var r=this._listeningTo;if(!r)return this;var o=!e&&!i;i||"object"!=typeof e||(i=this),t&&((r={})[t._listenId]=t);for(var s in r)t=r[s],t.off(e,i,this),(o||n.isEmpty(t._events))&&delete this._listeningTo[s];return this}},l=/\s+/,u=function(t,e,n,i){if(!n)return!0;if("object"==typeof n){for(var r in n)t[e].apply(t,[r,n[r]].concat(i));return!1}if(l.test(n)){for(var o=n.split(l),s=0,a=o.length;a>s;s++)t[e].apply(t,[o[s]].concat(i));return!1}return!0},c=function(t,e){var n,i=-1,r=t.length,o=e[0],s=e[1],a=e[2];switch(e.length){case 0:for(;++i<r;)(n=t[i]).callback.call(n.ctx);return;case 1:for(;++i<r;)(n=t[i]).callback.call(n.ctx,o);return;case 2:for(;++i<r;)(n=t[i]).callback.call(n.ctx,o,s);return;case 3:for(;++i<r;)(n=t[i]).callback.call(n.ctx,o,s,a);return;default:for(;++i<r;)(n=t[i]).callback.apply(n.ctx,e);return}},d={listenTo:"on",listenToOnce:"once"};n.each(d,function(t,e){a[e]=function(e,i,r){var o=this._listeningTo||(this._listeningTo={}),s=e._listenId||(e._listenId=n.uniqueId("l"));return o[s]=e,r||"object"!=typeof i||(r=this),e[t](i,r,this),this}}),a.bind=a.on,a.unbind=a.off,n.extend(e,a);var f=e.Model=function(t,e){var i=t||{};e||(e={}),this.cid=n.uniqueId("c"),this.attributes={},e.collection&&(this.collection=e.collection),e.parse&&(i=this.parse(i,e)||{}),i=n.defaults({},i,n.result(this,"defaults")),this.set(i,e),this.changed={},this.initialize.apply(this,arguments)};n.extend(f.prototype,a,{changed:null,validationError:null,idAttribute:"id",initialize:function(){},toJSON:function(t){return n.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return n.escape(this.get(t))},has:function(t){return null!=this.get(t)},set:function(t,e,i){var r,o,s,a,l,u,c,d;if(null==t)return this;if("object"==typeof t?(o=t,i=e):(o={})[t]=e,i||(i={}),!this._validate(o,i))return!1;s=i.unset,l=i.silent,a=[],u=this._changing,this._changing=!0,u||(this._previousAttributes=n.clone(this.attributes),this.changed={}),d=this.attributes,c=this._previousAttributes,this.idAttribute in o&&(this.id=o[this.idAttribute]);for(r in o)e=o[r],n.isEqual(d[r],e)||a.push(r),n.isEqual(c[r],e)?delete this.changed[r]:this.changed[r]=e,s?delete d[r]:d[r]=e;if(!l){a.length&&(this._pending=i);for(var f=0,h=a.length;h>f;f++)this.trigger("change:"+a[f],this,d[a[f]],i)}if(u)return this;if(!l)for(;this._pending;)i=this._pending,this._pending=!1,this.trigger("change",this,i);return this._pending=!1,this._changing=!1,this},unset:function(t,e){return this.set(t,void 0,n.extend({},e,{unset:!0}))},clear:function(t){var e={};for(var i in this.attributes)e[i]=void 0;return this.set(e,n.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!n.isEmpty(this.changed):n.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?n.clone(this.changed):!1;var e,i=!1,r=this._changing?this._previousAttributes:this.attributes;for(var o in t)n.isEqual(r[o],e=t[o])||((i||(i={}))[o]=e);return i},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return n.clone(this._previousAttributes)},fetch:function(t){t=t?n.clone(t):{},void 0===t.parse&&(t.parse=!0);var e=this,i=t.success;return t.success=function(n){return e.set(e.parse(n,t),t)?(i&&i(e,n,t),void e.trigger("sync",e,n,t)):!1},H(this,t),this.sync("read",this,t)},save:function(t,e,i){var r,o,s,a=this.attributes;if(null==t||"object"==typeof t?(r=t,i=e):(r={})[t]=e,i=n.extend({validate:!0},i),r&&!i.wait){if(!this.set(r,i))return!1}else if(!this._validate(r,i))return!1;r&&i.wait&&(this.attributes=n.extend({},a,r)),void 0===i.parse&&(i.parse=!0);var l=this,u=i.success;return i.success=function(t){l.attributes=a;var e=l.parse(t,i);return i.wait&&(e=n.extend(r||{},e)),n.isObject(e)&&!l.set(e,i)?!1:(u&&u(l,t,i),void l.trigger("sync",l,t,i))},H(this,i),o=this.isNew()?"create":i.patch?"patch":"update","patch"===o&&(i.attrs=r),s=this.sync(o,this,i),r&&i.wait&&(this.attributes=a),s},destroy:function(t){t=t?n.clone(t):{};var e=this,i=t.success,r=function(){e.trigger("destroy",e,e.collection,t)};if(t.success=function(n){(t.wait||e.isNew())&&r(),i&&i(e,n,t),e.isNew()||e.trigger("sync",e,n,t)},this.isNew())return t.success(),!1;H(this,t);var o=this.sync("delete",this,t);return t.wait||r(),o},url:function(){var t=n.result(this,"urlRoot")||n.result(this.collection,"url")||I();return this.isNew()?t:t.replace(/([^\/])$/,"$1/")+encodeURIComponent(this.id)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},n.extend(t||{},{validate:!0}))},_validate:function(t,e){if(!e.validate||!this.validate)return!0;t=n.extend({},this.attributes,t);var i=this.validationError=this.validate(t,e)||null;return i?(this.trigger("invalid",this,i,n.extend(e,{validationError:i})),!1):!0}});var h=["keys","values","pairs","invert","pick","omit"];n.each(h,function(t){f.prototype[t]=function(){var e=s.call(arguments);return e.unshift(this.attributes),n[t].apply(n,e)}});var p=e.Collection=function(t,e){e||(e={}),e.model&&(this.model=e.model),void 0!==e.comparator&&(this.comparator=e.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,n.extend({silent:!0},e))},m={add:!0,remove:!0,merge:!0},g={add:!0,remove:!1};n.extend(p.prototype,a,{model:f,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,n.extend({merge:!1},e,g))},remove:function(t,e){var i=!n.isArray(t);t=i?[t]:n.clone(t),e||(e={});var r,o,s,a;for(r=0,o=t.length;o>r;r++)a=t[r]=this.get(t[r]),a&&(delete this._byId[a.id],delete this._byId[a.cid],s=this.indexOf(a),this.models.splice(s,1),this.length--,e.silent||(e.index=s,a.trigger("remove",a,this,e)),this._removeReference(a,e));return i?t[0]:t},set:function(t,e){e=n.defaults({},e,m),e.parse&&(t=this.parse(t,e));var i=!n.isArray(t);t=i?t?[t]:[]:n.clone(t);var r,o,s,a,l,u,c,d=e.at,h=this.model,p=this.comparator&&null==d&&e.sort!==!1,g=n.isString(this.comparator)?this.comparator:null,v=[],y=[],b={},w=e.add,x=e.merge,_=e.remove,T=!p&&w&&_?[]:!1;for(r=0,o=t.length;o>r;r++){if(l=t[r]||{},s=l instanceof f?a=l:l[h.prototype.idAttribute||"id"],u=this.get(s))_&&(b[u.cid]=!0),x&&(l=l===a?a.attributes:l,e.parse&&(l=u.parse(l,e)),u.set(l,e),p&&!c&&u.hasChanged(g)&&(c=!0)),t[r]=u;else if(w){if(a=t[r]=this._prepareModel(l,e),!a)continue;v.push(a),this._addReference(a,e)}a=u||a,!T||!a.isNew()&&b[a.id]||T.push(a),b[a.id]=!0}if(_){for(r=0,o=this.length;o>r;++r)b[(a=this.models[r]).cid]||y.push(a);y.length&&this.remove(y,e)}if(v.length||T&&T.length)if(p&&(c=!0),this.length+=v.length,null!=d)for(r=0,o=v.length;o>r;r++)this.models.splice(d+r,0,v[r]);else{T&&(this.models.length=0);var C=T||v;for(r=0,o=C.length;o>r;r++)this.models.push(C[r])}if(c&&this.sort({silent:!0}),!e.silent){for(r=0,o=v.length;o>r;r++)(a=v[r]).trigger("add",a,this,e);(c||T&&T.length)&&this.trigger("sort",this,e)}return i?t[0]:t},reset:function(t,e){e||(e={});for(var i=0,r=this.models.length;r>i;i++)this._removeReference(this.models[i],e);return e.previousModels=this.models,this._reset(),t=this.add(t,n.extend({silent:!0},e)),e.silent||this.trigger("reset",this,e),t},push:function(t,e){return this.add(t,n.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);return this.remove(e,t),e},unshift:function(t,e){return this.add(t,n.extend({at:0},e))},shift:function(t){var e=this.at(0);return this.remove(e,t),e},slice:function(){return s.apply(this.models,arguments)},get:function(t){return null==t?void 0:this._byId[t]||this._byId[t.id]||this._byId[t.cid]},at:function(t){return this.models[t]},where:function(t,e){return n.isEmpty(t)?e?void 0:[]:this[e?"find":"filter"](function(e){for(var n in t)if(t[n]!==e.get(n))return!1;return!0})},findWhere:function(t){return this.where(t,!0)},sort:function(t){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");return t||(t={}),n.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(n.bind(this.comparator,this)),t.silent||this.trigger("sort",this,t),this},pluck:function(t){return n.invoke(this.models,"get",t)},fetch:function(t){t=t?n.clone(t):{},void 0===t.parse&&(t.parse=!0);var e=t.success,i=this;return t.success=function(n){var r=t.reset?"reset":"set";i[r](n,t),e&&e(i,n,t),i.trigger("sync",i,n,t)},H(this,t),this.sync("read",this,t)},create:function(t,e){if(e=e?n.clone(e):{},!(t=this._prepareModel(t,e)))return!1;e.wait||this.add(t,e);var i=this,r=e.success;return e.success=function(t,n){e.wait&&i.add(t,e),r&&r(t,n,e)},t.save(null,e),t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,e){if(t instanceof f)return t;e=e?n.clone(e):{},e.collection=this;var i=new this.model(t,e);return i.validationError?(this.trigger("invalid",this,i.validationError,e),!1):i},_addReference:function(t,e){this._byId[t.cid]=t,null!=t.id&&(this._byId[t.id]=t),t.collection||(t.collection=this),t.on("all",this._onModelEvent,this)},_removeReference:function(t,e){this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,n,i){("add"!==t&&"remove"!==t||n===this)&&("destroy"===t&&this.remove(e,i),e&&t==="change:"+e.idAttribute&&(delete this._byId[e.previous(e.idAttribute)],null!=e.id&&(this._byId[e.id]=e)),this.trigger.apply(this,arguments))}});var v=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","difference","indexOf","shuffle","lastIndexOf","isEmpty","chain","sample"];n.each(v,function(t){p.prototype[t]=function(){var e=s.call(arguments);return e.unshift(this.models),n[t].apply(n,e)}});var y=["groupBy","countBy","sortBy","indexBy"];n.each(y,function(t){p.prototype[t]=function(e,i){var r=n.isFunction(e)?e:function(t){return t.get(e)};return n[t](this.models,r,i)}});var b=e.View=function(t){this.cid=n.uniqueId("view"),t||(t={}),n.extend(this,n.pick(t,x)),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},w=/^(\S+)\s*(.*)$/,x=["model","collection","el","id","attributes","className","tagName","events"];n.extend(b.prototype,a,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(t,n){return this.$el&&this.undelegateEvents(),this.$el=t instanceof e.$?t:e.$(t),this.el=this.$el[0],n!==!1&&this.delegateEvents(),this},delegateEvents:function(t){if(!t&&!(t=n.result(this,"events")))return this;this.undelegateEvents();for(var e in t){var i=t[e];if(n.isFunction(i)||(i=this[t[e]]),i){var r=e.match(w),o=r[1],s=r[2];i=n.bind(i,this),o+=".delegateEvents"+this.cid,""===s?this.$el.on(o,i):this.$el.on(o,s,i)}}return this},undelegateEvents:function(){return this.$el.off(".delegateEvents"+this.cid),this},_ensureElement:function(){if(this.el)this.setElement(n.result(this,"el"),!1);else{var t=n.extend({},n.result(this,"attributes"));this.id&&(t.id=n.result(this,"id")),this.className&&(t["class"]=n.result(this,"className"));var i=e.$("<"+n.result(this,"tagName")+">").attr(t);this.setElement(i,!1)}}}),e.sync=function(t,i,r){var o=T[t];n.defaults(r||(r={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var s={type:o,dataType:"json"};if(r.url||(s.url=n.result(i,"url")||I()),null!=r.data||!i||"create"!==t&&"update"!==t&&"patch"!==t||(s.contentType="application/json",s.data=JSON.stringify(r.attrs||i.toJSON(r))),r.emulateJSON&&(s.contentType="application/x-www-form-urlencoded",s.data=s.data?{model:s.data}:{}),r.emulateHTTP&&("PUT"===o||"DELETE"===o||"PATCH"===o)){
s.type="POST",r.emulateJSON&&(s.data._method=o);var a=r.beforeSend;r.beforeSend=function(t){return t.setRequestHeader("X-HTTP-Method-Override",o),a?a.apply(this,arguments):void 0}}"GET"===s.type||r.emulateJSON||(s.processData=!1),"PATCH"===s.type&&_&&(s.xhr=function(){return new ActiveXObject("Microsoft.XMLHTTP")});var l=r.xhr=e.ajax(n.extend(s,r));return i.trigger("request",i,l,r),l};var _=!("undefined"==typeof window||!window.ActiveXObject||window.XMLHttpRequest&&(new XMLHttpRequest).dispatchEvent),T={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var C=e.Router=function(t){t||(t={}),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},k=/\((.*?)\)/g,S=/(\(\?)?:\w+/g,E=/\*\w+/g,D=/[\-{}\[\]+?.,\\\^$|#\s]/g;n.extend(C.prototype,a,{initialize:function(){},route:function(t,i,r){n.isRegExp(t)||(t=this._routeToRegExp(t)),n.isFunction(i)&&(r=i,i=""),r||(r=this[i]);var o=this;return e.history.route(t,function(n){var s=o._extractParameters(t,n);o.execute(r,s),o.trigger.apply(o,["route:"+i].concat(s)),o.trigger("route",i,s),e.history.trigger("route",o,i,s)}),this},execute:function(t,e){t&&t.apply(this,e)},navigate:function(t,n){return e.history.navigate(t,n),this},_bindRoutes:function(){if(this.routes){this.routes=n.result(this,"routes");for(var t,e=n.keys(this.routes);null!=(t=e.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(D,"\\$&").replace(k,"(?:$1)?").replace(S,function(t,e){return e?t:"([^/?]+)"}).replace(E,"([^?]*?)"),new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var i=t.exec(e).slice(1);return n.map(i,function(t,e){return e===i.length-1?t||null:t?decodeURIComponent(t):null})}});var N=e.History=function(){this.handlers=[],n.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},A=/^[#\/]|\s+$/g,M=/^\/+|\/+$/g,$=/msie [\w.]+/,O=/\/$/,j=/#.*$/;N.started=!1,n.extend(N.prototype,a,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,"$&/")===this.root},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getFragment:function(t,e){if(null==t)if(this._hasPushState||!this._wantsHashChange||e){t=decodeURI(this.location.pathname+this.location.search);var n=this.root.replace(O,"");t.indexOf(n)||(t=t.slice(n.length))}else t=this.getHash();return t.replace(A,"")},start:function(t){if(N.started)throw new Error("Backbone.history has already been started");N.started=!0,this.options=n.extend({root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var i=this.getFragment(),r=document.documentMode,o=$.exec(navigator.userAgent.toLowerCase())&&(!r||7>=r);if(this.root=("/"+this.root+"/").replace(M,"/"),o&&this._wantsHashChange){var s=e.$('<iframe src="javascript:0" tabindex="-1">');this.iframe=s.hide().appendTo("body")[0].contentWindow,this.navigate(i)}this._hasPushState?e.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!o?e.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=i;var a=this.location;if(this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot())return this.fragment=this.getFragment(null,!0),this.location.replace(this.root+"#"+this.fragment),!0;this._hasPushState&&this.atRoot()&&a.hash&&(this.fragment=this.getHash().replace(A,""),this.history.replaceState({},document.title,this.root+this.fragment))}return this.options.silent?void 0:this.loadUrl()},stop:function(){e.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),N.started=!1},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();return e===this.fragment&&this.iframe&&(e=this.getFragment(this.getHash(this.iframe))),e===this.fragment?!1:(this.iframe&&this.navigate(e),void this.loadUrl())},loadUrl:function(t){return t=this.fragment=this.getFragment(t),n.any(this.handlers,function(e){return e.route.test(t)?(e.callback(t),!0):void 0})},navigate:function(t,e){if(!N.started)return!1;e&&e!==!0||(e={trigger:!!e});var n=this.root+(t=this.getFragment(t||""));if(t=t.replace(j,""),this.fragment!==t){if(this.fragment=t,""===t&&"/"!==n&&(n=n.slice(0,-1)),this._hasPushState)this.history[e.replace?"replaceState":"pushState"]({},document.title,n);else{if(!this._wantsHashChange)return this.location.assign(n);this._updateHash(this.location,t,e.replace),this.iframe&&t!==this.getFragment(this.getHash(this.iframe))&&(e.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,t,e.replace))}return e.trigger?this.loadUrl(t):void 0}},_updateHash:function(t,e,n){if(n){var i=t.href.replace(/(javascript:|#).*$/,"");t.replace(i+"#"+e)}else t.hash="#"+e}}),e.history=new N;var L=function(t,e){var i,r=this;i=t&&n.has(t,"constructor")?t.constructor:function(){return r.apply(this,arguments)},n.extend(i,r,e);var o=function(){this.constructor=i};return o.prototype=r.prototype,i.prototype=new o,t&&n.extend(i.prototype,t),i.__super__=r.prototype,i};f.extend=p.extend=C.extend=b.extend=N.extend=L;var I=function(){throw new Error('A "url" property or function must be specified')},H=function(t,e){var n=e.error;e.error=function(i){n&&n(t,i,e),t.trigger("error",t,i,e)}};return e}),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher")}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,i=this;t(this).one("bsTransitionEnd",function(){n=!0});var r=function(){n||t(i).trigger(t.support.transition.end)};return setTimeout(r,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),r=n.data("bs.alert");r||n.data("bs.alert",r=new i(this)),"string"==typeof e&&r[e].call(n)})}var n='[data-dismiss="alert"]',i=function(e){t(e).on("click",n,this.close)};i.VERSION="3.3.1",i.TRANSITION_DURATION=150,i.prototype.close=function(e){function n(){s.detach().trigger("closed.bs.alert").remove()}var r=t(this),o=r.attr("data-target");o||(o=r.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,""));var s=t(o);e&&e.preventDefault(),s.length||(s=r.closest(".alert")),s.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",n).emulateTransitionEnd(i.TRANSITION_DURATION):n())};var r=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=i,t.fn.alert.noConflict=function(){return t.fn.alert=r,this},t(document).on("click.bs.alert.data-api",n,i.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.button"),o="object"==typeof e&&e;r||i.data("bs.button",r=new n(this,o)),"toggle"==e?r.toggle():e&&r.setState(e)})}var n=function(e,i){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,i),this.isLoading=!1};n.VERSION="3.3.1",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",i=this.$element,r=i.is("input")?"val":"html",o=i.data();e+="Text",null==o.resetText&&i.data("resetText",i[r]()),setTimeout(t.proxy(function(){i[r](null==o[e]?this.options[e]:o[e]),"loadingText"==e?(this.isLoading=!0,i.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,i.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")&&(n.prop("checked")&&this.$element.hasClass("active")?t=!1:e.find(".active").removeClass("active")),t&&n.prop("checked",!this.$element.hasClass("active")).trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active"));t&&this.$element.toggleClass("active")};var i=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=i,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var i=t(n.target);i.hasClass("btn")||(i=i.closest(".btn")),e.call(i,"toggle"),n.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.carousel"),o=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e),s="string"==typeof e?e:o.slide;r||i.data("bs.carousel",r=new n(this,o)),"number"==typeof e?r.to(e):s?r[s]():o.interval&&r.pause().cycle()})}var n=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=this.sliding=this.interval=this.$active=this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.3.1",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,e){var n="prev"==t?-1:1,i=this.getItemIndex(e),r=(i+n)%this.$items.length;return this.$items.eq(r)},n.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));return t>this.$items.length-1||0>t?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(e,i){var r=this.$element.find(".item.active"),o=i||this.getItemForDirection(e,r),s=this.interval,a="next"==e?"left":"right",l="next"==e?"first":"last",u=this;if(!o.length){if(!this.options.wrap)return;o=this.$element.find(".item")[l]()}if(o.hasClass("active"))return this.sliding=!1;var c=o[0],d=t.Event("slide.bs.carousel",{relatedTarget:c,direction:a});if(this.$element.trigger(d),!d.isDefaultPrevented()){if(this.sliding=!0,s&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=t(this.$indicators.children()[this.getItemIndex(o)]);f&&f.addClass("active")}var h=t.Event("slid.bs.carousel",{relatedTarget:c,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(o.addClass(e),o[0].offsetWidth,r.addClass(a),o.addClass(a),r.one("bsTransitionEnd",function(){o.removeClass([e,a].join(" ")).addClass("active"),r.removeClass(["active",a].join(" ")),u.sliding=!1,setTimeout(function(){u.$element.trigger(h)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(r.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(h)),s&&this.cycle(),this}};var i=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=i,this};var r=function(n){var i,r=t(this),o=t(r.attr("data-target")||(i=r.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var s=t.extend({},o.data(),r.data()),a=r.attr("data-slide-to");a&&(s.interval=!1),e.call(o,s),a&&o.data("bs.carousel").to(a),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",r).on("click.bs.carousel.data-api","[data-slide-to]",r),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),+function(t){"use strict";function e(e){var n,i=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(i)}function n(e){return this.each(function(){var n=t(this),r=n.data("bs.collapse"),o=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);!r&&o.toggle&&"show"==e&&(o.toggle=!1),r||n.data("bs.collapse",r=new i(this,o)),"string"==typeof e&&r[e]()})}var i=function(e,n){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,n),this.$trigger=t(this.options.trigger).filter('[href="#'+e.id+'"], [data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};i.VERSION="3.3.1",i.TRANSITION_DURATION=350,i.DEFAULTS={toggle:!0,trigger:'[data-toggle="collapse"]'},i.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},i.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,r=this.$parent&&this.$parent.find("> .panel").children(".in, .collapsing");if(!(r&&r.length&&(e=r.data("bs.collapse"),e&&e.transitioning))){var o=t.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){r&&r.length&&(n.call(r,"hide"),e||r.data("bs.collapse",null));var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(i.TRANSITION_DURATION)[s](this.$element[0][l])}}}},i.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var r=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[n](0).one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(i.TRANSITION_DURATION):r.call(this)}}},i.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},i.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,i){var r=t(i);this.addAriaAndCollapsedClass(e(r),r)},this)).end()},i.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var r=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=i,t.fn.collapse.noConflict=function(){return t.fn.collapse=r,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(i){var r=t(this);r.attr("data-target")||i.preventDefault();var o=e(r),s=o.data("bs.collapse"),a=s?"toggle":t.extend({},r.data(),{trigger:this});n.call(o,a)})}(jQuery),+function(t){"use strict";function e(e){e&&3===e.which||(t(r).remove(),t(o).each(function(){var i=t(this),r=n(i),o={relatedTarget:this};r.hasClass("open")&&(r.trigger(e=t.Event("hide.bs.dropdown",o)),e.isDefaultPrevented()||(i.attr("aria-expanded","false"),r.removeClass("open").trigger("hidden.bs.dropdown",o)))}))}function n(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var i=n&&t(n);return i&&i.length?i:e.parent()}function i(e){return this.each(function(){var n=t(this),i=n.data("bs.dropdown");i||n.data("bs.dropdown",i=new s(this)),"string"==typeof e&&i[e].call(n)})}var r=".dropdown-backdrop",o='[data-toggle="dropdown"]',s=function(e){t(e).on("click.bs.dropdown",this.toggle)};s.VERSION="3.3.1",s.prototype.toggle=function(i){var r=t(this);if(!r.is(".disabled, :disabled")){var o=n(r),s=o.hasClass("open");if(e(),!s){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t('<div class="dropdown-backdrop"/>').insertAfter(t(this)).on("click",e);var a={relatedTarget:this};if(o.trigger(i=t.Event("show.bs.dropdown",a)),i.isDefaultPrevented())return;r.trigger("focus").attr("aria-expanded","true"),o.toggleClass("open").trigger("shown.bs.dropdown",a)}return!1}},s.prototype.keydown=function(e){if(/(38|40|27|32)/.test(e.which)&&!/input|textarea/i.test(e.target.tagName)){var i=t(this);if(e.preventDefault(),e.stopPropagation(),!i.is(".disabled, :disabled")){var r=n(i),s=r.hasClass("open");if(!s&&27!=e.which||s&&27==e.which)return 27==e.which&&r.find(o).trigger("focus"),i.trigger("click");var a=" li:not(.divider):visible a",l=r.find('[role="menu"]'+a+', [role="listbox"]'+a);if(l.length){var u=l.index(e.target);38==e.which&&u>0&&u--,40==e.which&&u<l.length-1&&u++,~u||(u=0),l.eq(u).trigger("focus")}}}};var a=t.fn.dropdown;t.fn.dropdown=i,t.fn.dropdown.Constructor=s,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=a,this},t(document).on("click.bs.dropdown.data-api",e).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",o,s.prototype.toggle).on("keydown.bs.dropdown.data-api",o,s.prototype.keydown).on("keydown.bs.dropdown.data-api",'[role="menu"]',s.prototype.keydown).on("keydown.bs.dropdown.data-api",'[role="listbox"]',s.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,i){return this.each(function(){var r=t(this),o=r.data("bs.modal"),s=t.extend({},n.DEFAULTS,r.data(),"object"==typeof e&&e);o||r.data("bs.modal",o=new n(this,s)),"string"==typeof e?o[e](i):s.show&&o.show(i)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.1",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var i=this,r=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(r),this.isShown||r.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.backdrop(function(){var r=t.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.options.backdrop&&i.adjustBackdrop(),i.adjustDialog(),r&&i.$element[0].offsetWidth,i.$element.addClass("in").attr("aria-hidden",!1),i.enforceFocus();var o=t.Event("shown.bs.modal",{relatedTarget:e});r?i.$element.find(".modal-dialog").one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(n.TRANSITION_DURATION):i.$element.trigger("focus").trigger(o)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var i=this,r=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=t.support.transition&&r;if(this.$backdrop=t('<div class="modal-backdrop '+r+'" />').prependTo(this.$element).on("click.dismiss.bs.modal",t.proxy(function(t){t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;o?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var s=function(){i.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",s).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):s()}else e&&e()},n.prototype.handleUpdate=function(){this.options.backdrop&&this.adjustBackdrop(),this.adjustDialog()},n.prototype.adjustBackdrop=function(){this.$backdrop.css("height",0).css("height",this.$element[0].scrollHeight)},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){this.bodyIsOverflowing=document.body.scrollHeight>document.documentElement.clientHeight,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var i=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=i,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var i=t(this),r=i.attr("href"),o=t(i.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,"")),s=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(r)&&r},o.data(),i.data());i.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})}),e.call(o,s,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.tooltip"),o="object"==typeof e&&e,s=o&&o.selector;(r||"destroy"!=e)&&(s?(r||i.data("bs.tooltip",r={}),r[s]||(r[s]=new n(this,o))):r||i.data("bs.tooltip",r=new n(this,o)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",t,e)};n.VERSION="3.3.1",n.TRANSITION_DURATION=150,n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,i){this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(i),this.$viewport=this.options.viewport&&t(this.options.viewport.selector||this.options.viewport);for(var r=this.options.trigger.split(" "),o=r.length;o--;){var s=r[o];if("click"==s)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=s){var a="hover"==s?"mouseenter":"focusin",l="hover"==s?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,i){n[t]!=i&&(e[t]=i)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n&&n.$tip&&n.$tip.is(":visible")?void(n.hoverState="in"):(n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?void(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)):n.show())},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?void(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)):n.hide()},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var i=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!i)return;var r=this,o=this.tip(),s=this.getUID(this.type);this.setContent(),o.attr("id",s),this.$element.attr("aria-describedby",s),this.options.animation&&o.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,u=l.test(a);u&&(a=a.replace(l,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element);var c=this.getPosition(),d=o[0].offsetWidth,f=o[0].offsetHeight;if(u){var h=a,p=this.options.container?t(this.options.container):this.$element.parent(),m=this.getPosition(p);a="bottom"==a&&c.bottom+f>m.bottom?"top":"top"==a&&c.top-f<m.top?"bottom":"right"==a&&c.right+d>m.width?"left":"left"==a&&c.left-d<m.left?"right":a,o.removeClass(h).addClass(a)}var g=this.getCalculatedOffset(a,c,d,f);this.applyPlacement(g,a);var v=function(){var t=r.hoverState;r.$element.trigger("shown.bs."+r.type),r.hoverState=null,"out"==t&&r.leave(r)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",v).emulateTransitionEnd(n.TRANSITION_DURATION):v()}},n.prototype.applyPlacement=function(e,n){var i=this.tip(),r=i[0].offsetWidth,o=i[0].offsetHeight,s=parseInt(i.css("margin-top"),10),a=parseInt(i.css("margin-left"),10);isNaN(s)&&(s=0),isNaN(a)&&(a=0),e.top=e.top+s,e.left=e.left+a,t.offset.setOffset(i[0],t.extend({using:function(t){i.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),i.addClass("in");var l=i[0].offsetWidth,u=i[0].offsetHeight;"top"==n&&u!=o&&(e.top=e.top+o-u);var c=this.getViewportAdjustedDelta(n,e,l,u);c.left?e.left+=c.left:e.top+=c.top;var d=/top|bottom/.test(n),f=d?2*c.left-r+l:2*c.top-o+u,h=d?"offsetWidth":"offsetHeight";i.offset(e),this.replaceArrow(f,i[0][h],d)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(e){function i(){"in"!=r.hoverState&&o.detach(),r.$element.removeAttr("aria-describedby").trigger("hidden.bs."+r.type),e&&e()}var r=this,o=this.tip(),s=t.Event("hide.bs."+this.type);return this.$element.trigger(s),s.isDefaultPrevented()?void 0:(o.removeClass("in"),t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",i).emulateTransitionEnd(n.TRANSITION_DURATION):i(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],i="BODY"==n.tagName,r=n.getBoundingClientRect();null==r.width&&(r=t.extend({},r,{width:r.right-r.left,height:r.bottom-r.top}));var o=i?{top:0,left:0}:e.offset(),s={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},a=i?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},r,s,a,o)},n.prototype.getCalculatedOffset=function(t,e,n,i){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-i,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-i/2,left:e.left-n}:{top:e.top+e.height/2-i/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,i){var r={top:0,left:0};if(!this.$viewport)return r;var o=this.options.viewport&&this.options.viewport.padding||0,s=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-o-s.scroll,l=e.top+o-s.scroll+i;a<s.top?r.top=s.top-a:l>s.top+s.height&&(r.top=s.top+s.height-l)}else{var u=e.left-o,c=e.left+o+n;u<s.left?r.left=s.left-u:c>s.width&&(r.left=s.left+s.width-c)}return r},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){return this.$tip=this.$tip||t(this.options.template)},n.prototype.arrow=function(){
return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type)})};var i=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=i,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.popover"),o="object"==typeof e&&e,s=o&&o.selector;(r||"destroy"!=e)&&(s?(r||i.data("bs.popover",r={}),r[s]||(r[s]=new n(this,o))):r||i.data("bs.popover",r=new n(this,o)),"string"==typeof e&&r[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.3.1",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},n.prototype.tip=function(){return this.$tip||(this.$tip=t(this.options.template)),this.$tip};var i=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=i,this}}(jQuery),+function(t){"use strict";function e(n,i){var r=t.proxy(this.process,this);this.$body=t("body"),this.$scrollElement=t(t(n).is("body")?window:n),this.options=t.extend({},e.DEFAULTS,i),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",r),this.refresh(),this.process()}function n(n){return this.each(function(){var i=t(this),r=i.data("bs.scrollspy"),o="object"==typeof n&&n;r||i.data("bs.scrollspy",r=new e(this,o)),"string"==typeof n&&r[n]()})}e.VERSION="3.3.1",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e="offset",n=0;t.isWindow(this.$scrollElement[0])||(e="position",n=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var i=this;this.$body.find(this.selector).map(function(){var i=t(this),r=i.data("target")||i.attr("href"),o=/^#./.test(r)&&t(r);return o&&o.length&&o.is(":visible")&&[[o[e]().top+n,r]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){i.offsets.push(this[0]),i.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),r=this.offsets,o=this.targets,s=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=i)return s!=(t=o[o.length-1])&&this.activate(t);if(s&&e<r[0])return this.activeTarget=null,this.clear();for(t=r.length;t--;)s!=o[t]&&e>=r[t]&&(!r[t+1]||e<=r[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',i=t(n).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active")),i.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var i=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=i,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.tab");r||i.data("bs.tab",r=new n(this)),"string"==typeof e&&r[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.1",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),i=e.data("target");if(i||(i=e.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var r=n.find(".active:last a"),o=t.Event("hide.bs.tab",{relatedTarget:e[0]}),s=t.Event("show.bs.tab",{relatedTarget:r[0]});if(r.trigger(o),e.trigger(s),!s.isDefaultPrevented()&&!o.isDefaultPrevented()){var a=t(i);this.activate(e.closest("li"),n),this.activate(a,a.parent(),function(){r.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:r[0]})})}}},n.prototype.activate=function(e,i,r){function o(){s.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),a?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu")&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),r&&r()}var s=i.find("> .active"),a=r&&t.support.transition&&(s.length&&s.hasClass("fade")||!!i.find("> .fade").length);s.length&&a?s.one("bsTransitionEnd",o).emulateTransitionEnd(n.TRANSITION_DURATION):o(),s.removeClass("in")};var i=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=i,this};var r=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',r).on("click.bs.tab.data-api",'[data-toggle="pill"]',r)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),r=i.data("bs.affix"),o="object"==typeof e&&e;r||i.data("bs.affix",r=new n(this,o)),"string"==typeof e&&r[e]()})}var n=function(e,i){this.options=t.extend({},n.DEFAULTS,i),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.1",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,i){var r=this.$target.scrollTop(),o=this.$element.offset(),s=this.$target.height();if(null!=n&&"top"==this.affixed)return n>r?"top":!1;if("bottom"==this.affixed)return null!=n?r+this.unpin<=o.top?!1:"bottom":t-i>=r+s?!1:"bottom";var a=null==this.affixed,l=a?r:o.top,u=a?s:e;return null!=n&&n>=l?"top":null!=i&&l+u>=t-i?"bottom":!1},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),i=this.options.offset,r=i.top,o=i.bottom,s=t("body").height();"object"!=typeof i&&(o=r=i),"function"==typeof r&&(r=i.top(this.$element)),"function"==typeof o&&(o=i.bottom(this.$element));var a=this.getState(s,e,r,o);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var l="affix"+(a?"-"+a:""),u=t.Event(l+".bs.affix");if(this.$element.trigger(u),u.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:s-e-o})}};var i=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=i,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),i=n.data();i.offset=i.offset||{},null!=i.offsetBottom&&(i.offset.bottom=i.offsetBottom),null!=i.offsetTop&&(i.offset.top=i.offsetTop),e.call(n,i)})})}(jQuery),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.moment=e()}(this,function(){"use strict";function t(){return En.apply(null,arguments)}function e(t){En=t}function n(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function i(t){return"[object Array]"===Object.prototype.toString.call(t)}function r(t){return"[object Date]"===Object.prototype.toString.call(t)||t instanceof Date}function o(t,e){var n,i=[];for(n=0;n<t.length;++n)i.push(e(t[n],n));return i}function s(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function a(t,e){for(var n in e)s(e,n)&&(t[n]=e[n]);return s(e,"toString")&&(t.toString=e.toString),s(e,"valueOf")&&(t.valueOf=e.valueOf),t}function l(t,e,n,i){return Ct(t,e,n,i,!0).utc()}function u(t){return null==t._isValid&&(t._isValid=!isNaN(t._d.getTime())&&t._pf.overflow<0&&!t._pf.empty&&!t._pf.invalidMonth&&!t._pf.nullInput&&!t._pf.invalidFormat&&!t._pf.userInvalidated,t._strict&&(t._isValid=t._isValid&&0===t._pf.charsLeftOver&&0===t._pf.unusedTokens.length&&void 0===t._pf.bigHour)),t._isValid}function c(t){var e=l(0/0);return null!=t?a(e._pf,t):e._pf.userInvalidated=!0,e}function d(t,e){var n,i,r;if("undefined"!=typeof e._isAMomentObject&&(t._isAMomentObject=e._isAMomentObject),"undefined"!=typeof e._i&&(t._i=e._i),"undefined"!=typeof e._f&&(t._f=e._f),"undefined"!=typeof e._l&&(t._l=e._l),"undefined"!=typeof e._strict&&(t._strict=e._strict),"undefined"!=typeof e._tzm&&(t._tzm=e._tzm),"undefined"!=typeof e._isUTC&&(t._isUTC=e._isUTC),"undefined"!=typeof e._offset&&(t._offset=e._offset),"undefined"!=typeof e._pf&&(t._pf=e._pf),"undefined"!=typeof e._locale&&(t._locale=e._locale),Nn.length>0)for(n in Nn)i=Nn[n],r=e[i],"undefined"!=typeof r&&(t[i]=r);return t}function f(e){d(this,e),this._d=new Date(+e._d),An===!1&&(An=!0,t.updateOffset(this),An=!1)}function h(t){return t instanceof f||null!=t&&s(t,"_isAMomentObject")}function p(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=e>=0?Math.floor(e):Math.ceil(e)),n}function m(t,e,n){var i,r=Math.min(t.length,e.length),o=Math.abs(t.length-e.length),s=0;for(i=0;r>i;i++)(n&&t[i]!==e[i]||!n&&p(t[i])!==p(e[i]))&&s++;return s+o}function g(){}function v(t){return t?t.toLowerCase().replace("_","-"):t}function y(t){for(var e,n,i,r,o=0;o<t.length;){for(r=v(t[o]).split("-"),e=r.length,n=v(t[o+1]),n=n?n.split("-"):null;e>0;){if(i=b(r.slice(0,e).join("-")))return i;if(n&&n.length>=e&&m(r,n,!0)>=e-1)break;e--}o++}return null}function b(t){var e=null;if(!Mn[t]&&"undefined"!=typeof module&&module&&module.exports)try{e=Dn._abbr,require("./locale/"+t),w(e)}catch(n){}return Mn[t]}function w(t,e){var n;return t&&(n="undefined"==typeof e?_(t):x(t,e),n&&(Dn=n)),Dn._abbr}function x(t,e){return null!==e?(e.abbr=t,Mn[t]||(Mn[t]=new g),Mn[t].set(e),w(t),Mn[t]):(delete Mn[t],null)}function _(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return Dn;if(!i(t)){if(e=b(t))return e;t=[t]}return y(t)}function T(t,e){var n=t.toLowerCase();$n[n]=$n[n+"s"]=$n[e]=t}function C(t){return"string"==typeof t?$n[t]||$n[t.toLowerCase()]:void 0}function k(t){var e,n,i={};for(n in t)s(t,n)&&(e=C(n),e&&(i[e]=t[n]));return i}function S(e,n){return function(i){return null!=i?(D(this,e,i),t.updateOffset(this,n),this):E(this,e)}}function E(t,e){return t._d["get"+(t._isUTC?"UTC":"")+e]()}function D(t,e,n){return t._d["set"+(t._isUTC?"UTC":"")+e](n)}function N(t,e){var n;if("object"==typeof t)for(n in t)this.set(n,t[n]);else if(t=C(t),"function"==typeof this[t])return this[t](e);return this}function A(t,e,n){for(var i=""+Math.abs(t),r=t>=0;i.length<e;)i="0"+i;return(r?n?"+":"":"-")+i}function M(t,e,n,i){var r=i;"string"==typeof i&&(r=function(){return this[i]()}),t&&(In[t]=r),e&&(In[e[0]]=function(){return A(r.apply(this,arguments),e[1],e[2])}),n&&(In[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),t)})}function $(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function O(t){var e,n,i=t.match(On);for(e=0,n=i.length;n>e;e++)i[e]=In[i[e]]?In[i[e]]:$(i[e]);return function(r){var o="";for(e=0;n>e;e++)o+=i[e]instanceof Function?i[e].call(r,t):i[e];return o}}function j(t,e){return t.isValid()?(e=L(e,t.localeData()),Ln[e]||(Ln[e]=O(e)),Ln[e](t)):t.localeData().invalidDate()}function L(t,e){function n(t){return e.longDateFormat(t)||t}var i=5;for(jn.lastIndex=0;i>=0&&jn.test(t);)t=t.replace(jn,n),jn.lastIndex=0,i-=1;return t}function I(t,e,n){Jn[t]="function"==typeof e?e:function(t){return t&&n?n:e}}function H(t,e){return s(Jn,t)?Jn[t](e._strict,e._locale):new RegExp(F(t))}function F(t){return t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,i,r){return e||n||i||r}).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function P(t,e){var n,i=e;for("string"==typeof t&&(t=[t]),"number"==typeof e&&(i=function(t,n){n[e]=p(t)}),n=0;n<t.length;n++)Zn[t[n]]=i}function q(t,e){P(t,function(t,n,i,r){i._w=i._w||{},e(t,i._w,i,r)})}function Y(t,e,n){null!=e&&s(Zn,t)&&Zn[t](e,n._a,n,t)}function R(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function W(t){return this._months[t.month()]}function B(t){return this._monthsShort[t.month()]}function U(t,e,n){var i,r,o;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;12>i;i++){if(r=l([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(o="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[i]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[i].test(t))return i;if(n&&"MMM"===e&&this._shortMonthsParse[i].test(t))return i;if(!n&&this._monthsParse[i].test(t))return i}}function z(t,e){var n;return"string"==typeof e&&(e=t.localeData().monthsParse(e),"number"!=typeof e)?t:(n=Math.min(t.date(),R(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t)}function G(e){return null!=e?(z(this,e),t.updateOffset(this,!0),this):E(this,"Month")}function V(){return R(this.year(),this.month())}function X(t){var e,n=t._a;return n&&-2===t._pf.overflow&&(e=n[ti]<0||n[ti]>11?ti:n[ei]<1||n[ei]>R(n[Kn],n[ti])?ei:n[ni]<0||n[ni]>24||24===n[ni]&&(0!==n[ii]||0!==n[ri]||0!==n[oi])?ni:n[ii]<0||n[ii]>59?ii:n[ri]<0||n[ri]>59?ri:n[oi]<0||n[oi]>999?oi:-1,t._pf._overflowDayOfYear&&(Kn>e||e>ei)&&(e=ei),t._pf.overflow=e),t}function Q(e){t.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function J(t,e){var n=!0;return a(function(){return n&&(Q(t),n=!1),e.apply(this,arguments)},e)}function Z(t,e){li[t]||(Q(e),li[t]=!0)}function K(t){var e,n,i=t._i,r=ui.exec(i);if(r){for(t._pf.iso=!0,e=0,n=ci.length;n>e;e++)if(ci[e][1].exec(i)){t._f=ci[e][0]+(r[6]||" ");break}for(e=0,n=di.length;n>e;e++)if(di[e][1].exec(i)){t._f+=di[e][0];break}i.match(Vn)&&(t._f+="Z"),yt(t)}else t._isValid=!1}function tt(e){var n=fi.exec(e._i);return null!==n?void(e._d=new Date(+n[1])):(K(e),void(e._isValid===!1&&(delete e._isValid,t.createFromInputFallback(e))))}function et(t,e,n,i,r,o,s){var a=new Date(t,e,n,i,r,o,s);return 1970>t&&a.setFullYear(t),a}function nt(t){var e=new Date(Date.UTC.apply(null,arguments));return 1970>t&&e.setUTCFullYear(t),e}function it(t){return rt(t)?366:365}function rt(t){return t%4===0&&t%100!==0||t%400===0}function ot(){return rt(this.year())}function st(t,e,n){var i,r=n-e,o=n-t.day();return o>r&&(o-=7),r-7>o&&(o+=7),i=kt(t).add(o,"d"),{week:Math.ceil(i.dayOfYear()/7),year:i.year()}}function at(t){return st(t,this._week.dow,this._week.doy).week}function lt(){return this._week.dow}function ut(){return this._week.doy}function ct(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")}function dt(t){var e=st(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")}function ft(t,e,n,i,r){var o,s,a=nt(t,0,1).getUTCDay();return a=0===a?7:a,n=null!=n?n:r,o=r-a+(a>i?7:0)-(r>a?7:0),s=7*(e-1)+(n-r)+o+1,{year:s>0?t:t-1,dayOfYear:s>0?s:it(t-1)+s}}function ht(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")}function pt(t,e,n){return null!=t?t:null!=e?e:n}function mt(t){var e=new Date;return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}function gt(t){var e,n,i,r,o=[];if(!t._d){for(i=mt(t),t._w&&null==t._a[ei]&&null==t._a[ti]&&vt(t),t._dayOfYear&&(r=pt(t._a[Kn],i[Kn]),t._dayOfYear>it(r)&&(t._pf._overflowDayOfYear=!0),n=nt(r,0,t._dayOfYear),t._a[ti]=n.getUTCMonth(),t._a[ei]=n.getUTCDate()),e=0;3>e&&null==t._a[e];++e)t._a[e]=o[e]=i[e];for(;7>e;e++)t._a[e]=o[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[ni]&&0===t._a[ii]&&0===t._a[ri]&&0===t._a[oi]&&(t._nextDay=!0,t._a[ni]=0),t._d=(t._useUTC?nt:et).apply(null,o),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[ni]=24)}}function vt(t){var e,n,i,r,o,s,a;e=t._w,null!=e.GG||null!=e.W||null!=e.E?(o=1,s=4,n=pt(e.GG,t._a[Kn],st(kt(),1,4).year),i=pt(e.W,1),r=pt(e.E,1)):(o=t._locale._week.dow,s=t._locale._week.doy,n=pt(e.gg,t._a[Kn],st(kt(),o,s).year),i=pt(e.w,1),null!=e.d?(r=e.d,o>r&&++i):r=null!=e.e?e.e+o:o),a=ft(n,i,r,s,o),t._a[Kn]=a.year,t._dayOfYear=a.dayOfYear}function yt(e){if(e._f===t.ISO_8601)return void K(e);e._a=[],e._pf.empty=!0;var n,i,r,o,s,a=""+e._i,l=a.length,u=0;for(r=L(e._f,e._locale).match(On)||[],n=0;n<r.length;n++)o=r[n],i=(a.match(H(o,e))||[])[0],i&&(s=a.substr(0,a.indexOf(i)),s.length>0&&e._pf.unusedInput.push(s),a=a.slice(a.indexOf(i)+i.length),u+=i.length),In[o]?(i?e._pf.empty=!1:e._pf.unusedTokens.push(o),Y(o,i,e)):e._strict&&!i&&e._pf.unusedTokens.push(o);e._pf.charsLeftOver=l-u,a.length>0&&e._pf.unusedInput.push(a),e._pf.bigHour===!0&&e._a[ni]<=12&&(e._pf.bigHour=void 0),e._a[ni]=bt(e._locale,e._a[ni],e._meridiem),gt(e),X(e)}function bt(t,e,n){var i;return null==n?e:null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?(i=t.isPM(n),i&&12>e&&(e+=12),i||12!==e||(e=0),e):e}function wt(t){var e,i,r,o,s;if(0===t._f.length)return t._pf.invalidFormat=!0,void(t._d=new Date(0/0));for(o=0;o<t._f.length;o++)s=0,e=d({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._pf=n(),e._f=t._f[o],yt(e),u(e)&&(s+=e._pf.charsLeftOver,s+=10*e._pf.unusedTokens.length,e._pf.score=s,(null==r||r>s)&&(r=s,i=e));a(t,i||e)}function xt(t){if(!t._d){var e=k(t._i);t._a=[e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],gt(t)}}function _t(t){var e,n=t._i,r=t._f;return t._locale=t._locale||_(t._l),null===n||void 0===r&&""===n?c({nullInput:!0}):("string"==typeof n&&(t._i=n=t._locale.preparse(n)),h(n)?new f(X(n)):(i(r)?wt(t):r?yt(t):Tt(t),e=new f(X(t)),e._nextDay&&(e.add(1,"d"),e._nextDay=void 0),e))}function Tt(e){var n=e._i;void 0===n?e._d=new Date:r(n)?e._d=new Date(+n):"string"==typeof n?tt(e):i(n)?(e._a=o(n.slice(0),function(t){return parseInt(t,10)}),gt(e)):"object"==typeof n?xt(e):"number"==typeof n?e._d=new Date(n):t.createFromInputFallback(e)}function Ct(t,e,i,r,o){var s={};return"boolean"==typeof i&&(r=i,i=void 0),s._isAMomentObject=!0,s._useUTC=s._isUTC=o,s._l=i,s._i=t,s._f=e,s._strict=r,s._pf=n(),_t(s)}function kt(t,e,n,i){return Ct(t,e,n,i,!1)}function St(t,e){var n,r;if(1===e.length&&i(e[0])&&(e=e[0]),!e.length)return kt();for(n=e[0],r=1;r<e.length;++r)e[r][t](n)&&(n=e[r]);return n}function Et(){var t=[].slice.call(arguments,0);return St("isBefore",t)}function Dt(){var t=[].slice.call(arguments,0);return St("isAfter",t)}function Nt(t){var e=k(t),n=e.year||0,i=e.quarter||0,r=e.month||0,o=e.week||0,s=e.day||0,a=e.hour||0,l=e.minute||0,u=e.second||0,c=e.millisecond||0;this._milliseconds=+c+1e3*u+6e4*l+36e5*a,this._days=+s+7*o,this._months=+r+3*i+12*n,this._data={},this._locale=_(),this._bubble()}function At(t){return t instanceof Nt}function Mt(t,e){M(t,0,0,function(){var t=this.utcOffset(),n="+";return 0>t&&(t=-t,n="-"),n+A(~~(t/60),2)+e+A(~~t%60,2)})}function $t(t){var e=(t||"").match(Vn)||[],n=e[e.length-1]||[],i=(n+"").match(vi)||["-",0,0],r=+(60*i[1])+p(i[2]);return"+"===i[0]?r:-r}function Ot(e,n){var i,o;return n._isUTC?(i=n.clone(),o=(h(e)||r(e)?+e:+kt(e))-+i,i._d.setTime(+i._d+o),t.updateOffset(i,!1),i):kt(e).local()}function jt(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function Lt(e,n){var i,r=this._offset||0;return null!=e?("string"==typeof e&&(e=$t(e)),Math.abs(e)<16&&(e=60*e),!this._isUTC&&n&&(i=jt(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==e&&(!n||this._changeInProgress?Jt(this,zt(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,t.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?r:jt(this)}function It(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}function Ht(t){return this.utcOffset(0,t)}function Ft(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(jt(this),"m")),this}function Pt(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset($t(this._i)),this}function qt(t){return t=t?kt(t).utcOffset():0,(this.utcOffset()-t)%60===0}function Yt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Rt(){if(this._a){var t=this._isUTC?l(this._a):kt(this._a);return this.isValid()&&m(this._a,t.toArray())>0}return!1}function Wt(){return!this._isUTC}function Bt(){return this._isUTC}function Ut(){return this._isUTC&&0===this._offset}function zt(t,e){var n,i,r,o=t,a=null;return At(t)?o={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(o={},e?o[e]=t:o.milliseconds=t):(a=yi.exec(t))?(n="-"===a[1]?-1:1,o={y:0,d:p(a[ei])*n,h:p(a[ni])*n,m:p(a[ii])*n,s:p(a[ri])*n,ms:p(a[oi])*n}):(a=bi.exec(t))?(n="-"===a[1]?-1:1,o={y:Gt(a[2],n),M:Gt(a[3],n),d:Gt(a[4],n),h:Gt(a[5],n),m:Gt(a[6],n),s:Gt(a[7],n),w:Gt(a[8],n)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(r=Xt(kt(o.from),kt(o.to)),o={},o.ms=r.milliseconds,o.M=r.months),i=new Nt(o),At(t)&&s(t,"_locale")&&(i._locale=t._locale),i}function Gt(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Vt(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function Xt(t,e){var n;return e=Ot(e,t),t.isBefore(e)?n=Vt(t,e):(n=Vt(e,t),n.milliseconds=-n.milliseconds,n.months=-n.months),n}function Qt(t,e){return function(n,i){var r,o;return null===i||isNaN(+i)||(Z(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),o=n,n=i,i=o),n="string"==typeof n?+n:n,r=zt(n,i),Jt(this,r,t),this}}function Jt(e,n,i,r){var o=n._milliseconds,s=n._days,a=n._months;r=null==r?!0:r,o&&e._d.setTime(+e._d+o*i),s&&D(e,"Date",E(e,"Date")+s*i),a&&z(e,E(e,"Month")+a*i),r&&t.updateOffset(e,s||a)}function Zt(t){var e=t||kt(),n=Ot(e,this).startOf("day"),i=this.diff(n,"days",!0),r=-6>i?"sameElse":-1>i?"lastWeek":0>i?"lastDay":1>i?"sameDay":2>i?"nextDay":7>i?"nextWeek":"sameElse";return this.format(this.localeData().calendar(r,this,kt(e)))}function Kt(){return new f(this)}function te(t,e){var n;return e=C("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=h(t)?t:kt(t),+this>+t):(n=h(t)?+t:+kt(t),n<+this.clone().startOf(e))}function ee(t,e){var n;return e=C("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=h(t)?t:kt(t),+t>+this):(n=h(t)?+t:+kt(t),+this.clone().endOf(e)<n)}function ne(t,e,n){return this.isAfter(t,n)&&this.isBefore(e,n)}function ie(t,e){var n;return e=C(e||"millisecond"),"millisecond"===e?(t=h(t)?t:kt(t),+this===+t):(n=+kt(t),+this.clone().startOf(e)<=n&&n<=+this.clone().endOf(e))}function re(t){return 0>t?Math.ceil(t):Math.floor(t)}function oe(t,e,n){var i,r,o=Ot(t,this),s=6e4*(o.utcOffset()-this.utcOffset());return e=C(e),"year"===e||"month"===e||"quarter"===e?(r=se(this,o),"quarter"===e?r/=3:"year"===e&&(r/=12)):(i=this-o,r="second"===e?i/1e3:"minute"===e?i/6e4:"hour"===e?i/36e5:"day"===e?(i-s)/864e5:"week"===e?(i-s)/6048e5:i),n?r:re(r)}function se(t,e){var n,i,r=12*(e.year()-t.year())+(e.month()-t.month()),o=t.clone().add(r,"months");return 0>e-o?(n=t.clone().add(r-1,"months"),i=(e-o)/(o-n)):(n=t.clone().add(r+1,"months"),i=(e-o)/(n-o)),-(r+i)}function ae(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function le(){var t=this.clone().utc();return 0<t.year()&&t.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():j(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):j(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function ue(e){var n=j(this,e||t.defaultFormat);return this.localeData().postformat(n)}function ce(t,e){return zt({to:this,from:t}).locale(this.locale()).humanize(!e)}function de(t){return this.from(kt(),t)}function fe(t){var e;return void 0===t?this._locale._abbr:(e=_(t),null!=e&&(this._locale=e),this)}function he(){return this._locale}function pe(t){switch(t=C(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t&&this.weekday(0),"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this}function me(t){return t=C(t),void 0===t||"millisecond"===t?this:this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms")}function ge(){return+this._d-6e4*(this._offset||0)}function ve(){return Math.floor(+this/1e3)}function ye(){return this._offset?new Date(+this):this._d}function be(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]}function we(){return u(this)}function xe(){return a({},this._pf)}function _e(){return this._pf.overflow}function Te(t,e){M(0,[t,t.length],0,e)}function Ce(t,e,n){return st(kt([t,11,31+e-n]),e,n).week}function ke(t){var e=st(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==t?e:this.add(t-e,"y")}function Se(t){var e=st(this,1,4).year;return null==t?e:this.add(t-e,"y")}function Ee(){return Ce(this.year(),1,4)}function De(){var t=this.localeData()._week;return Ce(this.year(),t.dow,t.doy)}function Ne(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)}function Ae(t,e){if("string"==typeof t)if(isNaN(t)){if(t=e.weekdaysParse(t),"number"!=typeof t)return null}else t=parseInt(t,10);return t}function Me(t){return this._weekdays[t.day()]}function $e(t){return this._weekdaysShort[t.day()]}function Oe(t){return this._weekdaysMin[t.day()]}function je(t){var e,n,i;for(this._weekdaysParse||(this._weekdaysParse=[]),e=0;7>e;e++)if(this._weekdaysParse[e]||(n=kt([2e3,1]).day(e),i="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[e]=new RegExp(i.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e}function Le(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=Ae(t,this.localeData()),this.add(t-e,"d")):e}function Ie(t){var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")}function He(t){return null==t?this.day()||7:this.day(this.day()%7?t:t-7)}function Fe(t,e){M(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function Pe(t,e){return e._meridiemParse}function qe(t){return"p"===(t+"").toLowerCase().charAt(0)}function Ye(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"}function Re(t){M(0,[t,3],0,"millisecond")}function We(){return this._isUTC?"UTC":""}function Be(){return this._isUTC?"Coordinated Universal Time":""}function Ue(t){return kt(1e3*t)}function ze(){return kt.apply(null,arguments).parseZone()}function Ge(t,e,n){var i=this._calendar[t];return"function"==typeof i?i.call(e,n):i}function Ve(t){var e=this._longDateFormat[t];return!e&&this._longDateFormat[t.toUpperCase()]&&(e=this._longDateFormat[t.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t]=e),e}function Xe(){return this._invalidDate}function Qe(t){return this._ordinal.replace("%d",t)}function Je(t){return t}function Ze(t,e,n,i){var r=this._relativeTime[n];return"function"==typeof r?r(t,e,n,i):r.replace(/%d/i,t)}function Ke(t,e){var n=this._relativeTime[t>0?"future":"past"];return"function"==typeof n?n(e):n.replace(/%s/i,e)}function tn(t){var e,n;for(n in t)e=t[n],"function"==typeof e?this[n]=e:this["_"+n]=e;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function en(t,e,n,i){var r=_(),o=l().set(i,e);return r[n](o,t)}function nn(t,e,n,i,r){if("number"==typeof t&&(e=t,t=void 0),t=t||"",null!=e)return en(t,e,n,r);var o,s=[];for(o=0;i>o;o++)s[o]=en(t,o,n,r);return s}function rn(t,e){return nn(t,e,"months",12,"month")}function on(t,e){return nn(t,e,"monthsShort",12,"month")}function sn(t,e){return nn(t,e,"weekdays",7,"day")}function an(t,e){return nn(t,e,"weekdaysShort",7,"day")}function ln(t,e){return nn(t,e,"weekdaysMin",7,"day")}function un(){var t=this._data;return this._milliseconds=Yi(this._milliseconds),this._days=Yi(this._days),this._months=Yi(this._months),t.milliseconds=Yi(t.milliseconds),t.seconds=Yi(t.seconds),t.minutes=Yi(t.minutes),t.hours=Yi(t.hours),t.months=Yi(t.months),t.years=Yi(t.years),this}function cn(t,e,n,i){var r=zt(e,n);return t._milliseconds+=i*r._milliseconds,t._days+=i*r._days,t._months+=i*r._months,t._bubble()}function dn(t,e){return cn(this,t,e,1)}function fn(t,e){return cn(this,t,e,-1)}function hn(){var t,e,n,i=this._milliseconds,r=this._days,o=this._months,s=this._data,a=0;return s.milliseconds=i%1e3,t=re(i/1e3),s.seconds=t%60,e=re(t/60),s.minutes=e%60,n=re(e/60),s.hours=n%24,r+=re(n/24),a=re(pn(r)),r-=re(mn(a)),o+=re(r/30),r%=30,a+=re(o/12),o%=12,s.days=r,s.months=o,s.years=a,this}function pn(t){return 400*t/146097}function mn(t){return 146097*t/400}function gn(t){var e,n,i=this._milliseconds;if(t=C(t),"month"===t||"year"===t)return e=this._days+i/864e5,n=this._months+12*pn(e),"month"===t?n:n/12;switch(e=this._days+Math.round(mn(this._months/12)),t){case"week":return e/7+i/6048e5;case"day":return e+i/864e5;case"hour":return 24*e+i/36e5;case"minute":return 24*e*60+i/6e4;case"second":return 24*e*60*60+i/1e3;case"millisecond":return Math.floor(24*e*60*60*1e3)+i;default:throw new Error("Unknown unit "+t)}}function vn(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*p(this._months/12)}function yn(t){return function(){return this.as(t)}}function bn(t){return t=C(t),this[t+"s"]()}function wn(t){return function(){return this._data[t]}}function xn(){return re(this.days()/7)}function _n(t,e,n,i,r){return r.relativeTime(e||1,!!n,t,i)}function Tn(t,e,n){var i=zt(t).abs(),r=ir(i.as("s")),o=ir(i.as("m")),s=ir(i.as("h")),a=ir(i.as("d")),l=ir(i.as("M")),u=ir(i.as("y")),c=r<rr.s&&["s",r]||1===o&&["m"]||o<rr.m&&["mm",o]||1===s&&["h"]||s<rr.h&&["hh",s]||1===a&&["d"]||a<rr.d&&["dd",a]||1===l&&["M"]||l<rr.M&&["MM",l]||1===u&&["y"]||["yy",u];

return c[2]=e,c[3]=+t>0,c[4]=n,_n.apply(null,c)}function Cn(t,e){return void 0===rr[t]?!1:void 0===e?rr[t]:(rr[t]=e,!0)}function kn(t){var e=this.localeData(),n=Tn(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)}function Sn(){var t=or(this.years()),e=or(this.months()),n=or(this.days()),i=or(this.hours()),r=or(this.minutes()),o=or(this.seconds()+this.milliseconds()/1e3),s=this.asSeconds();return s?(0>s?"-":"")+"P"+(t?t+"Y":"")+(e?e+"M":"")+(n?n+"D":"")+(i||r||o?"T":"")+(i?i+"H":"")+(r?r+"M":"")+(o?o+"S":""):"P0D"}var En,Dn,Nn=t.momentProperties=[],An=!1,Mn={},$n={},On=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,jn=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Ln={},In={},Hn=/\d/,Fn=/\d\d/,Pn=/\d{3}/,qn=/\d{4}/,Yn=/[+-]?\d{6}/,Rn=/\d\d?/,Wn=/\d{1,3}/,Bn=/\d{1,4}/,Un=/[+-]?\d{1,6}/,zn=/\d+/,Gn=/[+-]?\d+/,Vn=/Z|[+-]\d\d:?\d\d/gi,Xn=/[+-]?\d+(\.\d{1,3})?/,Qn=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Jn={},Zn={},Kn=0,ti=1,ei=2,ni=3,ii=4,ri=5,oi=6;M("M",["MM",2],"Mo",function(){return this.month()+1}),M("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),M("MMMM",0,0,function(t){return this.localeData().months(this,t)}),T("month","M"),I("M",Rn),I("MM",Rn,Fn),I("MMM",Qn),I("MMMM",Qn),P(["M","MM"],function(t,e){e[ti]=p(t)-1}),P(["MMM","MMMM"],function(t,e,n,i){var r=n._locale.monthsParse(t,i,n._strict);null!=r?e[ti]=r:n._pf.invalidMonth=t});var si="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ai="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),li={};t.suppressDeprecationWarnings=!1;var ui=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ci=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],di=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],fi=/^\/?Date\((\-?\d+)/i;t.createFromInputFallback=J("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),M(0,["YY",2],0,function(){return this.year()%100}),M(0,["YYYY",4],0,"year"),M(0,["YYYYY",5],0,"year"),M(0,["YYYYYY",6,!0],0,"year"),T("year","y"),I("Y",Gn),I("YY",Rn,Fn),I("YYYY",Bn,qn),I("YYYYY",Un,Yn),I("YYYYYY",Un,Yn),P(["YYYY","YYYYY","YYYYYY"],Kn),P("YY",function(e,n){n[Kn]=t.parseTwoDigitYear(e)}),t.parseTwoDigitYear=function(t){return p(t)+(p(t)>68?1900:2e3)};var hi=S("FullYear",!1);M("w",["ww",2],"wo","week"),M("W",["WW",2],"Wo","isoWeek"),T("week","w"),T("isoWeek","W"),I("w",Rn),I("ww",Rn,Fn),I("W",Rn),I("WW",Rn,Fn),q(["w","ww","W","WW"],function(t,e,n,i){e[i.substr(0,1)]=p(t)});var pi={dow:0,doy:6};M("DDD",["DDDD",3],"DDDo","dayOfYear"),T("dayOfYear","DDD"),I("DDD",Wn),I("DDDD",Pn),P(["DDD","DDDD"],function(t,e,n){n._dayOfYear=p(t)}),t.ISO_8601=function(){};var mi=J("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var t=kt.apply(null,arguments);return this>t?this:t}),gi=J("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var t=kt.apply(null,arguments);return t>this?this:t});Mt("Z",":"),Mt("ZZ",""),I("Z",Vn),I("ZZ",Vn),P(["Z","ZZ"],function(t,e,n){n._useUTC=!0,n._tzm=$t(t)});var vi=/([\+\-]|\d\d)/gi;t.updateOffset=function(){};var yi=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,bi=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;zt.fn=Nt.prototype;var wi=Qt(1,"add"),xi=Qt(-1,"subtract");t.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var _i=J("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});M(0,["gg",2],0,function(){return this.weekYear()%100}),M(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Te("gggg","weekYear"),Te("ggggg","weekYear"),Te("GGGG","isoWeekYear"),Te("GGGGG","isoWeekYear"),T("weekYear","gg"),T("isoWeekYear","GG"),I("G",Gn),I("g",Gn),I("GG",Rn,Fn),I("gg",Rn,Fn),I("GGGG",Bn,qn),I("gggg",Bn,qn),I("GGGGG",Un,Yn),I("ggggg",Un,Yn),q(["gggg","ggggg","GGGG","GGGGG"],function(t,e,n,i){e[i.substr(0,2)]=p(t)}),q(["gg","GG"],function(e,n,i,r){n[r]=t.parseTwoDigitYear(e)}),M("Q",0,0,"quarter"),T("quarter","Q"),I("Q",Hn),P("Q",function(t,e){e[ti]=3*(p(t)-1)}),M("D",["DD",2],"Do","date"),T("date","D"),I("D",Rn),I("DD",Rn,Fn),I("Do",function(t,e){return t?e._ordinalParse:e._ordinalParseLenient}),P(["D","DD"],ei),P("Do",function(t,e){e[ei]=p(t.match(Rn)[0],10)});var Ti=S("Date",!0);M("d",0,"do","day"),M("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),M("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),M("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),M("e",0,0,"weekday"),M("E",0,0,"isoWeekday"),T("day","d"),T("weekday","e"),T("isoWeekday","E"),I("d",Rn),I("e",Rn),I("E",Rn),I("dd",Qn),I("ddd",Qn),I("dddd",Qn),q(["dd","ddd","dddd"],function(t,e,n){var i=n._locale.weekdaysParse(t);null!=i?e.d=i:n._pf.invalidWeekday=t}),q(["d","e","E"],function(t,e,n,i){e[i]=p(t)});var Ci="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ki="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Si="Su_Mo_Tu_We_Th_Fr_Sa".split("_");M("H",["HH",2],0,"hour"),M("h",["hh",2],0,function(){return this.hours()%12||12}),Fe("a",!0),Fe("A",!1),T("hour","h"),I("a",Pe),I("A",Pe),I("H",Rn),I("h",Rn),I("HH",Rn,Fn),I("hh",Rn,Fn),P(["H","HH"],ni),P(["a","A"],function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t}),P(["h","hh"],function(t,e,n){e[ni]=p(t),n._pf.bigHour=!0});var Ei=/[ap]\.?m?\.?/i,Di=S("Hours",!0);M("m",["mm",2],0,"minute"),T("minute","m"),I("m",Rn),I("mm",Rn,Fn),P(["m","mm"],ii);var Ni=S("Minutes",!1);M("s",["ss",2],0,"second"),T("second","s"),I("s",Rn),I("ss",Rn,Fn),P(["s","ss"],ri);var Ai=S("Seconds",!1);M("S",0,0,function(){return~~(this.millisecond()/100)}),M(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),Re("SSS"),Re("SSSS"),T("millisecond","ms"),I("S",Wn,Hn),I("SS",Wn,Fn),I("SSS",Wn,Pn),I("SSSS",zn),P(["S","SS","SSS","SSSS"],function(t,e){e[oi]=p(1e3*("0."+t))});var Mi=S("Milliseconds",!1);M("z",0,0,"zoneAbbr"),M("zz",0,0,"zoneName");var $i=f.prototype;$i.add=wi,$i.calendar=Zt,$i.clone=Kt,$i.diff=oe,$i.endOf=me,$i.format=ue,$i.from=ce,$i.fromNow=de,$i.get=N,$i.invalidAt=_e,$i.isAfter=te,$i.isBefore=ee,$i.isBetween=ne,$i.isSame=ie,$i.isValid=we,$i.lang=_i,$i.locale=fe,$i.localeData=he,$i.max=gi,$i.min=mi,$i.parsingFlags=xe,$i.set=N,$i.startOf=pe,$i.subtract=xi,$i.toArray=be,$i.toDate=ye,$i.toISOString=le,$i.toJSON=le,$i.toString=ae,$i.unix=ve,$i.valueOf=ge,$i.year=hi,$i.isLeapYear=ot,$i.weekYear=ke,$i.isoWeekYear=Se,$i.quarter=$i.quarters=Ne,$i.month=G,$i.daysInMonth=V,$i.week=$i.weeks=ct,$i.isoWeek=$i.isoWeeks=dt,$i.weeksInYear=De,$i.isoWeeksInYear=Ee,$i.date=Ti,$i.day=$i.days=Le,$i.weekday=Ie,$i.isoWeekday=He,$i.dayOfYear=ht,$i.hour=$i.hours=Di,$i.minute=$i.minutes=Ni,$i.second=$i.seconds=Ai,$i.millisecond=$i.milliseconds=Mi,$i.utcOffset=Lt,$i.utc=Ht,$i.local=Ft,$i.parseZone=Pt,$i.hasAlignedHourOffset=qt,$i.isDST=Yt,$i.isDSTShifted=Rt,$i.isLocal=Wt,$i.isUtcOffset=Bt,$i.isUtc=Ut,$i.isUTC=Ut,$i.zoneAbbr=We,$i.zoneName=Be,$i.dates=J("dates accessor is deprecated. Use date instead.",Ti),$i.months=J("months accessor is deprecated. Use month instead",G),$i.years=J("years accessor is deprecated. Use year instead",hi),$i.zone=J("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",It);var Oi=$i,ji={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Li={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},Ii="Invalid date",Hi="%d",Fi=/\d{1,2}/,Pi={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},qi=g.prototype;qi._calendar=ji,qi.calendar=Ge,qi._longDateFormat=Li,qi.longDateFormat=Ve,qi._invalidDate=Ii,qi.invalidDate=Xe,qi._ordinal=Hi,qi.ordinal=Qe,qi._ordinalParse=Fi,qi.preparse=Je,qi.postformat=Je,qi._relativeTime=Pi,qi.relativeTime=Ze,qi.pastFuture=Ke,qi.set=tn,qi.months=W,qi._months=si,qi.monthsShort=B,qi._monthsShort=ai,qi.monthsParse=U,qi.week=at,qi._week=pi,qi.firstDayOfYear=ut,qi.firstDayOfWeek=lt,qi.weekdays=Me,qi._weekdays=Ci,qi.weekdaysMin=Oe,qi._weekdaysMin=Si,qi.weekdaysShort=$e,qi._weekdaysShort=ki,qi.weekdaysParse=je,qi.isPM=qe,qi._meridiemParse=Ei,qi.meridiem=Ye,w("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===p(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),t.lang=J("moment.lang is deprecated. Use moment.locale instead.",w),t.langData=J("moment.langData is deprecated. Use moment.localeData instead.",_);var Yi=Math.abs,Ri=yn("ms"),Wi=yn("s"),Bi=yn("m"),Ui=yn("h"),zi=yn("d"),Gi=yn("w"),Vi=yn("M"),Xi=yn("y"),Qi=wn("milliseconds"),Ji=wn("seconds"),Zi=wn("minutes"),Ki=wn("hours"),tr=wn("days"),er=wn("months"),nr=wn("years"),ir=Math.round,rr={s:45,m:45,h:22,d:26,M:11},or=Math.abs,sr=Nt.prototype;sr.abs=un,sr.add=dn,sr.subtract=fn,sr.as=gn,sr.asMilliseconds=Ri,sr.asSeconds=Wi,sr.asMinutes=Bi,sr.asHours=Ui,sr.asDays=zi,sr.asWeeks=Gi,sr.asMonths=Vi,sr.asYears=Xi,sr.valueOf=vn,sr._bubble=hn,sr.get=bn,sr.milliseconds=Qi,sr.seconds=Ji,sr.minutes=Zi,sr.hours=Ki,sr.days=tr,sr.weeks=xn,sr.months=er,sr.years=nr,sr.humanize=kn,sr.toISOString=Sn,sr.toString=Sn,sr.toJSON=Sn,sr.locale=fe,sr.localeData=he,sr.toIsoString=J("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Sn),sr.lang=_i,M("X",0,0,"unix"),M("x",0,0,"valueOf"),I("x",Gn),I("X",Xn),P("X",function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))}),P("x",function(t,e,n){n._d=new Date(p(t))}),t.version="2.10.2",e(kt),t.fn=Oi,t.min=Et,t.max=Dt,t.utc=l,t.unix=Ue,t.months=rn,t.isDate=r,t.locale=w,t.invalid=c,t.duration=zt,t.isMoment=h,t.weekdays=sn,t.parseZone=ze,t.localeData=_,t.isDuration=At,t.monthsShort=on,t.weekdaysMin=ln,t.defineLocale=x,t.weekdaysShort=an,t.normalizeUnits=C,t.relativeTimeThreshold=Cn;var ar=t;return ar}),function(t,e){var n=1e3,i=!1,r=t([]),o=function(){l.resume()},s=function(n,i){var o=n.data("livestampdata");if("number"==typeof i&&(i*=1e3),n.removeAttr("data-livestamp").removeData("livestamp"),i=e(i),e.isMoment(i)&&!isNaN(+i)){var s=t.extend({},{original:n.contents()},o);s.moment=e(i),n.data("livestampdata",s).empty(),r.push(n[0])}},a=function(){i||(l.update(),setTimeout(a,n))},l={update:function(){t("[data-livestamp]").each(function(){var e=t(this);s(e,e.data("livestamp"))});var n=[];r.each(function(){var i=t(this),r=i.data("livestampdata");if(void 0===r)n.push(this);else if(e.isMoment(r.moment)){var o=i.html(),s=r.moment.fromNow();if(o!=s){var a=t.Event("change.livestamp");i.trigger(a,[o,s]),a.isDefaultPrevented()||i.html(s)}}}),r=r.not(n)},pause:function(){i=!0},resume:function(){i=!1,a()},interval:function(t){return void 0===t?n:void(n=t)}},u={add:function(n,i){return"number"==typeof i&&(i*=1e3),i=e(i),e.isMoment(i)&&!isNaN(+i)&&(n.each(function(){s(t(this),i)}),l.update()),n},destroy:function(e){return r=r.not(e),e.each(function(){var n=t(this),i=n.data("livestampdata");return void 0===i?e:void n.html(i.original?i.original:"").removeData("livestampdata")}),e},isLivestamp:function(t){return void 0!==t.data("livestampdata")}};t.livestamp=l,t(o),t.fn.livestamp=function(t,e){return u[t]||(e=t,t="add"),u[t](this,e)}}(jQuery,moment),function(){var t,e,n,i,r,o=function(t,e){return function(){return t.apply(e,arguments)}},s=[].indexOf||function(t){for(var e=0,n=this.length;n>e;e++)if(e in this&&this[e]===t)return e;return-1};e=function(){function t(){}return t.prototype.extend=function(t,e){var n,i;for(n in e)i=e[n],null==t[n]&&(t[n]=i);return t},t.prototype.isMobile=function(t){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(t)},t.prototype.addEvent=function(t,e,n){return null!=t.addEventListener?t.addEventListener(e,n,!1):null!=t.attachEvent?t.attachEvent("on"+e,n):t[e]=n},t.prototype.removeEvent=function(t,e,n){return null!=t.removeEventListener?t.removeEventListener(e,n,!1):null!=t.detachEvent?t.detachEvent("on"+e,n):delete t[e]},t.prototype.innerHeight=function(){return"innerHeight"in window?window.innerHeight:document.documentElement.clientHeight},t}(),n=this.WeakMap||this.MozWeakMap||(n=function(){function t(){this.keys=[],this.values=[]}return t.prototype.get=function(t){var e,n,i,r,o;for(o=this.keys,e=i=0,r=o.length;r>i;e=++i)if(n=o[e],n===t)return this.values[e]},t.prototype.set=function(t,e){var n,i,r,o,s;for(s=this.keys,n=r=0,o=s.length;o>r;n=++r)if(i=s[n],i===t)return void(this.values[n]=e);return this.keys.push(t),this.values.push(e)},t}()),t=this.MutationObserver||this.WebkitMutationObserver||this.MozMutationObserver||(t=function(){function t(){"undefined"!=typeof console&&null!==console&&console.warn("MutationObserver is not supported by your browser."),"undefined"!=typeof console&&null!==console&&console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.")}return t.notSupported=!0,t.prototype.observe=function(){},t}()),i=this.getComputedStyle||function(t,e){return this.getPropertyValue=function(e){var n;return"float"===e&&(e="styleFloat"),r.test(e)&&e.replace(r,function(t,e){return e.toUpperCase()}),(null!=(n=t.currentStyle)?n[e]:void 0)||null},this},r=/(\-([a-z]){1})/g,this.WOW=function(){function r(t){null==t&&(t={}),this.scrollCallback=o(this.scrollCallback,this),this.scrollHandler=o(this.scrollHandler,this),this.start=o(this.start,this),this.scrolled=!0,this.config=this.util().extend(t,this.defaults),this.animationNameCache=new n}return r.prototype.defaults={boxClass:"wow",animateClass:"animated",offset:0,mobile:!0,live:!0},r.prototype.init=function(){var t;return this.element=window.document.documentElement,"interactive"===(t=document.readyState)||"complete"===t?this.start():this.util().addEvent(document,"DOMContentLoaded",this.start),this.finished=[]},r.prototype.start=function(){var e,n,i,r;if(this.stopped=!1,this.boxes=function(){var t,n,i,r;for(i=this.element.querySelectorAll("."+this.config.boxClass),r=[],t=0,n=i.length;n>t;t++)e=i[t],r.push(e);return r}.call(this),this.all=function(){var t,n,i,r;for(i=this.boxes,r=[],t=0,n=i.length;n>t;t++)e=i[t],r.push(e);return r}.call(this),this.boxes.length)if(this.disabled())this.resetStyle();else for(r=this.boxes,n=0,i=r.length;i>n;n++)e=r[n],this.applyStyle(e,!0);return this.disabled()||(this.util().addEvent(window,"scroll",this.scrollHandler),this.util().addEvent(window,"resize",this.scrollHandler),this.interval=setInterval(this.scrollCallback,50)),this.config.live?new t(function(t){return function(e){var n,i,r,o,s;for(s=[],r=0,o=e.length;o>r;r++)i=e[r],s.push(function(){var t,e,r,o;for(r=i.addedNodes||[],o=[],t=0,e=r.length;e>t;t++)n=r[t],o.push(this.doSync(n));return o}.call(t));return s}}(this)).observe(document.body,{childList:!0,subtree:!0}):void 0},r.prototype.stop=function(){return this.stopped=!0,this.util().removeEvent(window,"scroll",this.scrollHandler),this.util().removeEvent(window,"resize",this.scrollHandler),null!=this.interval?clearInterval(this.interval):void 0},r.prototype.sync=function(e){return t.notSupported?this.doSync(this.element):void 0},r.prototype.doSync=function(t){var e,n,i,r,o;if(null==t&&(t=this.element),1===t.nodeType){for(t=t.parentNode||t,r=t.querySelectorAll("."+this.config.boxClass),o=[],n=0,i=r.length;i>n;n++)e=r[n],s.call(this.all,e)<0?(this.boxes.push(e),this.all.push(e),this.stopped||this.disabled()?this.resetStyle():this.applyStyle(e,!0),o.push(this.scrolled=!0)):o.push(void 0);return o}},r.prototype.show=function(t){return this.applyStyle(t),t.className=""+t.className+" "+this.config.animateClass},r.prototype.applyStyle=function(t,e){var n,i,r;return i=t.getAttribute("data-wow-duration"),n=t.getAttribute("data-wow-delay"),r=t.getAttribute("data-wow-iteration"),this.animate(function(o){return function(){return o.customStyle(t,e,i,n,r)}}(this))},r.prototype.animate=function(){return"requestAnimationFrame"in window?function(t){return window.requestAnimationFrame(t)}:function(t){return t()}}(),r.prototype.resetStyle=function(){var t,e,n,i,r;for(i=this.boxes,r=[],e=0,n=i.length;n>e;e++)t=i[e],r.push(t.style.visibility="visible");return r},r.prototype.customStyle=function(t,e,n,i,r){return e&&this.cacheAnimationName(t),t.style.visibility=e?"hidden":"visible",n&&this.vendorSet(t.style,{animationDuration:n}),i&&this.vendorSet(t.style,{animationDelay:i}),r&&this.vendorSet(t.style,{animationIterationCount:r}),this.vendorSet(t.style,{animationName:e?"none":this.cachedAnimationName(t)}),t},r.prototype.vendors=["moz","webkit"],r.prototype.vendorSet=function(t,e){var n,i,r,o;o=[];for(n in e)i=e[n],t[""+n]=i,o.push(function(){var e,o,s,a;for(s=this.vendors,a=[],e=0,o=s.length;o>e;e++)r=s[e],a.push(t[""+r+n.charAt(0).toUpperCase()+n.substr(1)]=i);return a}.call(this));return o},r.prototype.vendorCSS=function(t,e){var n,r,o,s,a,l;for(r=i(t),n=r.getPropertyCSSValue(e),l=this.vendors,s=0,a=l.length;a>s;s++)o=l[s],n=n||r.getPropertyCSSValue("-"+o+"-"+e);return n},r.prototype.animationName=function(t){var e;try{e=this.vendorCSS(t,"animation-name").cssText}catch(n){e=i(t).getPropertyValue("animation-name")}return"none"===e?"":e},r.prototype.cacheAnimationName=function(t){return this.animationNameCache.set(t,this.animationName(t))},r.prototype.cachedAnimationName=function(t){return this.animationNameCache.get(t)},r.prototype.scrollHandler=function(){return this.scrolled=!0},r.prototype.scrollCallback=function(){var t;return!this.scrolled||(this.scrolled=!1,this.boxes=function(){var e,n,i,r;for(i=this.boxes,r=[],e=0,n=i.length;n>e;e++)t=i[e],t&&(this.isVisible(t)?this.show(t):r.push(t));return r}.call(this),this.boxes.length||this.config.live)?void 0:this.stop()},r.prototype.offsetTop=function(t){for(var e;void 0===t.offsetTop;)t=t.parentNode;for(e=t.offsetTop;t=t.offsetParent;)e+=t.offsetTop;return e},r.prototype.isVisible=function(t){var e,n,i,r,o;return n=t.getAttribute("data-wow-offset")||this.config.offset,o=window.pageYOffset,r=o+Math.min(this.element.clientHeight,this.util().innerHeight())-n,i=this.offsetTop(t),e=i+t.clientHeight,r>=i&&e>=o},r.prototype.util=function(){return null!=this._util?this._util:this._util=new e},r.prototype.disabled=function(){return!this.config.mobile&&this.util().isMobile(navigator.userAgent)},r}()}.call(this),function(t){"use strict";var e=function(n,i){this.$element=t(n),this.options=t.extend({},e.defaults,i)};e.defaults={transition_delay:300,refresh_speed:50,display_text:"none",use_percentage:!0,percent_format:function(t){return t+"%"},amount_format:function(t,e,n){return t+" / "+e},update:t.noop,done:t.noop,fail:t.noop},e.prototype.transition=function(){var n=this.$element,i=n.parent(),r=this.$back_text,o=this.$front_text,s=this.options,a=parseInt(n.attr("data-transitiongoal")),l=parseInt(n.attr("aria-valuemin"))||0,u=parseInt(n.attr("aria-valuemax"))||100,c=i.hasClass("vertical"),d=s.update&&"function"==typeof s.update?s.update:e.defaults.update,f=s.done&&"function"==typeof s.done?s.done:e.defaults.done,h=s.fail&&"function"==typeof s.fail?s.fail:e.defaults.fail;if(isNaN(a))return void h("data-transitiongoal not set");var p=Math.round(100*(a-l)/(u-l));if("center"===s.display_text&&!r&&!o){this.$back_text=r=t("<span>").addClass("progressbar-back-text").prependTo(i),this.$front_text=o=t("<span>").addClass("progressbar-front-text").prependTo(n);var m;c?(m=i.css("height"),r.css({height:m,"line-height":m}),o.css({height:m,"line-height":m}),t(window).resize(function(){m=i.css("height"),r.css({height:m,"line-height":m}),o.css({height:m,"line-height":m})})):(m=i.css("width"),o.css({width:m}),t(window).resize(function(){m=i.css("width"),o.css({width:m})}))}setTimeout(function(){var t,e,h,m,g;c?n.css("height",p+"%"):n.css("width",p+"%");var v=setInterval(function(){c?(h=n.height(),m=i.height()):(h=n.width(),m=i.width()),t=Math.round(100*h/m),e=Math.round(l+h/m*(u-l)),t>=p&&(t=p,e=a,f(n),clearInterval(v)),"none"!==s.display_text&&(g=s.use_percentage?s.percent_format(t):s.amount_format(e,u,l),"fill"===s.display_text?n.text(g):"center"===s.display_text&&(r.text(g),o.text(g))),n.attr("aria-valuenow",e),d(t,n)},s.refresh_speed)},s.transition_delay)};var n=t.fn.progressbar;t.fn.progressbar=function(n){return this.each(function(){var i=t(this),r=i.data("bs.progressbar"),o="object"==typeof n&&n;r||i.data("bs.progressbar",r=new e(this,o)),r.transition()})},t.fn.progressbar.Constructor=e,t.fn.progressbar.noConflict=function(){return t.fn.progressbar=n,this}}(window.jQuery),!function(t){"use strict";var e=function(e,n){t.fn.typeahead.defaults;n.scrollBar&&(n.items=100,n.menu='<ul class="typeahead dropdown-menu" style="max-height:220px;overflow:auto;"></ul>');var i=this;if(i.$element=t(e),i.options=t.extend({},t.fn.typeahead.defaults,n),i.$menu=t(i.options.menu).insertAfter(i.$element),i.eventSupported=i.options.eventSupported||i.eventSupported,i.grepper=i.options.grepper||i.grepper,i.highlighter=i.options.highlighter||i.highlighter,i.lookup=i.options.lookup||i.lookup,i.matcher=i.options.matcher||i.matcher,i.render=i.options.render||i.render,i.onSelect=i.options.onSelect||null,i.sorter=i.options.sorter||i.sorter,i.source=i.options.source||i.source,i.displayField=i.options.displayField||i.displayField,i.valueField=i.options.valueField||i.valueField,i.options.ajax){var r=i.options.ajax;"string"==typeof r?i.ajax=t.extend({},t.fn.typeahead.defaults.ajax,{url:r}):("string"==typeof r.displayField&&(i.displayField=i.options.displayField=r.displayField),"string"==typeof r.valueField&&(i.valueField=i.options.valueField=r.valueField),i.ajax=t.extend({},t.fn.typeahead.defaults.ajax,r)),i.ajax.url||(i.ajax=null),i.query=""}else i.source=i.options.source,i.ajax=null;i.shown=!1,i.listen()};e.prototype={constructor:e,eventSupported:function(t){var e=t in this.$element;return e||(this.$element.setAttribute(t,"return;"),e="function"==typeof this.$element[t]),e},select:function(){var t=this.$menu.find(".active"),e=t.attr("data-value"),n=this.$menu.find(".active a").text();return this.options.onSelect&&this.options.onSelect({value:e,text:n}),this.$element.val(this.updater(n)).change(),this.hide()},updater:function(t){return t},show:function(){var e=t.extend({},this.$element.position(),{height:this.$element[0].offsetHeight});if(this.$menu.css({top:e.top+e.height,left:e.left}),this.options.alignWidth){var n=t(this.$element[0]).outerWidth();this.$menu.css({width:n})}return this.$menu.show(),this.shown=!0,this},hide:function(){return this.$menu.hide(),this.shown=!1,this},ajaxLookup:function(){function e(){this.ajaxToggleLoadClass(!0),this.ajax.xhr&&this.ajax.xhr.abort();var e=this.ajax.preDispatch?this.ajax.preDispatch(n):{query:n};this.ajax.xhr=t.ajax({url:this.ajax.url,data:e,success:t.proxy(this.ajaxSource,this),type:this.ajax.method||"get",dataType:"json"}),this.ajax.timerId=null}var n=t.trim(this.$element.val());return n===this.query?this:(this.query=n,this.ajax.timerId&&(clearTimeout(this.ajax.timerId),this.ajax.timerId=null),!n||n.length<this.ajax.triggerLength?(this.ajax.xhr&&(this.ajax.xhr.abort(),this.ajax.xhr=null,this.ajaxToggleLoadClass(!1)),this.shown?this.hide():this):(this.ajax.timerId=setTimeout(t.proxy(e,this),this.ajax.timeout),this))},ajaxSource:function(t){this.ajaxToggleLoadClass(!1);var e,n=this;if(n.ajax.xhr)return n.ajax.preProcess&&(t=n.ajax.preProcess(t)),n.ajax.data=t,e=n.grepper(n.ajax.data)||[],e.length?(n.ajax.xhr=null,n.render(e.slice(0,n.options.items)).show()):n.shown?n.hide():n},ajaxToggleLoadClass:function(t){this.ajax.loadingClass&&this.$element.toggleClass(this.ajax.loadingClass,t)},lookup:function(t){var e,n=this;return n.ajax?void n.ajaxer():(n.query=n.$element.val(),n.query&&(e=n.grepper(n.source))?(0==e.length&&(e[0]={id:-21,name:"Result not Found"}),n.render(e.slice(0,n.options.items)).show()):n.shown?n.hide():n)},matcher:function(t){return~t.toLowerCase().indexOf(this.query.toLowerCase())},sorter:function(t){if(this.options.ajax)return t;for(var e,n=[],i=[],r=[];e=t.shift();)e.toLowerCase().indexOf(this.query.toLowerCase())?~e.indexOf(this.query)?i.push(e):r.push(e):n.push(e);return n.concat(i,r)},highlighter:function(t){var e=this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");return t.replace(new RegExp("("+e+")","ig"),function(t,e){return"<strong>"+e+"</strong>"})},render:function(e){var n,i=this,r="string"==typeof i.options.displayField;return e=t(e).map(function(e,o){return"object"==typeof o?(n=r?o[i.options.displayField]:i.options.displayField(o),e=t(i.options.item).attr("data-value",o[i.options.valueField])):(n=o,e=t(i.options.item).attr("data-value",o)),e.find("a").html(i.highlighter(n)),e[0]}),e.first().addClass("active"),this.$menu.html(e),this},grepper:function(e){var n,i,r=this,o="string"==typeof r.options.displayField;if(!(o&&e&&e.length))return null;if(e[0].hasOwnProperty(r.options.displayField))n=t.grep(e,function(t){return i=o?t[r.options.displayField]:r.options.displayField(t),r.matcher(i)});else{if("string"!=typeof e[0])return null;n=t.grep(e,function(t){return r.matcher(t)})}return this.sorter(n)},next:function(e){var n=this.$menu.find(".active").removeClass("active"),i=n.next();if(i.length||(i=t(this.$menu.find("li")[0])),this.options.scrollBar){var r=this.$menu.children("li").index(i);r%8==0&&this.$menu.scrollTop(26*r)}i.addClass("active")},prev:function(t){var e=this.$menu.find(".active").removeClass("active"),n=e.prev();if(n.length||(n=this.$menu.find("li").last()),this.options.scrollBar){var i=this.$menu.children("li"),r=i.length-1,o=i.index(n);(r-o)%8==0&&this.$menu.scrollTop(26*(o-7))}n.addClass("active")},listen:function(){this.$element.on("focus",t.proxy(this.focus,this)).on("blur",t.proxy(this.blur,this)).on("keypress",t.proxy(this.keypress,this)).on("keyup",t.proxy(this.keyup,this)),this.eventSupported("keydown")&&this.$element.on("keydown",t.proxy(this.keydown,this)),this.$menu.on("click",t.proxy(this.click,this)).on("mouseenter","li",t.proxy(this.mouseenter,this)).on("mouseleave","li",t.proxy(this.mouseleave,this))},move:function(t){if(this.shown){switch(t.keyCode){case 9:case 13:case 27:t.preventDefault();break;case 38:t.preventDefault(),this.prev();break;case 40:t.preventDefault(),this.next()}t.stopPropagation()}},keydown:function(e){this.suppressKeyPressRepeat=~t.inArray(e.keyCode,[40,38,9,13,27]),this.move(e)},keypress:function(t){this.suppressKeyPressRepeat||this.move(t)},keyup:function(t){switch(t.keyCode){case 40:case 38:case 16:case 17:case 18:break;case 9:case 13:if(!this.shown)return;this.select();break;case 27:if(!this.shown)return;this.hide();break;default:this.ajax?this.ajaxLookup():this.lookup()}t.stopPropagation(),t.preventDefault()},focus:function(t){this.focused=!0},blur:function(t){this.focused=!1,!this.mousedover&&this.shown&&this.hide()},click:function(t){t.stopPropagation(),t.preventDefault(),this.select(),this.$element.focus()},mouseenter:function(e){this.mousedover=!0,this.$menu.find(".active").removeClass("active"),t(e.currentTarget).addClass("active")},mouseleave:function(t){this.mousedover=!1,!this.focused&&this.shown&&this.hide()},destroy:function(){this.$element.off("focus",t.proxy(this.focus,this)).off("blur",t.proxy(this.blur,this)).off("keypress",t.proxy(this.keypress,this)).off("keyup",t.proxy(this.keyup,this)),this.eventSupported("keydown")&&this.$element.off("keydown",t.proxy(this.keydown,this)),this.$menu.off("click",t.proxy(this.click,this)).off("mouseenter","li",t.proxy(this.mouseenter,this)).off("mouseleave","li",t.proxy(this.mouseleave,this)),this.$element.removeData("typeahead")}},t.fn.typeahead=function(n){return this.each(function(){var i=t(this),r=i.data("typeahead"),o="object"==typeof n&&n;r||i.data("typeahead",r=new e(this,o)),"string"==typeof n&&r[n]()})},t.fn.typeahead.defaults={source:[],items:10,scrollBar:!1,alignWidth:!0,menu:'<ul class="typeahead dropdown-menu"></ul>',item:'<li><a href="#"></a></li>',valueField:"id",displayField:"name",onSelect:function(){},ajax:{url:null,timeout:300,method:"get",triggerLength:1,loadingClass:null,preDispatch:null,preProcess:null}},t.fn.typeahead.Constructor=e,t(function(){t("body").on("focus.typeahead.data-api",'[data-provide="typeahead"]',function(e){var n=t(this);n.data("typeahead")||(e.preventDefault(),n.typeahead(n.data()))})})}(window.jQuery),!function(t,e,n){"use strict";!function i(t,e,n){function r(s,a){if(!e[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(o)return o(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var c=e[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return r(n?n:e)},c,c.exports,i,t,e,n)}return e[s].exports}for(var o="function"==typeof require&&require,s=0;s<n.length;s++)r(n[s]);return r}({1:[function(i){var r,o,s,a,l=function(t){return t&&t.__esModule?t:{"default":t}},u=i("./modules/handle-dom"),c=i("./modules/utils"),d=i("./modules/handle-swal-dom"),f=i("./modules/handle-click"),h=i("./modules/handle-key"),p=l(h),m=i("./modules/default-params"),g=l(m),v=i("./modules/set-params"),y=l(v);s=a=function(){function i(t){var e=s;return e[t]===n?g["default"][t]:e[t]}var s=arguments[0];if(u.addClass(e.body,"stop-scrolling"),d.resetInput(),s===n)return c.logStr("SweetAlert expects at least 1 attribute!"),!1;var l=c.extend({},g["default"]);switch(typeof s){case"string":l.title=s,l.text=arguments[1]||"",l.type=arguments[2]||"";break;case"object":if(s.title===n)return c.logStr('Missing "title" argument!'),!1;l.title=s.title;for(var h in g["default"])l[h]=i(h);l.confirmButtonText=l.showCancelButton?"Confirm":g["default"].confirmButtonText,l.confirmButtonText=i("confirmButtonText"),l.doneFunction=arguments[1]||null;break;default:return c.logStr('Unexpected type of argument! Expected "string" or "object", got '+typeof s),!1}y["default"](l),d.fixVerticalPosition(),d.openModal(arguments[1]);for(var m=d.getModal(),v=m.querySelectorAll("button"),b=["onclick","onmouseover","onmouseout","onmousedown","onmouseup","onfocus"],w=function(t){return f.handleButton(t,l,m)},x=0;x<v.length;x++)for(var _=0;_<b.length;_++){var T=b[_];v[x][T]=w}d.getOverlay().onclick=w,r=t.onkeydown;var C=function(t){return p["default"](t,l,m)};t.onkeydown=C,t.onfocus=function(){setTimeout(function(){o!==n&&(o.focus(),o=n)},0)},a.enableButtons()},s.setDefaults=a.setDefaults=function(t){if(!t)throw new Error("userParams is required");if("object"!=typeof t)throw new Error("userParams has to be a object");c.extend(g["default"],t)},s.close=a.close=function(){var i=d.getModal();u.fadeOut(d.getOverlay(),5),u.fadeOut(i,5),u.removeClass(i,"showSweetAlert"),u.addClass(i,"hideSweetAlert"),u.removeClass(i,"visible");var s=i.querySelector(".sa-icon.sa-success");u.removeClass(s,"animate"),u.removeClass(s.querySelector(".sa-tip"),"animateSuccessTip"),u.removeClass(s.querySelector(".sa-long"),"animateSuccessLong");var a=i.querySelector(".sa-icon.sa-error");u.removeClass(a,"animateErrorIcon"),u.removeClass(a.querySelector(".sa-x-mark"),"animateXMark");var l=i.querySelector(".sa-icon.sa-warning");return u.removeClass(l,"pulseWarning"),u.removeClass(l.querySelector(".sa-body"),"pulseWarningIns"),u.removeClass(l.querySelector(".sa-dot"),"pulseWarningIns"),
setTimeout(function(){var t=i.getAttribute("data-custom-class");u.removeClass(i,t)},300),u.removeClass(e.body,"stop-scrolling"),t.onkeydown=r,t.previousActiveElement&&t.previousActiveElement.focus(),o=n,clearTimeout(i.timeout),!0},s.showInputError=a.showInputError=function(t){var e=d.getModal(),n=e.querySelector(".sa-input-error");u.addClass(n,"show");var i=e.querySelector(".sa-error-container");u.addClass(i,"show"),i.querySelector("p").innerHTML=t,setTimeout(function(){s.enableButtons()},1),e.querySelector("input").focus()},s.resetInputError=a.resetInputError=function(t){if(t&&13===t.keyCode)return!1;var e=d.getModal(),n=e.querySelector(".sa-input-error");u.removeClass(n,"show");var i=e.querySelector(".sa-error-container");u.removeClass(i,"show")},s.disableButtons=a.disableButtons=function(){var t=d.getModal(),e=t.querySelector("button.confirm"),n=t.querySelector("button.cancel");e.disabled=!0,n.disabled=!0},s.enableButtons=a.enableButtons=function(){var t=d.getModal(),e=t.querySelector("button.confirm"),n=t.querySelector("button.cancel");e.disabled=!1,n.disabled=!1},"undefined"!=typeof t?t.sweetAlert=t.swal=s:c.logStr("SweetAlert is a frontend module!")},{"./modules/default-params":2,"./modules/handle-click":3,"./modules/handle-dom":4,"./modules/handle-key":5,"./modules/handle-swal-dom":6,"./modules/set-params":8,"./modules/utils":9}],2:[function(t,e,n){Object.defineProperty(n,"__esModule",{value:!0});var i={title:"",text:"",type:null,allowOutsideClick:!1,showConfirmButton:!0,showCancelButton:!1,closeOnConfirm:!0,closeOnCancel:!0,confirmButtonText:"OK",confirmButtonColor:"#8CD4F5",cancelButtonText:"Cancel",imageUrl:null,imageSize:null,timer:null,customClass:"",html:!1,animation:!0,allowEscapeKey:!0,inputType:"text",inputPlaceholder:"",inputValue:"",showLoaderOnConfirm:!1};n["default"]=i,e.exports=n["default"]},{}],3:[function(e,n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=e("./utils"),o=(e("./handle-swal-dom"),e("./handle-dom")),s=function(e,n,i){function s(t){p&&n.confirmButtonColor&&(h.style.backgroundColor=t)}var u,c,d,f=e||t.event,h=f.target||f.srcElement,p=-1!==h.className.indexOf("confirm"),m=-1!==h.className.indexOf("sweet-overlay"),g=o.hasClass(i,"visible"),v=n.doneFunction&&"true"===i.getAttribute("data-has-done-function");switch(p&&n.confirmButtonColor&&(u=n.confirmButtonColor,c=r.colorLuminance(u,-.04),d=r.colorLuminance(u,-.14)),f.type){case"mouseover":s(c);break;case"mouseout":s(u);break;case"mousedown":s(d);break;case"mouseup":s(c);break;case"focus":var y=i.querySelector("button.confirm"),b=i.querySelector("button.cancel");p?b.style.boxShadow="none":y.style.boxShadow="none";break;case"click":var w=i===h,x=o.isDescendant(i,h);if(!w&&!x&&g&&!n.allowOutsideClick)break;p&&v&&g?a(i,n):v&&g||m?l(i,n):o.isDescendant(i,h)&&"BUTTON"===h.tagName&&sweetAlert.close()}},a=function(t,e){var n=!0;o.hasClass(t,"show-input")&&(n=t.querySelector("input").value,n||(n="")),e.doneFunction(n),e.closeOnConfirm&&sweetAlert.close(),e.showLoaderOnConfirm&&sweetAlert.disableButtons()},l=function(t,e){var n=String(e.doneFunction).replace(/\s/g,""),i="function("===n.substring(0,9)&&")"!==n.substring(9,10);i&&e.doneFunction(!1),e.closeOnCancel&&sweetAlert.close()};i["default"]={handleButton:s,handleConfirm:a,handleCancel:l},n.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],4:[function(n,i,r){Object.defineProperty(r,"__esModule",{value:!0});var o=function(t,e){return new RegExp(" "+e+" ").test(" "+t.className+" ")},s=function(t,e){o(t,e)||(t.className+=" "+e)},a=function(t,e){var n=" "+t.className.replace(/[\t\r\n]/g," ")+" ";if(o(t,e)){for(;n.indexOf(" "+e+" ")>=0;)n=n.replace(" "+e+" "," ");t.className=n.replace(/^\s+|\s+$/g,"")}},l=function(t){var n=e.createElement("div");return n.appendChild(e.createTextNode(t)),n.innerHTML},u=function(t){t.style.opacity="",t.style.display="block"},c=function(t){if(t&&!t.length)return u(t);for(var e=0;e<t.length;++e)u(t[e])},d=function(t){t.style.opacity="",t.style.display="none"},f=function(t){if(t&&!t.length)return d(t);for(var e=0;e<t.length;++e)d(t[e])},h=function(t,e){for(var n=e.parentNode;null!==n;){if(n===t)return!0;n=n.parentNode}return!1},p=function(t){t.style.left="-9999px",t.style.display="block";var e,n=t.clientHeight;return e="undefined"!=typeof getComputedStyle?parseInt(getComputedStyle(t).getPropertyValue("padding-top"),10):parseInt(t.currentStyle.padding),t.style.left="",t.style.display="none","-"+parseInt((n+e)/2)+"px"},m=function(t,e){if(+t.style.opacity<1){e=e||16,t.style.opacity=0,t.style.display="block";var n=+new Date,i=function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){t.style.opacity=+t.style.opacity+(new Date-n)/100,n=+new Date,+t.style.opacity<1&&setTimeout(i,e)});i()}t.style.display="block"},g=function(t,e){e=e||16,t.style.opacity=1;var n=+new Date,i=function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){t.style.opacity=+t.style.opacity-(new Date-n)/100,n=+new Date,+t.style.opacity>0?setTimeout(i,e):t.style.display="none"});i()},v=function(n){if("function"==typeof MouseEvent){var i=new MouseEvent("click",{view:t,bubbles:!1,cancelable:!0});n.dispatchEvent(i)}else if(e.createEvent){var r=e.createEvent("MouseEvents");r.initEvent("click",!1,!1),n.dispatchEvent(r)}else e.createEventObject?n.fireEvent("onclick"):"function"==typeof n.onclick&&n.onclick()},y=function(e){"function"==typeof e.stopPropagation?(e.stopPropagation(),e.preventDefault()):t.event&&t.event.hasOwnProperty("cancelBubble")&&(t.event.cancelBubble=!0)};r.hasClass=o,r.addClass=s,r.removeClass=a,r.escapeHtml=l,r._show=u,r.show=c,r._hide=d,r.hide=f,r.isDescendant=h,r.getTopMargin=p,r.fadeIn=m,r.fadeOut=g,r.fireClick=v,r.stopEventPropagation=y},{}],5:[function(e,i,r){Object.defineProperty(r,"__esModule",{value:!0});var o=e("./handle-dom"),s=e("./handle-swal-dom"),a=function(e,i,r){var a=e||t.event,l=a.keyCode||a.which,u=r.querySelector("button.confirm"),c=r.querySelector("button.cancel"),d=r.querySelectorAll("button[tabindex]");if(-1!==[9,13,32,27].indexOf(l)){for(var f=a.target||a.srcElement,h=-1,p=0;p<d.length;p++)if(f===d[p]){h=p;break}9===l?(f=-1===h?u:h===d.length-1?d[0]:d[h+1],o.stopEventPropagation(a),f.focus(),i.confirmButtonColor&&s.setFocusStyle(f,i.confirmButtonColor)):13===l?("INPUT"===f.tagName&&(f=u,u.focus()),f=-1===h?u:n):27===l&&i.allowEscapeKey===!0?(f=c,o.fireClick(f,a)):f=n}};r["default"]=a,i.exports=r["default"]},{"./handle-dom":4,"./handle-swal-dom":6}],6:[function(n,i,r){var o=function(t){return t&&t.__esModule?t:{"default":t}};Object.defineProperty(r,"__esModule",{value:!0});var s=n("./utils"),a=n("./handle-dom"),l=n("./default-params"),u=o(l),c=n("./injected-html"),d=o(c),f=".sweet-alert",h=".sweet-overlay",p=function(){var t=e.createElement("div");for(t.innerHTML=d["default"];t.firstChild;)e.body.appendChild(t.firstChild)},m=function(t){function e(){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(){var t=e.querySelector(f);return t||(p(),t=m()),t}),g=function(){var t=m();return t?t.querySelector("input"):void 0},v=function(){return e.querySelector(h)},y=function(t,e){var n=s.hexToRgb(e);t.style.boxShadow="0 0 2px rgba("+n+", 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)"},b=function(n){var i=m();a.fadeIn(v(),10),a.show(i),a.addClass(i,"showSweetAlert"),a.removeClass(i,"hideSweetAlert"),t.previousActiveElement=e.activeElement;var r=i.querySelector("button.confirm");r.focus(),setTimeout(function(){a.addClass(i,"visible")},500);var o=i.getAttribute("data-timer");if("null"!==o&&""!==o){var s=n;i.timeout=setTimeout(function(){var t=(s||null)&&"true"===i.getAttribute("data-has-done-function");t?s(null):sweetAlert.close()},o)}},w=function(){var t=m(),e=g();a.removeClass(t,"show-input"),e.value=u["default"].inputValue,e.setAttribute("type",u["default"].inputType),e.setAttribute("placeholder",u["default"].inputPlaceholder),x()},x=function(t){if(t&&13===t.keyCode)return!1;var e=m(),n=e.querySelector(".sa-input-error");a.removeClass(n,"show");var i=e.querySelector(".sa-error-container");a.removeClass(i,"show")},_=function(){var t=m();t.style.marginTop=a.getTopMargin(m())};r.sweetAlertInitialize=p,r.getModal=m,r.getOverlay=v,r.getInput=g,r.setFocusStyle=y,r.openModal=b,r.resetInput=w,r.resetInputError=x,r.fixVerticalPosition=_},{"./default-params":2,"./handle-dom":4,"./injected-html":7,"./utils":9}],7:[function(t,e,n){Object.defineProperty(n,"__esModule",{value:!0});var i='<div class="sweet-overlay" tabIndex="-1"></div><div class="sweet-alert"><div class="sa-icon sa-error">\n      <span class="sa-x-mark">\n        <span class="sa-line sa-left"></span>\n        <span class="sa-line sa-right"></span>\n      </span>\n    </div><div class="sa-icon sa-warning">\n      <span class="sa-body"></span>\n      <span class="sa-dot"></span>\n    </div><div class="sa-icon sa-info"></div><div class="sa-icon sa-success">\n      <span class="sa-line sa-tip"></span>\n      <span class="sa-line sa-long"></span>\n\n      <div class="sa-placeholder"></div>\n      <div class="sa-fix"></div>\n    </div><div class="sa-icon sa-custom"></div><h2>Title</h2>\n    <p>Text</p>\n    <fieldset>\n      <input type="text" tabIndex="3" />\n      <div class="sa-input-error"></div>\n    </fieldset><div class="sa-error-container">\n      <div class="icon">!</div>\n      <p>Not valid!</p>\n    </div><div class="sa-button-container">\n      <button class="cancel" tabIndex="2">Cancel</button>\n      <div class="sa-confirm-button-container">\n        <button class="confirm" tabIndex="1">OK</button><div class="la-ball-fall">\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </div></div>';n["default"]=i,e.exports=n["default"]},{}],8:[function(t,e,i){Object.defineProperty(i,"__esModule",{value:!0});var r=t("./utils"),o=t("./handle-swal-dom"),s=t("./handle-dom"),a=["error","warning","info","success","input","prompt"],l=function(t){var e=o.getModal(),i=e.querySelector("h2"),l=e.querySelector("p"),u=e.querySelector("button.cancel"),c=e.querySelector("button.confirm");if(i.innerHTML=t.html?t.title:s.escapeHtml(t.title).split("\n").join("<br>"),l.innerHTML=t.html?t.text:s.escapeHtml(t.text||"").split("\n").join("<br>"),t.text&&s.show(l),t.customClass)s.addClass(e,t.customClass),e.setAttribute("data-custom-class",t.customClass);else{var d=e.getAttribute("data-custom-class");s.removeClass(e,d),e.setAttribute("data-custom-class","")}if(s.hide(e.querySelectorAll(".sa-icon")),t.type&&!r.isIE8()){var f=function(){for(var i=!1,r=0;r<a.length;r++)if(t.type===a[r]){i=!0;break}if(!i)return logStr("Unknown alert type: "+t.type),{v:!1};var l=["success","error","warning","info"],u=n;-1!==l.indexOf(t.type)&&(u=e.querySelector(".sa-icon.sa-"+t.type),s.show(u));var c=o.getInput();switch(t.type){case"success":s.addClass(u,"animate"),s.addClass(u.querySelector(".sa-tip"),"animateSuccessTip"),s.addClass(u.querySelector(".sa-long"),"animateSuccessLong");break;case"error":s.addClass(u,"animateErrorIcon"),s.addClass(u.querySelector(".sa-x-mark"),"animateXMark");break;case"warning":s.addClass(u,"pulseWarning"),s.addClass(u.querySelector(".sa-body"),"pulseWarningIns"),s.addClass(u.querySelector(".sa-dot"),"pulseWarningIns");break;case"input":case"prompt":c.setAttribute("type",t.inputType),c.value=t.inputValue,c.setAttribute("placeholder",t.inputPlaceholder),s.addClass(e,"show-input"),setTimeout(function(){c.focus(),c.addEventListener("keyup",swal.resetInputError)},400)}}();if("object"==typeof f)return f.v}if(t.imageUrl){var h=e.querySelector(".sa-icon.sa-custom");h.style.backgroundImage="url("+t.imageUrl+")",s.show(h);var p=80,m=80;if(t.imageSize){var g=t.imageSize.toString().split("x"),v=g[0],y=g[1];v&&y?(p=v,m=y):logStr("Parameter imageSize expects value with format WIDTHxHEIGHT, got "+t.imageSize)}h.setAttribute("style",h.getAttribute("style")+"width:"+p+"px; height:"+m+"px")}e.setAttribute("data-has-cancel-button",t.showCancelButton),t.showCancelButton?u.style.display="inline-block":s.hide(u),e.setAttribute("data-has-confirm-button",t.showConfirmButton),t.showConfirmButton?c.style.display="inline-block":s.hide(c),t.cancelButtonText&&(u.innerHTML=s.escapeHtml(t.cancelButtonText)),t.confirmButtonText&&(c.innerHTML=s.escapeHtml(t.confirmButtonText)),t.confirmButtonColor&&(c.style.backgroundColor=t.confirmButtonColor,c.style.borderLeftColor=t.confirmLoadingButtonColor,c.style.borderRightColor=t.confirmLoadingButtonColor,o.setFocusStyle(c,t.confirmButtonColor)),e.setAttribute("data-allow-outside-click",t.allowOutsideClick);var b=t.doneFunction?!0:!1;e.setAttribute("data-has-done-function",b),t.animation?"string"==typeof t.animation?e.setAttribute("data-animation",t.animation):e.setAttribute("data-animation","pop"):e.setAttribute("data-animation","none"),e.setAttribute("data-timer",t.timer)};i["default"]=l,e.exports=i["default"]},{"./handle-dom":4,"./handle-swal-dom":6,"./utils":9}],9:[function(e,n,i){Object.defineProperty(i,"__esModule",{value:!0});var r=function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},o=function(t){var e=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return e?parseInt(e[1],16)+", "+parseInt(e[2],16)+", "+parseInt(e[3],16):null},s=function(){return t.attachEvent&&!t.addEventListener},a=function(e){t.console&&t.console.log("SweetAlert: "+e)},l=function(t,e){t=String(t).replace(/[^0-9a-f]/gi,""),t.length<6&&(t=t[0]+t[0]+t[1]+t[1]+t[2]+t[2]),e=e||0;var n,i,r="#";for(i=0;3>i;i++)n=parseInt(t.substr(2*i,2),16),n=Math.round(Math.min(Math.max(0,n+n*e),255)).toString(16),r+=("00"+n).substr(n.length);return r};i.extend=r,i.hexToRgb=o,i.isIE8=s,i.logStr=a,i.colorLuminance=l},{}]},{},[1]),"function"==typeof define&&define.amd?define(function(){return sweetAlert}):"undefined"!=typeof module&&module.exports&&(module.exports=sweetAlert)}(window,document);
//# sourceMappingURL=data:application/json;base64,